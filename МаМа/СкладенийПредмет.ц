взяти визначення МаМа;

секція МаМа {
  місцева дія виділити_складений_предмет(М: адреса<Машина>, тип: адреса<ПредметСтруктури>): адреса<СкладенийПредмет> {
    ціль складений_предмет = виділити_предмет<СкладенийПредмет>(М, тип);

    складений_предмет.властивості = зробити_реєстр<адреса<Назва>, адреса<Предмет>>(М, перевірити_чи_назви_рівні);

    вернути складений_предмет;
  }

  місцева дія звільнити_складений_предмет(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Предмет>>(М, складений_предмет.властивості);
    звільнити(М, складений_предмет);
  }

  місцева дія складений_предмет_виконати(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    ціль предмет_чародії_виконати = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_виконати);
    якщо предмет_чародії_виконати == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_виконати, складений_предмет як адреса<Предмет>);
    }
    вернути предмет_виконати(предмет_чародії_виконати, М, предмет_я, аргументи, іменовані_аргументи);
  }

  місцева дія складений_предмет_отримати_властивість(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, назва: адреса<Назва>): предмет_або_стан_падіння {
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, складений_предмет.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = складений_предмет.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія складений_предмет_змінити_властивість(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    якщо складений_предмет.тип != пусто {
      змінна ціль елемент_параметра: адреса<ЕлементРеєстру<адреса<Назва>, Параметр>> = пусто;
      змінна ціль пп: позитивне = 0;
      поки пп < складений_предмет.тип.параметри.розмір {
        якщо складений_предмет.тип.параметри.елементи[пп].ключ == назва {
          елемент_параметра = складений_предмет.тип.параметри.елементи[пп]::адреса;
        }
        пп += 1;
      }
      якщо елемент_параметра != пусто {
        якщо елемент_параметра.значення.типи.розмір > 0 {
          змінна ціль знайдено = ні;
          змінна ціль пт: позитивне = 0;
          поки пт < елемент_параметра.значення.типи.розмір {
            ціль тип = елемент_параметра.значення.типи.дані[пт];
            якщо перевірити_чи_предмет_є(аргумент, М, тип) {
              знайдено = так;
            }
            пт += 1;
          }
          якщо знайдено == ні {
            увімкнути_стан_падіння(М, пусто);
            якщо аргумент == пусто {
              ціль ю8_значення_назви = ю8 { 0, пусто };
              якщо виділити_ю8_з_назви(М, елемент_параметра.ключ, ю8_значення_назви::адреса) == ні {
                // потім: помилка
              }
              ціль п = виділити_предмет_тексту_помилки_невірний_тип_аргумента(М, ю8_значення_назви, елемент_параметра.значення.типи, пусто);
              звільнити(М, ю8_значення_назви.дані як адреса);
              вернути п;
            } інакше {
              ціль ю8_значення_назви = ю8 { 0, пусто };
              якщо виділити_ю8_з_назви(М, елемент_параметра.ключ, ю8_значення_назви::адреса) == ні {
                // потім: помилка
              }
              ціль п = виділити_предмет_тексту_помилки_невірний_тип_аргумента(М, ю8_значення_назви, елемент_параметра.значення.типи, аргумент.тип);
              звільнити(М, ю8_значення_назви.дані як адреса);
              вернути п;
            }
          }
        }
      }
    }
    змінити_в_реєстрі<адреса<Назва>, адреса<Предмет>>(М, складений_предмет.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія складений_предмет_видалити_властивість(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, назва: адреса<Назва>): предмет_або_стан_падіння {
    змінна ціль елемент_параметра = отримати_з_реєстру<адреса<Назва>, Параметр>(М, складений_предмет.тип.параметри, назва);
    якщо елемент_параметра != пусто {
      змінна ціль тип_може_бути_пусто = ні;
      якщо елемент_параметра.значення.типи.розмір == 0 {
        тип_може_бути_пусто = так;
      } інакше {
        змінна ціль пт: позитивне = 0;
        поки пт < елемент_параметра.значення.типи.розмір {
          якщо елемент_параметра.значення.типи.дані[пт] == пусто {
            тип_може_бути_пусто = так;
          }
          пт += 1;
        }
      }
      якщо тип_може_бути_пусто == ні {
        вернути М.предмет_логічного_ні як адреса<Предмет>;
      }
    }
    якщо видалити_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, складений_предмет.властивості::адреса, назва) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія складений_предмет_виконати_властивість(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    ціль предмет_властивості = складений_предмет_отримати_властивість(складений_предмет, М, назва_властивості);
    якщо М.стан_падіння == позитивне(так) {
      вернути предмет_властивості;
    }
    вернути предмет_виконати(предмет_властивості, М, складений_предмет як адреса<Предмет>, аргументи, іменовані_аргументи);
  }

  місцева дія складений_предмет_отримати_елемент(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, ключ: адреса<Предмет>): предмет_або_стан_падіння {
    ціль аргументи = виділити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи, ключ);
    ціль результат = складений_предмет_виконати_властивість(складений_предмет, М, М.БН.С.чародія_отримати_елемент, аргументи, пусто);
    звільнити_накопичувач<адреса<Предмет>>(М, аргументи);
    вернути результат;
  }

  місцева дія складений_предмет_змінити_елемент(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, ключ: адреса<Предмет>, значення: адреса<Предмет>): предмет_або_стан_падіння {
    ціль аргументи = виділити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи, ключ);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи, значення);
    ціль результат = складений_предмет_виконати_властивість(складений_предмет, М, М.БН.С.чародія_змінити_елемент, аргументи, пусто);
    звільнити_накопичувач<адреса<Предмет>>(М, аргументи);
    вернути результат;
  }

  місцева дія складений_предмет_видалити_елемент(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, ключ: адреса<Предмет>): предмет_або_стан_падіння {
    ціль аргументи = виділити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи, ключ);
    ціль результат = складений_предмет_виконати_властивість(складений_предмет, М, М.БН.С.чародія_видалити_елемент, аргументи, пусто);
    звільнити_накопичувач<адреса<Предмет>>(М, аргументи);
    вернути результат;
  }

  місцева дія складений_предмет_отримати_перебір(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>): предмет_або_стан_падіння {
    ціль результат = складений_предмет_виконати_властивість(складений_предмет, М, М.БН.С.чародія_перебір, пусто, пусто);
    вернути результат;
  }

  місцева дія складений_предмет_додати(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_додати);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_додати, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_відняти(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_відняти);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_відняти, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_помножити(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_помножити);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_помножити, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_поділити(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_поділити);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_поділити, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_отримати_остачу_ділення(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_остача);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_остача, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_отримати_неповну_частку_ділення(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_неповна_частка);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_неповна_частка, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_піднести_до_степеня(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_степінь);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_степінь, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_зсунути_вліво(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_вліво);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_вліво, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_зсунути_вправо(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_вправо);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_вправо, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_зсунути_вправо_зі_заповненням(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_вправо_зі_заповненням);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_вправо_зі_заповненням, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_двійкове_і(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_двійкове_і);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_двійкове_і, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_двійкове_або(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_двійкове_або);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_двійкове_або, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_двійкове_виключне_або(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_двійкове_виключне_або);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_двійкове_виключне_або, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_двійкове_не(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_двійкове_не);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_двійкове_не, складений_предмет як адреса<Предмет>);
    }
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_більше(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_більше);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_більше, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_менше(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_менше);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_менше, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_рівно(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    якщо перевірити_чи_складений_предмет_рівно(складений_предмет, М, аргумент) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія складений_предмет_містить(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_містить);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_містить, складений_предмет як адреса<Предмет>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Предмет>>(М);
    покласти_в_накопичувач<адреса<Предмет>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Предмет>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_є(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    якщо аргумент.тип != М.предмет_структури_Структура {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    якщо перевірити_чи_складений_предмет_є(складений_предмет, М, аргумент як адреса<ПредметСтруктури>) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія складений_предмет_відʼємне(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_відʼємне);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_відʼємне, складений_предмет як адреса<Предмет>);
    }
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_числове(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_число);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_число, складений_предмет як адреса<Предмет>);
    }
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_заперечити(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>): предмет_або_стан_падіння {
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія складений_предмет_збільшити(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_збільшити);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_збільшити, складений_предмет як адреса<Предмет>);
    }
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія складений_предмет_зменшити(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>): предмет_або_стан_падіння {
    ціль предмет_чародії = складений_предмет_отримати_властивість(складений_предмет, М, М.БН.С.чародія_зменшити);
    якщо предмет_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_помилки_неможливо_виконати_чародію_предмета(М, М.БН.С.чародія_зменшити, складений_предмет як адреса<Предмет>);
    }
    ціль результат_виконання = предмет_виконати(предмет_чародії, М, складений_предмет як адреса<Предмет>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія перевірити_чи_складений_предмет_рівно(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, аргумент: адреса<Предмет>): логічне {
    ціль предмет = складений_предмет як адреса<Предмет>;
    якщо предмет == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_складений_предмет_є(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>): логічне {
    змінна ціль тип = складений_предмет.тип;
    поки тип != пусто {
      якщо тип == предмет_структури {
        вернути так;
      }
      тип = тип.предок;
    }
    вернути ні;
  }

  місцева дія надрукувати_складений_предмет_в_накопичувач_ю8(складений_предмет: адреса<СкладенийПредмет>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_ю8_в_накопичувач_ю8(М, накопичувач_ю8, ю8"СкладенийПредмет");
  }
}