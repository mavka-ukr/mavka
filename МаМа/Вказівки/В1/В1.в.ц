секція МаМа {
  секція Вказівки {
    секція В1 {
      синонім ВПокластиПусто = 1; // []() -> [пусто]
      синонім ВПокластиТак = 2; // []() -> [так]
      синонім ВПокластиНі = 3; // []() -> [ні]
      синонім ВПокластиКонстанту = 4; // [](позиція_константи) -> [константа]
      синонім ВСтворитиДію = 5; // [назва, ..., тип_результату, код](кількість_параметрів) -> [предмет_дії]
      синонім ВСтворитиСтруктуру = 6; // [назва, предок, ...](кількість_параметрів) -> [предмет_структури]
      синонім ВСтворитиМодуль = 7; // [назва, код]() -> [предмет_модуля]
      синонім ВСтворитиСписок = 8; // [](довжина) -> [предмет_списку]
      синонім ВПокластиВСписок = 9; // [предмет_списку, елемент]() -> [предмет_списку]
      синонім ВСтворитиСловник = 10; // [](розмір) -> [предмет_словника]
      синонім ВПокластиВСловник = 11; // [предмет_словника, ключ, значення]() -> [предмет_словника]
      синонім ВПокластиСтруктуруПредмет = 12; // []() -> [предмет_структури_предмет]
      синонім ВПокластиЯ = 13; // []() -> [предмет_я]
      синонім ВЗаписатиМетод = 14; // [предмет_дії, предмет_структури, назва](власна) -> [предмет_дії]
      синонім ВЗаписатиСпецДію = 15; // [предмет_дії, предмет_структури, назва](власна) -> [предмет_дії]
      синонім ВСтворитиДіапазон = 16; // [від, до](включно) -> [предмет_дії]
      // 17-19
      синонім ВВизначити = 20; // [предмет]() -> []
      синонім ВЗвернутись = 21; // [](позиція_константи_назви) -> [предмет]
      синонім ВВиконати = 23; // [предмет_дії, ..., ...](кількість_аргументів, кількість_іменованих_аргументів) -> [результат]
      синонім ВОтриматиВластивість = 24; // [предмет](позиція_константи_назви) -> [предмет_властивості]
      синонім ВЗмінитиВластивість = 25; // [предмет, значення](позиція_константи_назви) -> []
      синонім ВВиконатиВластивість = 26; // [предмет, назва, ..., ...](кількість_аргументів, кількість_іменованих_аргументів) -> [результат]
      синонім ВОтриматиЕлемент = 28; // [предмет, ключ]() -> [елемент]
      синонім ВЗмінитиЕлемент = 29; // [предмет, ключ, значення]() -> []
      синонім ВОтриматиПеребір = 30; // [предмет]() -> [предмет_перебору]
      синонім ВВизначитиЗзовні = 31; // [предмет](позиція_константи_назви) -> []
      синонім ВВиконатиЗПредка = 33; //  [предмет, назва, ..., ...](кількість_аргументів, кількість_іменованих_аргументів) -> [результат]
      // 37-49
      синонім ВДодати = 50; // [а, б]() -> [результат]
      синонім ВВідняти = 51; // [а, б]() -> [результат]
      синонім ВПомножити = 52; // [а, б]() -> [результат]
      синонім ВПоділити = 53; // [а, б]() -> [результат]
      синонім ВОтриматиОстачуДілення = 54; // [а, б]() -> [результат]
      синонім ВОтриматиНеповнуЧасткуДілення = 55; // [а, б]() -> [результат]
      синонім ВПіднестиДоСтепеня = 56; // [а, б]() -> [результат]
      синонім ВЗсунутиВліво = 57; // [а, б]() -> [результат]
      синонім ВЗсунутиВправо = 58; // [а, б]() -> [результат]
      синонім ВЗсунутиВправоЗіЗаповненням = 59; // [а, б]() -> [результат]
      синонім ВДвійковеІ = 60; // [а, б]() -> [результат]
      синонім ВДвійковеАБО = 61; // [а, б]() -> [результат]
      синонім ВДвійковеВиключнеАБО = 62; // [а, б]() -> [результат]
      синонім ВДвійковеНЕ = 63; // [а]() -> [результат]
      синонім ВМенше = 70; // [а, б]() -> [результат]
      синонім ВБільше = 71; // [а, б]() -> [результат]
      синонім ВНеБільше = 72; // [а, б]() -> [результат]
      синонім ВНеМенше = 73; // [а, б]() -> [результат]
      синонім ВРівно = 74; // [а, б]() -> [результат]
      синонім ВНеРівно = 75; // [а, б]() -> [результат]
      синонім ВМістить = 76; // [а, б]() -> [результат]
      синонім ВНеМістить = 77; // [а, б]() -> [результат]
      синонім ВЄ = 78; // [а, б]() -> [результат]
      синонім ВНеЄ = 79; // [а, б]() -> [результат]
      синонім ВВідʼємне = 80; // [а]() -> [результат]
      синонім ВЧислове = 81; // [а]() -> [результат]
      синонім ВЗаперечити = 82; // [а]() -> [результат]
      синонім ВЗбільшити = 83; // [а]() -> [результат]
      синонім ВЗбільшитиПопереднє = 84; // [а, б]() -> [результат, б]
      синонім ВЗменшити = 85; // [а]() -> [результат]
      // 86-99
      синонім ВПочатиСпробу = 100; // [назва](позиція_вказівки_зловити) -> []
      синонім ВВпасти = 101; // [предмет_помилки]() -> []
      синонім ВЗакінчитиСпробу = 102; // [](позиція_вказівки_виходу) -> []
      синонім ВВзяти = 103; // [назва, ...](кількість_назв) -> [предмет_модуля]
      синонім ВДати = 104; // [предмет, назва]() -> []
      синонім ВПеребратиДалі = 106; // [предмет_перебору]() -> [предмет_перебору, результат_виконання]
      синонім ВЗбитиТекст = 107; // [...](кількість_предметів) -> [збитий_текст]
      синонім ВЗбитиЮнікод = 108; // [...](кількість_предметів) -> [збитий_юнікод]
      // 109-129
      синонім ВСтворитиПараметр = 133; // [назва, тип, код_значення]() -> [параметр]
      синонім ВСтворитиТип = 134; // [...](кількість_допустимих) -> [тип]
      // 137-199
      синонім ВСтрибнути = 200; // [](позиція_вказівки) -> []
      синонім ВСтрибнутиЯкщоНі = 201; // [предмет](позиція_вказівки) -> []
      синонім ВЗабрати = 202; // [предмет]() -> []
      синонім ВВернути = 203; // [предмет]() -> []
      синонім ВСтрибнутиЯкщоНіЗалишивши = 204; // [предмет](позиція_вказівки) -> [предмет]
      синонім ВСтрибнутиЯкщоТак = 205; // [предмет](позиція_вказівки) -> [предмет]
      синонім ВСтрибнутиЯкщоТакЗалишивши = 206; // [предмет](позиція_вказівки) -> [предмет]
      синонім ВДублювати = 207; // [предмет]() -> [предмет, предмет]
      синонім ВДублюватиПопереднє = 208; // [предмет, предмет2]() -> [предмет, предмет2, предмет]

      структура Система;
      структура Константи;
      структура Вказівки;
      структура Код;

      структура Система {
        дані: невідома_адреса;
        виділити_сиру_памʼять: (система: адреса<Система>, розмір: натуральне) -> памʼять<н8>;
        перевиділити_сиру_памʼять: (система: адреса<Система>, значення: памʼять<н8>, новий_розмір: натуральне) -> памʼять<н8>;
        звільнити_сиру_памʼять: (система: адреса<Система>, значення: памʼять<н8>) -> ніщо;
      }

      дія виділити<Т>(система: адреса<Система>) -> адреса<Т> {
        вернути система.виділити_сиру_памʼять(система, Т.розмір) як адреса<Т>;
      }

      дія перевиділити<Т>(система: адреса<Система>, значення: адреса<Т>, кількість: натуральне) -> памʼять<Т> {
        вернути система.перевиділити_сиру_памʼять(система, значення як невідома_адреса, кількість * Т.розмір) як памʼять<Т>;
      }

      дія звільнити(система: адреса<Система>, значення: невідома_адреса) {
        система.звільнити_сиру_памʼять(система, значення як памʼять<н8>);
      }

      дія виділити_памʼять<Т>(система: адреса<Система>, кількість: натуральне) -> памʼять<Т> {
        вернути система.виділити_сиру_памʼять(система, кількість * Т.розмір) як памʼять<Т>;
      }

      дія перевиділити_памʼять<Т>(система: адреса<Система>, значення: памʼять<Т>, кількість: натуральне) -> памʼять<Т> {
        вернути система.перевиділити_сиру_памʼять(система, значення як памʼять<н8>, кількість * Т.розмір) як памʼять<Т>;
      }

      дія звільнити_памʼять(система: адреса<Система>, значення: невідома_памʼять) {
        система.звільнити_сиру_памʼять(система, значення як памʼять<н8>);
      }

      стала ВидКонстантиЧисло = 1;
      стала ВидКонстантиТекст = 2;
      стала ВидКонстантиЮнікод = 3;
      стала ВидКонстантиКод = 4;

      структура Константи {
        розмір: н32;
        дані: памʼять<н8>;
        вмісткість: н32;
        кількість: н32;
      }

      структура Вказівки {
        розмір: н32;
        дані: памʼять<н8>;
        вмісткість: н32;
      }

      структура Код {
        система: адреса<Система>;
        константи: Константи;
        вказівки: Вказівки;
      }

      дія створити_код(система: адреса<Система>) -> адреса<Код> {
        змінна код = виділити<Код>(система);
        код.система = система;
        вернути код;
      }

      дія покласти_частину_константи(код: адреса<Код>, значення: н8) -> н32 {
        якщо код.константи.розмір == код.константи.вмісткість {
          код.константи.вмісткість += 1;
          код.константи.дані = перевиділити_памʼять<н8>(код.система, код.константи.дані, натуральне(код.константи.вмісткість));
        }
        код.константи.дані[код.константи.розмір] = значення;
        код.константи.розмір += 1;
        вернути код.константи.розмір - 1;
      }

      дія покласти_частину_вказівки(код: адреса<Код>, значення: н8) -> н32 {
        якщо код.вказівки.розмір == код.вказівки.вмісткість {
          код.вказівки.вмісткість += 1;
          код.вказівки.дані = перевиділити_памʼять<н8>(код.система, код.вказівки.дані, натуральне(код.вказівки.вмісткість));
        }
        код.вказівки.дані[код.вказівки.розмір] = значення;
        код.вказівки.розмір += 1;
        вернути код.вказівки.розмір - 1;
      }

      // число закодовується як число плаваючою комою 64 біт (ІЕЕЕ 754)
      // число закодовується молодшим порядком байтів
      дія покласти_константу_числа(код: адреса<Код>, значення: р64) -> н32 {
        покласти_частину_константи(код, ВидКонстантиЧисло);

        змінна адреса_значення = значення::адреса як памʼять<н8>;
        покласти_частину_константи(код, адреса_значення[0]);
        покласти_частину_константи(код, адреса_значення[1]);
        покласти_частину_константи(код, адреса_значення[2]);
        покласти_частину_константи(код, адреса_значення[3]);
        покласти_частину_константи(код, адреса_значення[4]);
        покласти_частину_константи(код, адреса_значення[5]);
        покласти_частину_константи(код, адреса_значення[6]);
        покласти_частину_константи(код, адреса_значення[7]);

        код.константи.кількість += 1;

        вернути код.константи.кількість - 1;
      }

      // текст закодовується як т8
      // розмір тексту закодовується як н32 молодшим порядком байтів
      дія покласти_константу_тексту(код: адреса<Код>, значення: т8) -> н32 {
        змінна розмір = н32(значення.розмір);

        покласти_частину_константи(код, ВидКонстантиТекст);

        змінна адреса_розміру = розмір::адреса як памʼять<н8>;
        покласти_частину_константи(код, адреса_розміру[0]);
        покласти_частину_константи(код, адреса_розміру[1]);
        покласти_частину_константи(код, адреса_розміру[2]);
        покласти_частину_константи(код, адреса_розміру[3]);

        змінна п: н32 = 0;

        поки п < розмір {
          покласти_частину_константи(код, значення.дані[п]);

          п += 1;
        }

        код.константи.кількість += 1;

        вернути код.константи.кількість - 1;
      }

      // юнікод закодовується як ю8
      // розмір юнікоду закодовується як н32 молодшим порядком байтів
      дія покласти_константу_юнікоду(код: адреса<Код>, значення: ю8) -> н32 {
        змінна розмір = н32(значення.розмір);

        покласти_частину_константи(код, ВидКонстантиЮнікод);

        змінна адреса_розміру = розмір::адреса як памʼять<н8>;
        покласти_частину_константи(код, адреса_розміру[0]);
        покласти_частину_константи(код, адреса_розміру[1]);
        покласти_частину_константи(код, адреса_розміру[2]);
        покласти_частину_константи(код, адреса_розміру[3]);

        змінна п: н32 = 0;

        поки п < розмір {
          покласти_частину_константи(код, значення.дані[п]);

          п += 1;
        }

        код.константи.кількість += 1;

        вернути код.константи.кількість - 1;
      }

      // розмір констант коду закодовується як н32 молодшим порядком байтів
      дія покласти_константу_коду(код: адреса<Код>, значення: адреса<Код>) -> н32 {
        змінна розмір_констант = н32(значення.константи.розмір);
        змінна розмір_вказівок = н32(значення.вказівки.розмір);

        покласти_частину_константи(код, ВидКонстантиКод);

        змінна адреса_розміру_констант = розмір_констант::адреса як памʼять<н8>;
        покласти_частину_константи(код, адреса_розміру_констант[0]);
        покласти_частину_константи(код, адреса_розміру_констант[1]);
        покласти_частину_константи(код, адреса_розміру_констант[2]);
        покласти_частину_константи(код, адреса_розміру_констант[3]);

        змінна п: н32 = 0;

        поки п < розмір_констант {
          покласти_частину_константи(код, значення.константи.дані[п]);

          п += 1;
        }

        змінна адреса_розміру_вказівок = розмір_вказівок::адреса як памʼять<н8>;
        покласти_частину_константи(код, адреса_розміру_вказівок[0]);
        покласти_частину_константи(код, адреса_розміру_вказівок[1]);
        покласти_частину_константи(код, адреса_розміру_вказівок[2]);
        покласти_частину_константи(код, адреса_розміру_вказівок[3]);

        п = 0;

        поки п < розмір_вказівок {
          покласти_частину_константи(код, значення.вказівки.дані[п]);

          п += 1;
        }

        код.константи.кількість += 1;

        вернути код.константи.кількість - 1;
      }
      
      дія покласти_вказівку(код: адреса<Код>, рядок: н32, вказівка: н8) -> н32 {
        змінна позиція = код.вказівки.розмір;

        покласти_частину_вказівки(код, вказівка);

        змінна адреса_рядка = рядок::адреса як памʼять<н8>;
        покласти_частину_вказівки(код, адреса_рядка[0]);
        покласти_частину_вказівки(код, адреса_рядка[1]);
        покласти_частину_вказівки(код, адреса_рядка[2]);
        покласти_частину_вказівки(код, адреса_рядка[3]);

        вернути позиція;
      }
      
      дія покласти_вказівку_з_аргументом(код: адреса<Код>, рядок: н32, вказівка: н8, аргумент: н32) -> н32 {
        змінна позиція = код.вказівки.розмір;

        покласти_частину_вказівки(код, вказівка);

        змінна адреса_рядка = рядок::адреса як памʼять<н8>;
        покласти_частину_вказівки(код, адреса_рядка[0]);
        покласти_частину_вказівки(код, адреса_рядка[1]);
        покласти_частину_вказівки(код, адреса_рядка[2]);
        покласти_частину_вказівки(код, адреса_рядка[3]);

        змінна адреса_аргумента = аргумент::адреса як памʼять<н8>;
        покласти_частину_вказівки(код, адреса_аргумента[0]);
        покласти_частину_вказівки(код, адреса_аргумента[1]);
        покласти_частину_вказівки(код, адреса_аргумента[2]);
        покласти_частину_вказівки(код, адреса_аргумента[3]);

        вернути позиція;
      }
      
      дія покласти_вказівку_з_двома_аргументами(код: адреса<Код>, рядок: н32, вказівка: н8, аргумент1: н32, аргумент2: н32) -> н32 {
        змінна позиція = код.вказівки.розмір;

        покласти_частину_вказівки(код, вказівка);

        змінна адреса_рядка = рядок::адреса як памʼять<н8>;
        покласти_частину_вказівки(код, адреса_рядка[0]);
        покласти_частину_вказівки(код, адреса_рядка[1]);
        покласти_частину_вказівки(код, адреса_рядка[2]);
        покласти_частину_вказівки(код, адреса_рядка[3]);

        змінна адреса_аргумента1 = аргумент1::адреса як памʼять<н8>;
        покласти_частину_вказівки(код, адреса_аргумента1[0]);
        покласти_частину_вказівки(код, адреса_аргумента1[1]);
        покласти_частину_вказівки(код, адреса_аргумента1[2]);
        покласти_частину_вказівки(код, адреса_аргумента1[3]);

        змінна адреса_аргумента2 = аргумент2::адреса як памʼять<н8>;
        покласти_частину_вказівки(код, адреса_аргумента2[0]);
        покласти_частину_вказівки(код, адреса_аргумента2[1]);
        покласти_частину_вказівки(код, адреса_аргумента2[2]);
        покласти_частину_вказівки(код, адреса_аргумента2[3]);

        вернути позиція;
      }

      дія покласти_вказівку_ПокластиПусто(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПокластиПусто);
      }

      дія покласти_вказівку_ПокластиТак(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПокластиТак);
      }

      дія покласти_вказівку_ПокластиНі(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПокластиНі);
      }

      дія покласти_вказівку_ПокластиКонстанту(код: адреса<Код>, рядок: н32, позиція_константи: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВПокластиКонстанту, позиція_константи);
      }

      дія покласти_вказівку_СтворитиДію(код: адреса<Код>, рядок: н32, кількість_параметрів: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтворитиДію, кількість_параметрів);
      }

      дія покласти_вказівку_СтворитиСтруктуру(код: адреса<Код>, рядок: н32, кількість_параметрів: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтворитиСтруктуру, кількість_параметрів);
      }

      дія покласти_вказівку_СтворитиМодуль(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВСтворитиМодуль);
      }

      дія покласти_вказівку_СтворитиСписок(код: адреса<Код>, рядок: н32, вмісткість: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтворитиСписок, вмісткість);
      }

      дія покласти_вказівку_ПокластиВСписок(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПокластиВСписок);
      }

      дія покласти_вказівку_СтворитиСловник(код: адреса<Код>, рядок: н32, вмісткість: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтворитиСловник, вмісткість);
      }

      дія покласти_вказівку_ПокластиВСловник(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПокластиВСловник);
      }

      дія покласти_вказівку_ПокластиСтруктуруПредмет(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПокластиСтруктуруПредмет);
      }

      дія покласти_вказівку_ПокластиЯ(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПокластиЯ);
      }

      дія покласти_вказівку_ЗаписатиМетод(код: адреса<Код>, рядок: н32, власна: логічне) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВЗаписатиМетод, н32(власна));
      }

      дія покласти_вказівку_ЗаписатиСпецДію(код: адреса<Код>, рядок: н32, власна: логічне) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВЗаписатиСпецДію, н32(власна));
      }

      дія покласти_вказівку_СтворитиДіапазон(код: адреса<Код>, рядок: н32, включно: логічне) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтворитиДіапазон, н32(включно));
      }

      дія покласти_вказівку_Визначити(код: адреса<Код>, рядок: н32, позиція_константи_назви: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВВизначити, позиція_константи_назви);
      }

      дія покласти_вказівку_Звернутись(код: адреса<Код>, рядок: н32, позиція_константи_назви: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВЗвернутись, позиція_константи_назви);
      }

      дія покласти_вказівку_Виконати(код: адреса<Код>, рядок: н32, кількість_аргументів: н32, кількість_іменованих_аргументів: н32) -> н32 {
        вернути покласти_вказівку_з_двома_аргументами(код, рядок, ВВиконати, кількість_аргументів, кількість_іменованих_аргументів);
      }

      дія покласти_вказівку_ОтриматиВластивість(код: адреса<Код>, рядок: н32, позиція_константи_назви: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВОтриматиВластивість, позиція_константи_назви);
      }

      дія покласти_вказівку_ЗмінитиВластивість(код: адреса<Код>, рядок: н32, позиція_константи_назви: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВЗмінитиВластивість, позиція_константи_назви);
      }

      дія покласти_вказівку_ВиконатиВластивість(код: адреса<Код>, рядок: н32, кількість_аргументів: н32, кількість_іменованих_аргументів: н32) -> н32 {
        вернути покласти_вказівку_з_двома_аргументами(код, рядок, ВВиконатиВластивість, кількість_аргументів, кількість_іменованих_аргументів);
      }

      дія покласти_вказівку_ОтриматиЕлемент(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВОтриматиЕлемент);
      }

      дія покласти_вказівку_ЗмінитиЕлемент(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЗмінитиЕлемент);
      }

      дія покласти_вказівку_ОтриматиПеребір(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВОтриматиПеребір);
      }

      дія покласти_вказівку_ВизначитиЗзовні(код: адреса<Код>, рядок: н32, позиція_константи_назви: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВВизначитиЗзовні, позиція_константи_назви);
      }

      дія покласти_вказівку_ВиконатиЗПредка(код: адреса<Код>, рядок: н32, кількість_аргументів: н32, кількість_іменованих_аргументів: н32) -> н32 {
        вернути покласти_вказівку_з_двома_аргументами(код, рядок, ВВиконатиЗПредка, кількість_аргументів, кількість_іменованих_аргументів);
      }

      дія покласти_вказівку_Додати(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВДодати);
      }

      дія покласти_вказівку_Відняти(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВВідняти);
      }

      дія покласти_вказівку_Помножити(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПомножити);
      }

      дія покласти_вказівку_Поділити(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПоділити);
      }

      дія покласти_вказівку_ОтриматиОстачуДілення(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВОтриматиОстачуДілення);
      }

      дія покласти_вказівку_ОтриматиНеповнуЧасткуДілення(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВОтриматиНеповнуЧасткуДілення);
      }

      дія покласти_вказівку_ПіднестиДоСтепеня(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПіднестиДоСтепеня);
      }

      дія покласти_вказівку_ЗсунутиВліво(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЗсунутиВліво);
      }

      дія покласти_вказівку_ЗсунутиВправо(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЗсунутиВправо);
      }

      дія покласти_вказівку_ЗсунутиВправоЗіЗаповненням(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЗсунутиВправоЗіЗаповненням);
      }

      дія покласти_вказівку_ДвійковеІ(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВДвійковеІ);
      }

      дія покласти_вказівку_ДвійковеАБО(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВДвійковеАБО);
      }

      дія покласти_вказівку_ДвійковеВиключнеАБО(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВДвійковеВиключнеАБО);
      }

      дія покласти_вказівку_ДвійковеНЕ(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВДвійковеНЕ);
      }

      дія покласти_вказівку_Менше(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВМенше);
      }

      дія покласти_вказівку_Більше(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВБільше);
      }

      дія покласти_вказівку_НеБільше(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВНеБільше);
      }

      дія покласти_вказівку_НеМенше(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВНеМенше);
      }

      дія покласти_вказівку_Рівно(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВРівно);
      }

      дія покласти_вказівку_НеРівно(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВНеРівно);
      }

      дія покласти_вказівку_Містить(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВМістить);
      }

      дія покласти_вказівку_НеМістить(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВНеМістить);
      }

      дія покласти_вказівку_Є(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЄ);
      }

      дія покласти_вказівку_НеЄ(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВНеЄ);
      }

      дія покласти_вказівку_Відʼємне(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВВідʼємне);
      }

      дія покласти_вказівку_Числове(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЧислове);
      }

      дія покласти_вказівку_Заперечити(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЗаперечити);
      }

      дія покласти_вказівку_Збільшити(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЗбільшити);
      }

      дія покласти_вказівку_ЗбільшитиПопереднє(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЗбільшитиПопереднє);
      }

      дія покласти_вказівку_Зменшити(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЗменшити);
      }

      дія покласти_вказівку_ПочатиСпробу(код: адреса<Код>, рядок: н32, позиція_вказівки_зловити: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВПочатиСпробу, позиція_вказівки_зловити);
      }

      дія покласти_вказівку_Впасти(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВВпасти);
      }

      дія покласти_вказівку_ЗакінчитиСпробу(код: адреса<Код>, рядок: н32, позиція_вказівки_виходу: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВЗакінчитиСпробу, позиція_вказівки_виходу);
      }

      дія покласти_вказівку_Взяти(код: адреса<Код>, рядок: н32, кількість_назв: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВВзяти, кількість_назв);
      }

      дія покласти_вказівку_Дати(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВДати);
      }

      дія покласти_вказівку_ПеребратиДалі(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВПеребратиДалі);
      }

      дія покласти_вказівку_ЗбитиТекст(код: адреса<Код>, рядок: н32, кількість_предметів: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВЗбитиТекст, кількість_предметів);
      }

      дія покласти_вказівку_ЗбитиЮнікод(код: адреса<Код>, рядок: н32, кількість_предметів: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВЗбитиЮнікод, кількість_предметів);
      }

      дія покласти_вказівку_СтворитиПараметр(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВСтворитиПараметр);
      }

      дія покласти_вказівку_СтворитиТип(код: адреса<Код>, рядок: н32, кількість_допустимих: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтворитиТип, кількість_допустимих);
      }

      дія покласти_вказівку_Стрибнути(код: адреса<Код>, рядок: н32, позиція_вказівки: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтрибнути, позиція_вказівки);
      }

      дія покласти_вказівку_СтрибнутиЯкщоНі(код: адреса<Код>, рядок: н32, позиція_вказівки: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтрибнутиЯкщоНі, позиція_вказівки);
      }

      дія покласти_вказівку_Забрати(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВЗабрати);
      }

      дія покласти_вказівку_Вернути(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВВернути);
      }

      дія покласти_вказівку_СтрибнутиЯкщоНіЗалишивши(код: адреса<Код>, рядок: н32, позиція_вказівки: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтрибнутиЯкщоНіЗалишивши, позиція_вказівки);
      }

      дія покласти_вказівку_СтрибнутиЯкщоТак(код: адреса<Код>, рядок: н32, позиція_вказівки: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтрибнутиЯкщоТак, позиція_вказівки);
      }

      дія покласти_вказівку_СтрибнутиЯкщоТакЗалишивши(код: адреса<Код>, рядок: н32, позиція_вказівки: н32) -> н32 {
        вернути покласти_вказівку_з_аргументом(код, рядок, ВСтрибнутиЯкщоТакЗалишивши, позиція_вказівки);
      }

      дія покласти_вказівку_Дублювати(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВДублювати);
      }

      дія покласти_вказівку_ДублюватиПопереднє(код: адреса<Код>, рядок: н32) -> н32 {
        вернути покласти_вказівку(код, рядок, ВДублюватиПопереднє);
      }

      структура ПереноснийОбразКоду {
        розмір: н32;
        дані: памʼять<н8>;
      }

      /*
       * Переносний Образ Коду МаМа В1
       *
       * Схематичне зображення переносного образу коду:
       *   [МаМа] - 4 байти магічна послідовність
       *   [0000] - 4 байти версія (н32, молодший порядок)
       *   [0000] - 4 байти розмір констант (н32, молодший порядок)
       *   [....] - к байтів дані констант
       *   [0000] - 4 байти розмір вказівок (н32, молодший порядок)
       *   [....] - к байтів дані вказівок
       *
       * Схематичне зображення константи числа:
       *   [0]        - 1 байт вид константи
       *   [00000000] - 8 байтів дані числа (р64, молодший порядок)
       *
       * Схематичне зображення константи тексту:
       *   [0]    - 1 байт вид константи
       *   [0000] - 4 байти розмір тексту (н32, молодший порядок)
       *   [....] - к байтів дані тексту (8 бітне кодування)
       *
       * Схематичне зображення константи юнікоду:
       *   [0]    - 1 байт вид константи
       *   [0000] - 4 байти розмір юнікоду (н32, молодший порядок)
       *   [....] - к байтів дані юнікоду (8 бітне кодування)
       *
       * Схематичне зображення константи коду:
       *   [0]    - 1 байт вид константи
       *   [0000] - 4 байти розмір констант (н32, молодший порядок)
       *   [....] - к байтів дані констант
       *   [0000] - 4 байти розмір вказівок (н32, молодший порядок)
       *   [....] - к байтів дані вказівок
       *
       * Схематичне зображення вказівки без аргументів:
       *   [0]    - 1 байт вид вказівки
       *   [0000] - 4 байти рядок (н32, молодший порядок)
       *
       * Схематичне зображення вказівки з одним аргументом:
       *   [0]    - 1 байт вид вказівки
       *   [0000] - 4 байти рядок (н32, молодший порядок)
       *   [0000] - 4 байти аргумент (н32, молодший порядок)
       *
       * Схематичне зображення вказівки з двома аргументами:
       *   [0]    - 1 байт вид вказівки
       *   [0000] - 4 байти рядок (н32, молодший порядок)
       *   [0000] - 4 байти аргумент1 (н32, молодший порядок)
       *   [0000] - 4 байти аргумент2 (н32, молодший порядок)
       */
      дія зробити_переносний_образ_коду(система: адреса<Система>, код: адреса<Код>, вихід: адреса<ПереноснийОбразКоду>) -> логічне {
        змінна розмір = н32(4) + н32(4) + н32(4) + код.константи.розмір + н32(4) + код.вказівки.розмір;
        змінна дані: памʼять<н8> = виділити_памʼять<н8>(система, натуральне(розмір));

        змінна п: н32 = 0;

        // магічна послідовність "МаМа"
        дані[п] = 79;
        п += 1;
        дані[п] = 96;
        п += 1;
        дані[п] = 79;
        п += 1;
        дані[п] = 96;
        п += 1;

        // версія
        дані[п] = 0;
        п += 1;
        дані[п] = 0;
        п += 1;
        дані[п] = 0;
        п += 1;
        дані[п] = 0;
        п += 1;

        змінна розмір_констант = н32(код.константи.розмір);
        змінна розмір_вказівок = н32(код.вказівки.розмір);

        змінна адреса_розміру_констант = розмір_констант::адреса як памʼять<н8>;
        дані[п] = адреса_розміру_констант[0];
        п += 1;
        дані[п] = адреса_розміру_констант[1];
        п += 1;
        дані[п] = адреса_розміру_констант[2];
        п += 1;
        дані[п] = адреса_розміру_констант[3];
        п += 1;

        змінна пп: н32 = 0;

        поки пп < код.константи.розмір {
          дані[п] = код.константи.дані[пп];

          п += 1;
          пп += 1;
        }

        змінна адреса_розміру_вказівок = розмір_вказівок::адреса як памʼять<н8>;
        дані[п] = адреса_розміру_вказівок[0];
        п += 1;
        дані[п] = адреса_розміру_вказівок[1];
        п += 1;
        дані[п] = адреса_розміру_вказівок[2];
        п += 1;
        дані[п] = адреса_розміру_вказівок[3];
        п += 1;

        пп = 0;

        поки пп < код.вказівки.розмір {
          дані[п] = код.вказівки.дані[пп];

          п += 1;
          пп += 1;
        }

        вихід::вміст = ПереноснийОбразКоду {
          розмір,
          дані
        };
        вернути так;
      }

      структура ПотікВиводу;

      структура ПотікВиводу {
        дані: невідома_адреса;
        вивести: (потік_виводу: адреса<ПотікВиводу>, значення: т8) -> ніщо;
        вивести_ю8: (потік_виводу: адреса<ПотікВиводу>, значення: ю8) -> ніщо;
        вивести_ц64: (потік_виводу: адреса<ПотікВиводу>, значення: ц64) -> ніщо;
        вивести_н64: (потік_виводу: адреса<ПотікВиводу>, значення: н64) -> ніщо;
        вивести_р64: (потік_виводу: адреса<ПотікВиводу>, значення: р64) -> ніщо;
      }

      дія вивести_пропуски_в_потік_виводу(потік_виводу: адреса<ПотікВиводу>, кількість: н32) {
        змінна п: н32 = 0;

        поки п < кількість {
          потік_виводу.вивести(потік_виводу, " ");

          п += 1;
        }
      }

      дія вивести_константи_переносного_образу_коду(потік_виводу: адреса<ПотікВиводу>,
                                                    переносний_образ_коду: ПереноснийОбразКоду,
                                                    позиція_початку: н32,
                                                    глибина: н32) -> н32;

      дія вивести_вказівки_переносного_образу_коду(потік_виводу: адреса<ПотікВиводу>,
                                                          переносний_образ_коду: ПереноснийОбразКоду,
                                                          позиція_початку: н32,
                                                          глибина: н32) -> н32;

      дія вивести_константу_коду_переносного_образу_коду(потік_виводу: адреса<ПотікВиводу>,
                                                          переносний_образ_коду: ПереноснийОбразКоду,
                                                          позиція_початку: н32,
                                                          глибина: н32) -> н32 {
        змінна п = позиція_початку;

        п = вивести_константи_переносного_образу_коду(потік_виводу, переносний_образ_коду, п, глибина);
        п = вивести_вказівки_переносного_образу_коду(потік_виводу, переносний_образ_коду, п, глибина);

        вернути п;
      }

      дія вивести_константи_переносного_образу_коду(потік_виводу: адреса<ПотікВиводу>,
                                                    переносний_образ_коду: ПереноснийОбразКоду,
                                                    позиція_початку: н32,
                                                    глибина: н32) -> н32 {
        змінна п = позиція_початку;

        змінна адреса_розміру_констант = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
        змінна розмір_констант = адреса_розміру_констант::вміст;

        п += 4;

        вивести_пропуски_в_потік_виводу(потік_виводу, глибина);
        потік_виводу.вивести(потік_виводу, "Константи:\р");

        змінна кількість_констант: н32 = 0;
        змінна пк: н32 = 0;

        глибина += 1;

        поки пк < розмір_констант {
          вивести_пропуски_в_потік_виводу(потік_виводу, глибина);
          потік_виводу.вивести(потік_виводу, "[");
          потік_виводу.вивести_н64(потік_виводу, н64(п));
          потік_виводу.вивести(потік_виводу, "] ");
          потік_виводу.вивести_н64(потік_виводу, н64(кількість_констант));
          потік_виводу.вивести(потік_виводу, " ");

          якщо переносний_образ_коду.дані[п] == ВидКонстантиЧисло {
            потік_виводу.вивести(потік_виводу, "ЧИСЛО ");
            пк += 1;
            п += 1;
            змінна адреса_числа = переносний_образ_коду.дані[п]::адреса як адреса<р64>;
            потік_виводу.вивести_р64(потік_виводу, адреса_числа::вміст);
            потік_виводу.вивести(потік_виводу, "\р");
            п += 8;
            пк += 8;
            кількість_констант += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВидКонстантиТекст {
            потік_виводу.вивести(потік_виводу, "ТЕКСТ \"");
            п += 1;
            пк += 1;
            змінна адреса_розміру_тексту = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна розмір_тексту = адреса_розміру_тексту::вміст;
            п += 4;
            пк += 4;
            потік_виводу.вивести(потік_виводу, т8 { натуральне(розмір_тексту), переносний_образ_коду.дані[п]::адреса як памʼять<н8> });
            потік_виводу.вивести(потік_виводу, "\"\р");
            п += розмір_тексту;
            пк += розмір_тексту;
            кількість_констант += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВидКонстантиЮнікод {
            потік_виводу.вивести(потік_виводу, "ЮНІКОД ю\"");
            пк += 1;
            п += 1;
            змінна адреса_розміру_юнікоду = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна розмір_юнікоду = адреса_розміру_юнікоду::вміст;
            п += 4;
            пк += 4;
            потік_виводу.вивести_ю8(потік_виводу, ю8 { натуральне(розмір_юнікоду), переносний_образ_коду.дані[п]::адреса як памʼять<н8> });
            потік_виводу.вивести(потік_виводу, "\"\р");
            п += розмір_юнікоду;
            пк += розмір_юнікоду;
            кількість_констант += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВидКонстантиКод {
            потік_виводу.вивести(потік_виводу, "КОД {\р");
            пк += 1;
            п += 1;
            змінна п_перед = п;
            п = вивести_константу_коду_переносного_образу_коду(потік_виводу, переносний_образ_коду, п, глибина + 1);
            пк += п - п_перед;
            вивести_пропуски_в_потік_виводу(потік_виводу, глибина);
            потік_виводу.вивести(потік_виводу, "}\р");
            кількість_констант += 1;
          } інакше {
            потік_виводу.вивести_н64(потік_виводу, н64(пк));
            потік_виводу.вивести_н64(потік_виводу, н64(розмір_констант));
            потік_виводу.вивести(потік_виводу, "НЕВІДОМА КОНСТАНТА");
            вернути 0;
          }

          якщо пк == розмір_констант - 1 {
            пк += 1;
          }
        }

        вернути п;
      }

      дія вивести_вказівки_переносного_образу_коду(потік_виводу: адреса<ПотікВиводу>,
                                                   переносний_образ_коду: ПереноснийОбразКоду,
                                                   позиція_початку: н32,
                                                   глибина: н32) -> н32 {
        змінна п = позиція_початку;

        змінна адреса_розміру_вказівок = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
        змінна розмір_вказівок = адреса_розміру_вказівок::вміст;

        п += 4;

        вивести_пропуски_в_потік_виводу(потік_виводу, глибина);
        потік_виводу.вивести(потік_виводу, "Вказівки:\р");

        змінна кількість_вказівок: н32 = 0;
        змінна пк: н32 = 0;

        глибина += 1;

        поки пк < розмір_вказівок {
          вивести_пропуски_в_потік_виводу(потік_виводу, глибина);
          потік_виводу.вивести(потік_виводу, "[");
          потік_виводу.вивести_н64(потік_виводу, н64(п));
          потік_виводу.вивести(потік_виводу, "] ");
          потік_виводу.вивести_н64(потік_виводу, н64(кількість_вказівок));
          потік_виводу.вивести(потік_виводу, " ");

          якщо переносний_образ_коду.дані[п] == ВПокластиПусто {
            потік_виводу.вивести(потік_виводу, "ВПокластиПусто ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПокластиТак {
            потік_виводу.вивести(потік_виводу, "ВПокластиТак ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПокластиНі {
            потік_виводу.вивести(потік_виводу, "ВПокластиНі ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПокластиКонстанту {
            потік_виводу.вивести(потік_виводу, "ВПокластиКонстанту ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтворитиДію {
            потік_виводу.вивести(потік_виводу, "ВСтворитиДію ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтворитиСтруктуру {
            потік_виводу.вивести(потік_виводу, "ВСтворитиСтруктуру ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтворитиМодуль {
            потік_виводу.вивести(потік_виводу, "ВСтворитиМодуль ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтворитиСписок {
            потік_виводу.вивести(потік_виводу, "ВСтворитиСписок ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПокластиВСписок {
            потік_виводу.вивести(потік_виводу, "ВПокластиВСписок ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтворитиСловник {
            потік_виводу.вивести(потік_виводу, "ВСтворитиСловник ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПокластиВСловник {
            потік_виводу.вивести(потік_виводу, "ВПокластиВСловник ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПокластиСтруктуруПредмет {
            потік_виводу.вивести(потік_виводу, "ВПокластиСтруктуруПредмет ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПокластиЯ {
            потік_виводу.вивести(потік_виводу, "ВПокластиЯ ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗаписатиМетод {
            потік_виводу.вивести(потік_виводу, "ВЗаписатиМетод ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗаписатиСпецДію {
            потік_виводу.вивести(потік_виводу, "ВЗаписатиСпецДію ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтворитиДіапазон {
            потік_виводу.вивести(потік_виводу, "ВСтворитиДіапазон ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВВизначити {
            потік_виводу.вивести(потік_виводу, "ВВизначити ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗвернутись {
            потік_виводу.вивести(потік_виводу, "ВЗвернутись ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВВиконати {
            потік_виводу.вивести(потік_виводу, "ВВиконати ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента1 = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент1 = адреса_аргумента1::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент1));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента2 = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент2 = адреса_аргумента2::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент2));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВОтриматиВластивість {
            потік_виводу.вивести(потік_виводу, "ВОтриматиВластивість ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗмінитиВластивість {
            потік_виводу.вивести(потік_виводу, "ВЗмінитиВластивість ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВВиконатиВластивість {
            потік_виводу.вивести(потік_виводу, "ВВиконатиВластивість ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента1 = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент1 = адреса_аргумента1::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент1));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента2 = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент2 = адреса_аргумента2::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент2));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВОтриматиЕлемент {
            потік_виводу.вивести(потік_виводу, "ВОтриматиЕлемент ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗмінитиЕлемент {
            потік_виводу.вивести(потік_виводу, "ВЗмінитиЕлемент ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВОтриматиПеребір {
            потік_виводу.вивести(потік_виводу, "ВОтриматиПеребір ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВВизначитиЗзовні {
            потік_виводу.вивести(потік_виводу, "ВВизначитиЗзовні ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВВиконатиЗПредка {
            потік_виводу.вивести(потік_виводу, "ВВиконатиЗПредка ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента1 = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент1 = адреса_аргумента1::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент1));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента2 = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент2 = адреса_аргумента2::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент2));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВДодати {
            потік_виводу.вивести(потік_виводу, "ВДодати ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВВідняти {
            потік_виводу.вивести(потік_виводу, "ВВідняти ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПомножити {
            потік_виводу.вивести(потік_виводу, "ВПомножити ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПоділити {
            потік_виводу.вивести(потік_виводу, "ВПоділити ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВОтриматиОстачуДілення {
            потік_виводу.вивести(потік_виводу, "ВОтриматиОстачуДілення ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВОтриматиНеповнуЧасткуДілення {
            потік_виводу.вивести(потік_виводу, "ВОтриматиНеповнуЧасткуДілення ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПіднестиДоСтепеня {
            потік_виводу.вивести(потік_виводу, "ВПіднестиДоСтепеня ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗсунутиВліво {
            потік_виводу.вивести(потік_виводу, "ВЗсунутиВліво ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗсунутиВправо {
            потік_виводу.вивести(потік_виводу, "ВЗсунутиВправо ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗсунутиВправоЗіЗаповненням {
            потік_виводу.вивести(потік_виводу, "ВЗсунутиВправоЗіЗаповненням ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВДвійковеІ {
            потік_виводу.вивести(потік_виводу, "ВДвійковеІ ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВДвійковеАБО {
            потік_виводу.вивести(потік_виводу, "ВДвійковеАБО ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВДвійковеВиключнеАБО {
            потік_виводу.вивести(потік_виводу, "ВДвійковеВиключнеАБО ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВДвійковеНЕ {
            потік_виводу.вивести(потік_виводу, "ВДвійковеНЕ ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВМенше {
            потік_виводу.вивести(потік_виводу, "ВМенше ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВБільше {
            потік_виводу.вивести(потік_виводу, "ВБільше ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВНеБільше {
            потік_виводу.вивести(потік_виводу, "ВНеБільше ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВНеМенше {
            потік_виводу.вивести(потік_виводу, "ВНеМенше ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВРівно {
            потік_виводу.вивести(потік_виводу, "ВРівно ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВНеРівно {
            потік_виводу.вивести(потік_виводу, "ВНеРівно ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВМістить {
            потік_виводу.вивести(потік_виводу, "ВМістить ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВНеМістить {
            потік_виводу.вивести(потік_виводу, "ВНеМістить ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЄ {
            потік_виводу.вивести(потік_виводу, "ВЄ ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВНеЄ {
            потік_виводу.вивести(потік_виводу, "ВНеЄ ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВВідʼємне {
            потік_виводу.вивести(потік_виводу, "ВВідʼємне ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЧислове {
            потік_виводу.вивести(потік_виводу, "ВЧислове ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗаперечити {
            потік_виводу.вивести(потік_виводу, "ВЗаперечити ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗбільшити {
            потік_виводу.вивести(потік_виводу, "ВЗбільшити ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗбільшитиПопереднє {
            потік_виводу.вивести(потік_виводу, "ВЗбільшитиПопереднє ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗменшити {
            потік_виводу.вивести(потік_виводу, "ВЗменшити ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПочатиСпробу {
            потік_виводу.вивести(потік_виводу, "ВПочатиСпробу ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВВпасти {
            потік_виводу.вивести(потік_виводу, "ВВпасти ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗакінчитиСпробу {
            потік_виводу.вивести(потік_виводу, "ВЗакінчитиСпробу ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВВзяти {
            потік_виводу.вивести(потік_виводу, "ВВзяти ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВДати {
            потік_виводу.вивести(потік_виводу, "ВДати ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВПеребратиДалі {
            потік_виводу.вивести(потік_виводу, "ВПеребратиДалі ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗбитиТекст {
            потік_виводу.вивести(потік_виводу, "ВЗбитиТекст ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗбитиЮнікод {
            потік_виводу.вивести(потік_виводу, "ВЗбитиЮнікод ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтворитиПараметр {
            потік_виводу.вивести(потік_виводу, "ВСтворитиПараметр ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтворитиТип {
            потік_виводу.вивести(потік_виводу, "ВСтворитиТип ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтрибнути {
            потік_виводу.вивести(потік_виводу, "ВСтрибнути ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтрибнутиЯкщоНі {
            потік_виводу.вивести(потік_виводу, "ВСтрибнутиЯкщоНі ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВЗабрати {
            потік_виводу.вивести(потік_виводу, "ВЗабрати ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВВернути {
            потік_виводу.вивести(потік_виводу, "ВВернути ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтрибнутиЯкщоНіЗалишивши {
            потік_виводу.вивести(потік_виводу, "ВСтрибнутиЯкщоНіЗалишивши ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтрибнутиЯкщоТак {
            потік_виводу.вивести(потік_виводу, "ВСтрибнутиЯкщоТак ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВСтрибнутиЯкщоТакЗалишивши {
            потік_виводу.вивести(потік_виводу, "ВСтрибнутиЯкщоТакЗалишивши ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, " ");
            пк += 4;
            п += 4;
            змінна адреса_аргумента = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна аргумент = адреса_аргумента::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(аргумент));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВДублювати {
            потік_виводу.вивести(потік_виводу, "ВДублювати ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше якщо переносний_образ_коду.дані[п] == ВДублюватиПопереднє {
            потік_виводу.вивести(потік_виводу, "ВДублюватиПопереднє ");
            пк += 1;
            п += 1;
            змінна адреса_рядка = переносний_образ_коду.дані[п]::адреса як адреса<н32>;
            змінна рядок = адреса_рядка::вміст;
            потік_виводу.вивести_н64(потік_виводу, н64(рядок));
            потік_виводу.вивести(потік_виводу, "\р");
            пк += 4;
            п += 4;
            кількість_вказівок += 1;
          } інакше {
            потік_виводу.вивести_н64(потік_виводу, н64(пк));
            потік_виводу.вивести_н64(потік_виводу, н64(розмір_вказівок));
            потік_виводу.вивести(потік_виводу, "НЕВІДОМА ВКАЗІВКА");
            вернути 0;
          }

          якщо пк == розмір_вказівок - 1 {
            пк += 1;
          }
        }

        вернути п;
      }

      дія вивести_переносний_образ_коду(потік_виводу: адреса<ПотікВиводу>, переносний_образ_коду: ПереноснийОбразКоду) {
        змінна п: н32 = 0;
        п += 4; // маг
        п += 4; // версія

        п = вивести_константу_коду_переносного_образу_коду(потік_виводу, переносний_образ_коду, п, 0);
      }
    }
  }
}