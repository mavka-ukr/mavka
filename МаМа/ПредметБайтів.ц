взяти визначення МаМа;

секція МаМа {
  дія нативна_дія_байтів_чародія_отримати_елемент(предмет_нативної_дії: адреса<ПредметНативноїДії>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    якщо предмет_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_отримати_елемент\" не можна виконувати від від пусто") як адреса<Предмет>;
    }
    якщо предмет_я.тип != М.предмет_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_отримати_елемент\" можна виконувати лише від байтів") як адреса<Предмет>;
    }
    ціль предмет_байтів = предмет_я як адреса<ПредметБайтів>;
    змінна ціль знайдено_предмет_аргумента_ключа = ні;
    змінна ціль предмет_аргумента_ключа: адреса<Предмет> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_предмет_аргумента_ключа = так;
        предмет_аргумента_ключа = елемент_ключа.значення;
      }
    }
    якщо знайдено_предмет_аргумента_ключа == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_предмет_аргумента_ключа = так;
          предмет_аргумента_ключа = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_предмет_аргумента_ключа == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Предмет>;
    }
    вернути предмет_байтів_отримати_елемент(предмет_байтів, М, предмет_аргумента_ключа);
  }

  дія нативна_дія_байтів_чародія_змінити_елемент(предмет_нативної_дії: адреса<ПредметНативноїДії>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    якщо предмет_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_змінити_елемент\" не можна виконувати від від пусто") як адреса<Предмет>;
    }
    якщо предмет_я.тип != М.предмет_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_змінити_елемент\" можна виконувати лише від байтів") як адреса<Предмет>;
    }
    ціль предмет_байтів = предмет_я як адреса<ПредметБайтів>;
    змінна ціль знайдено_предмет_аргумента_ключа = ні;
    змінна ціль предмет_аргумента_ключа: адреса<Предмет> = пусто;
    змінна ціль знайдено_предмет_аргумента_значення = ні;
    змінна ціль предмет_аргумента_значення: адреса<Предмет> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_предмет_аргумента_ключа = так;
        предмет_аргумента_ключа = елемент_ключа.значення;
      }
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_предмет_аргумента_значення = так;
        предмет_аргумента_значення = елемент_значення.значення;
      }
    }
    якщо знайдено_предмет_аргумента_ключа == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_предмет_аргумента_ключа = так;
          предмет_аргумента_ключа = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_предмет_аргумента_значення == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 1 {
          знайдено_предмет_аргумента_значення = так;
          предмет_аргумента_значення = аргументи.дані[1];
        }
      }
    }
    якщо знайдено_предмет_аргумента_ключа == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Предмет>;
    }
    якщо знайдено_предмет_аргумента_значення == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Предмет>;
    }
    вернути предмет_байтів_змінити_елемент(предмет_байтів, М, предмет_аргумента_ключа, предмет_аргумента_значення);
  }

  дія нативна_дія_байтів_чародія_видалити_елемент(предмет_нативної_дії: адреса<ПредметНативноїДії>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    якщо предмет_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_видалити_елемент\" не можна виконувати від від пусто") як адреса<Предмет>;
    }
    якщо предмет_я.тип != М.предмет_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_видалити_елемент\" можна виконувати лише від байтів") як адреса<Предмет>;
    }
    ціль предмет_байтів = предмет_я як адреса<ПредметБайтів>;
    змінна ціль знайдено_предмет_аргумента_ключа = ні;
    змінна ціль предмет_аргумента_ключа: адреса<Предмет> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_предмет_аргумента_ключа = так;
        предмет_аргумента_ключа = елемент_ключа.значення;
      }
    }
    якщо знайдено_предмет_аргумента_ключа == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_предмет_аргумента_ключа = так;
          предмет_аргумента_ключа = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_предмет_аргумента_ключа == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Предмет>;
    }
    вернути предмет_байтів_видалити_елемент(предмет_байтів, М, предмет_аргумента_ключа);
  }

  дія нативна_дія_байтів_чародія_перебір(предмет_нативної_дії: адреса<ПредметНативноїДії>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    ціль предмет_байтів = предмет_я як адреса<ПредметБайтів>;
    вернути предмет_байтів_отримати_перебір(предмет_байтів, М);
  }

  дія нативна_дія_байтів_додати(предмет_нативної_дії: адреса<ПредметНативноїДії>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    якщо предмет_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Предмет пусто не може виконати дію байтів \"додати\"") як адреса<Предмет>;
    }
    якщо предмет_я.тип != М.предмет_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Предмет не є байтами") як адреса<Предмет>;
    }
    ціль предмет_байтів = предмет_я як адреса<ПредметБайтів>;
    якщо іменовані_аргументи != пусто {
      ціль елемент_аргумента_значення = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, іменовані_аргументи, М.БН.С.значення);
      якщо елемент_аргумента_значення != пусто {
      // потім: втілити
//        покласти_в_накопичувач<п8>(предмет_байтів.дані::адреса, елемент_аргумента_значення.значення);
        вернути пусто;
      }
    }
    якщо аргументи != пусто {
      якщо аргументи.розмір > 0 {
        ціль аргумент = аргументи.дані[0];
        // потім: втілити
//        покласти_в_накопичувач<п8>(предмет_байтів.дані::адреса, аргумент);
        вернути пусто;
      }
    }
    вернути пусто;
  }

  дія нативна_дія_байтів_забрати(предмет_нативної_дії: адреса<ПредметНативноїДії>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    якщо предмет_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Предмет пусто не може виконати дію байтів \"забрати\"") як адреса<Предмет>;
    }
    якщо предмет_я.тип != М.предмет_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Предмет не є байтами") як адреса<Предмет>;
    }
    ціль предмет_байтів = предмет_я як адреса<ПредметБайтів>;
    якщо предмет_байтів.дані.розмір != 0 {
      ціль останній_елемент = предмет_байтів.дані.дані[предмет_байтів.дані.розмір - 1];
      предмет_байтів.дані.розмір = предмет_байтів.дані.розмір - 1;
      вернути виділити_предмет_числа(М, д64(останній_елемент)) як адреса<Предмет>;
    }
    вернути пусто;
  }

  дія нативна_дія_байтів_чародія_юнікод(предмет_нативної_дії: адреса<ПредметНативноїДії>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    якщо предмет_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Предмет пусто не може виконати дію байтів \"чародія_юнікод\"") як адреса<Предмет>;
    }
    якщо предмет_я.тип != М.предмет_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Предмет не є байтами") як адреса<Предмет>;
    }
    ціль предмет_байтів = предмет_я як адреса<ПредметБайтів>;
    вернути виділити_предмет_юнікоду_з_байтів(М, предмет_байтів.дані.розмір, предмет_байтів.дані.дані) як адреса<Предмет>;
  }

  місцева дія створити_структуру_байтів(М: адреса<Машина>): адреса<ПредметСтруктури> {
    ціль предмет_структури = виділити_предмет_структури(М, М.БН.С.байти, М.предмет_структури_предмет);

    ціль предмет_нативної_дії_байтів_чародія_отримати_елемент = виділити_предмет_нативної_дії(М, М.БН.С.чародія_отримати_елемент, нативна_дія_байтів_чародія_отримати_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Предмет>>(М, предмет_структури.методи::адреса, М.БН.С.чародія_отримати_елемент, предмет_нативної_дії_байтів_чародія_отримати_елемент як адреса<Предмет>);
    ціль предмет_нативної_дії_байтів_чародія_змінити_елемент = виділити_предмет_нативної_дії(М, М.БН.С.чародія_змінити_елемент, нативна_дія_байтів_чародія_змінити_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Предмет>>(М, предмет_структури.методи::адреса, М.БН.С.чародія_змінити_елемент, предмет_нативної_дії_байтів_чародія_змінити_елемент як адреса<Предмет>);
    ціль предмет_нативної_дії_байтів_чародія_видалити_елемент = виділити_предмет_нативної_дії(М, М.БН.С.чародія_видалити_елемент, нативна_дія_байтів_чародія_видалити_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Предмет>>(М, предмет_структури.методи::адреса, М.БН.С.чародія_видалити_елемент, предмет_нативної_дії_байтів_чародія_видалити_елемент як адреса<Предмет>);
    ціль предмет_нативної_дії_байтів_чародія_перебір = виділити_предмет_нативної_дії(М, М.БН.С.чародія_перебір, нативна_дія_байтів_чародія_перебір, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Предмет>>(М, предмет_структури.методи::адреса, М.БН.С.чародія_перебір, предмет_нативної_дії_байтів_чародія_перебір як адреса<Предмет>);
    ціль предмет_нативної_дії_байтів_чародія_юнікод = виділити_предмет_нативної_дії(М, М.БН.С.чародія_юнікод, нативна_дія_байтів_чародія_юнікод, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Предмет>>(М, предмет_структури.методи::адреса, М.БН.С.чародія_юнікод, предмет_нативної_дії_байтів_чародія_юнікод як адреса<Предмет>);

    ціль предмет_нативної_дії_байтів_додати = виділити_предмет_нативної_дії(М, М.БН.С.додати, нативна_дія_байтів_додати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Предмет>>(М, предмет_структури.методи::адреса, М.БН.С.додати, предмет_нативної_дії_байтів_додати як адреса<Предмет>);
    ціль предмет_нативної_дії_байтів_забрати = виділити_предмет_нативної_дії(М, М.БН.С.забрати, нативна_дія_байтів_забрати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Предмет>>(М, предмет_структури.методи::адреса, М.БН.С.забрати, предмет_нативної_дії_байтів_забрати як адреса<Предмет>);

    вернути предмет_структури;
  }

  місцева дія виділити_предмет_байтів(М: адреса<Машина>, розмір: позитивне): адреса<ПредметБайтів> {
    ціль предмет_байтів = виділити_предмет<ПредметБайтів>(М, М.предмет_структури_байти);

    предмет_байтів.властивості = зробити_реєстр<адреса<Назва>, адреса<Предмет>>(М, перевірити_чи_назви_рівні);
    предмет_байтів.дані = зробити_накопичувач<п8>(М);
    розширити_накопичувач<п8>(М, предмет_байтів.дані::адреса, розмір, 0);

    вернути предмет_байтів;
  }

  місцева дія виділити_предмет_байтів_вручну(М: адреса<Машина>, розмір: позитивне, значення: памʼять<п8>): адреса<ПредметБайтів> {
    ціль предмет_байтів = виділити_предмет<ПредметБайтів>(М, М.предмет_структури_байти);

    предмет_байтів.властивості = зробити_реєстр<адреса<Назва>, адреса<Предмет>>(М, перевірити_чи_назви_рівні);
    предмет_байтів.дані = зробити_накопичувач<п8>(М);
    предмет_байтів.дані.розмір = розмір;
    предмет_байтів.дані.дані = значення;

    вернути предмет_байтів;
  }

  місцева дія звільнити_предмет_байтів(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Предмет>>(М, предмет_байтів.властивості);
    звільнити_значення_накопичувача<п8>(М, предмет_байтів.дані);
    звільнити(М, предмет_байтів);
  }

  місцева дія предмет_байтів_виконати(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати байти") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_отримати_властивість(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, назва: адреса<Назва>): предмет_або_стан_падіння {
    якщо назва == М.БН.С.довжина {
      вернути виділити_предмет_числа(М, д64(предмет_байтів.дані.розмір)) як адреса<Предмет>;
    }
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, предмет_байтів.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = предмет_байтів.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія предмет_байтів_змінити_властивість(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    якщо назва == М.БН.С.довжина {
      вернути пусто;
    }
    якщо перевірити_чи_назва_чародія(М, назва) {
      вернути пусто;
    }
    змінити_в_реєстрі<адреса<Назва>, адреса<Предмет>>(М, предмет_байтів.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія предмет_байтів_видалити_властивість(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, назва: адреса<Назва>): предмет_або_стан_падіння {
    якщо видалити_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, предмет_байтів.властивості::адреса, назва) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_байтів_виконати_властивість(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    ціль предмет_властивості = предмет_байтів_отримати_властивість(предмет_байтів, М, назва_властивості);
    якщо М.стан_падіння == позитивне(так) {
      вернути предмет_властивості;
    }
    вернути предмет_виконати(предмет_властивості, М, предмет_байтів як адреса<Предмет>, аргументи, іменовані_аргументи);
  }

  місцева дія предмет_байтів_отримати_елемент(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, ключ: адреса<Предмет>): предмет_або_стан_падіння {
    якщо ключ == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Ключ отримання елемента зі байтів має бути числом") як адреса<Предмет>;
    }
    якщо ключ.тип != М.предмет_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Ключ отримання елемента зі байтів має бути числом") як адреса<Предмет>;
    }
    ціль предмет_числа = ключ як адреса<ПредметЧисла>;
    ціль позиція = позитивне(предмет_числа.значення);
    якщо предмет_байтів.дані.розмір > позиція {
      вернути виділити_предмет_числа(М, д64(предмет_байтів.дані.дані[позиція])) як адреса<Предмет>;
    }
    вернути пусто;
  }

  місцева дія предмет_байтів_змінити_елемент(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, ключ: адреса<Предмет>, значення: адреса<Предмет>): предмет_або_стан_падіння {
    якщо перевірити_чи_предмет_є_числом(ключ, М) == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Ключ для зміни елемента байтів має бути числом") як адреса<Предмет>;
    }
    якщо перевірити_чи_предмет_є_числом(значення, М) == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Значення елемента байтів має бути числом") як адреса<Предмет>;
    }
    ціль предмет_числа_ключа = ключ як адреса<ПредметЧисла>;
    ціль предмет_числа_значення = значення як адреса<ПредметЧисла>;
    ціль позиція = позитивне(предмет_числа_ключа.значення);
    ціль значення_значення = п8(предмет_числа_значення.значення);
    якщо предмет_байтів.дані.розмір > позиція {
      предмет_байтів.дані.дані[позиція] = значення_значення;
    } інакше {
      розширити_накопичувач<п8>(М, предмет_байтів.дані::адреса, позиція + 1, 0);
      предмет_байтів.дані.дані[позиція] = значення_значення;
    }
    вернути пусто;
  }

  місцева дія предмет_байтів_видалити_елемент(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, ключ: адреса<Предмет>): предмет_або_стан_падіння {
    якщо ключ == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Ключ видалення елемента зі байтів має бути числом") як адреса<Предмет>;
    }
    якщо ключ.тип != М.предмет_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_предмет_тексту_з_ю8(М, ю8"Ключ видалення елемента зі байтів має бути числом") як адреса<Предмет>;
    }
    ціль предмет_числа = ключ як адреса<ПредметЧисла>;
    ціль позиція = позитивне(предмет_числа.значення);
    якщо видалити_з_накопичувача<п8>(М, предмет_байтів.дані::адреса, позиція) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  дія нативна_дія_перебору_байтів_далі(предмет_нативної_дії: адреса<ПредметНативноїДії>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    ціль предмет_байтів = предмет_отримати_властивість(предмет_я, М, М.БН.С.сп);
    притримати_предмет(М, предмет_байтів);
    якщо М.стан_падіння == позитивне(так) {
      відпустити_предмет(М);
      вернути предмет_байтів;
    }
    ціль довжина_байтів = предмет_отримати_властивість(предмет_байтів, М, М.БН.С.довжина);
    притримати_предмет(М, довжина_байтів);
    якщо М.стан_падіння == позитивне(так) {
      відпустити_предмет(М);
      відпустити_предмет(М);
      вернути довжина_байтів;
    }
    змінна ціль предмет_позиції = предмет_отримати_властивість(предмет_я, М, М.БН.С.позиція);
    притримати_предмет(М, предмет_позиції);
    якщо М.стан_падіння == позитивне(так) {
      відпустити_предмет(М);
      відпустити_предмет(М);
      відпустити_предмет(М);
      вернути предмет_позиції;
    }
    ціль чи_позиція_менше = предмет_менше(предмет_позиції, М, довжина_байтів);
    притримати_предмет(М, чи_позиція_менше);
    якщо М.стан_падіння == позитивне(так) {
      відпустити_предмет(М);
      відпустити_предмет(М);
      відпустити_предмет(М);
      відпустити_предмет(М);
      вернути чи_позиція_менше;
    }
    якщо чи_позиція_менше == М.предмет_логічного_так як адреса<Предмет> {
      якщо М.стан_падіння == позитивне(так) {
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        вернути предмет_позиції;
      }
      ціль елемент_байтів = предмет_отримати_елемент(предмет_байтів, М, предмет_позиції);
      притримати_предмет(М, чи_позиція_менше);
      якщо М.стан_падіння == позитивне(так) {
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        вернути елемент_байтів;
      }
      предмет_позиції = предмет_додати(предмет_позиції, М, виділити_предмет_числа(М, 1) як адреса<Предмет>);
      притримати_предмет(М, предмет_позиції);
      ціль результат_зміни_властивості_позиції = предмет_змінити_властивість(предмет_я, М, М.БН.С.позиція, предмет_позиції);
      якщо М.стан_падіння == позитивне(так) {
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        вернути результат_зміни_властивості_позиції;
      }
      ціль результат_зміни_властивості_значення = предмет_змінити_властивість(предмет_я, М, М.БН.С.значення, елемент_байтів);
      якщо М.стан_падіння == позитивне(так) {
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        відпустити_предмет(М);
        вернути результат_зміни_властивості_значення;
      }
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    відпустити_предмет(М);
    відпустити_предмет(М);
    відпустити_предмет(М);
    відпустити_предмет(М);
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_байтів_отримати_перебір(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>): предмет_або_стан_падіння {
    ціль предмет_перебору = виділити_складений_предмет(М, М.предмет_структури_предмет);
    ціль результат_зміни_властивості = складений_предмет_змінити_властивість(предмет_перебору, М, М.БН.С.сп, предмет_байтів як адреса<Предмет>);
    якщо М.стан_падіння == позитивне(так) {
      вернути результат_зміни_властивості;
    }
    ціль предмет_позиції = виділити_предмет_числа(М, 0);
    ціль результат_зміни_властивості_позиції = складений_предмет_змінити_властивість(предмет_перебору, М, М.БН.С.позиція, предмет_позиції як адреса<Предмет>);
    якщо М.стан_падіння == позитивне(так) {
      вернути результат_зміни_властивості_позиції;
    }
    ціль предмет_нативної_дії_байтів_перебору_далі = виділити_предмет_нативної_дії(М, М.БН.С.далі, нативна_дія_перебору_байтів_далі, пусто, пусто);
    ціль результат_зміни_властивості_перебору_далі = складений_предмет_змінити_властивість(предмет_перебору, М, М.БН.С.далі, предмет_нативної_дії_байтів_перебору_далі як адреса<Предмет>);
    якщо М.стан_падіння == позитивне(так) {
      вернути результат_зміни_властивості_перебору_далі;
    }
    вернути предмет_перебору як адреса<Предмет>;
  }

  місцева дія предмет_байтів_додати(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати додавання для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_відняти(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_помножити(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати множення для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_поділити(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати ділення для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_отримати_остачу_ділення(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_отримати_частку_ділення(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати отримання частки ділення для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_піднести_до_степеня(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_зсунути_вліво(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_зсунути_вправо(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_зсунути_вправо_зі_заповненням(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_двійкове_і(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_двійкове_або(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_двійкове_виключне_або(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати двійкове виключне АБО для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_двійкове_не(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_більше(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_менше(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_рівно(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    якщо перевірити_чи_предмет_байтів_рівно(предмет_байтів, М, аргумент) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_байтів_містить(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на місткість для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_є(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    якщо аргумент.тип != М.предмет_структури_Структура {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    якщо перевірити_чи_предмет_байтів_є(предмет_байтів, М, аргумент як адреса<ПредметСтруктури>) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_байтів_відʼємне(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_числове(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати числове для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_заперечити(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>): предмет_або_стан_падіння {
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_байтів_збільшити(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати збільшення для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_зменшити(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати зменшення для байтів") як адреса<Предмет>;
  }

  місцева дія предмет_байтів_створити_з_предмета_юнікоду(предмет_юнікоду: адреса<ПредметЮнікоду>, М: адреса<Машина>): предмет_або_стан_падіння {
    ціль значення_Ю8: памʼять<п8> = пусто;
    ціль розмір_значення_Ю8 = перекодувати_Ю32_в_Ю8(М, предмет_юнікоду.значення, предмет_юнікоду.довжина, значення_Ю8::адреса);
    вернути виділити_предмет_байтів_вручну(М, розмір_значення_Ю8, значення_Ю8) як адреса<Предмет>;
  }

  місцева дія перевірити_чи_предмет_байтів_рівно(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, аргумент: адреса<Предмет>): логічне {
    ціль предмет = предмет_байтів як адреса<Предмет>;
    якщо предмет == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_предмет_байтів_є(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>): логічне {
    якщо предмет_структури == М.предмет_структури_байти {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_предмет_байтів_в_накопичувач_ю8(предмет_байтів: адреса<ПредметБайтів>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_ю8_в_накопичувач_ю8(М, накопичувач_ю8, ю8"<байти ");
    надрукувати_предмет_в_накопичувач_ю8(виділити_предмет_числа(М, д64(предмет_байтів.дані.розмір)) як адреса<Предмет>, М, накопичувач_ю8, глибина + 1);
    покласти_ю8_в_накопичувач_ю8(М, накопичувач_ю8, ю8">");
  }
}