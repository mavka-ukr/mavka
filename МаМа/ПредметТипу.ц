взяти визначення МаМа;

секція МаМа {
  дія предмет_типу_виконати_метод_чародія_текст(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_тексту(М, "<тип>") як адреса<Предмет>;
  }

  дія предмет_типу_виконати_метод_чародія_юнікод(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_юнікоду_з_ю8(М, ю8"<тип>") як адреса<Предмет>;
  }
}

секція МаМа {
  дія записати_параметр_структури_Тип_може_бути_пусто(М: адреса<Машина>) {
    ціль допустимі_структури_типу_параметра_може_бути_пусто = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_може_бути_пусто[0] = М.предмет_структури_логічне;
    ціль тип_параметра_може_бути_пусто = створити_предмет_типу(М, так, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_може_бути_пусто });
    ціль параметр_може_бути_пусто = створити_предмет_параметра(М, назва(М, "може_бути_пусто"), тип_параметра_може_бути_пусто, пусто);
    М.предмет_структури_Тип.параметри.дані[0] = параметр_може_бути_пусто;
  }

  дія записати_параметр_структури_Тип_допустимі_структури(М: адреса<Машина>) {
    ціль допустимі_структури_типу_параметра_допустимі_структури = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_допустимі_структури[0] = М.предмет_структури_список;
    ціль тип_параметра_допустимі_структури = створити_предмет_типу(М, так, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_допустимі_структури });
    ціль параметр_допустимі_структури = створити_предмет_параметра(М, назва(М, "допустимі_структури"), тип_параметра_допустимі_структури, пусто);
    М.предмет_структури_Тип.параметри.дані[1] = параметр_допустимі_структури;
  }

  дія рідна_дія_метода_чародія_текст(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_Тип {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_текст\" не для типу") як адреса<Предмет>);
    }
    ціль предмет_типу = предмет_я як адреса<ПредметТипу>;
    вернути предмет_типу_виконати_метод_чародія_текст(М, предмет_типу, місцезнаходження);
  }

  дія записати_метод_структури_Тип_чародія_текст(М: адреса<Машина>) {
    ціль предмет_дії_метода_чародія_текст = створити_предмет_рідної_дії(М, назва(М, "чародія_текст"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_текст, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_Тип, назва(М, "чародія_текст"), предмет_дії_метода_чародія_текст);
  }

  дія рідна_дія_метода_чародія_юнікод(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_Тип {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_юнікод\" не для типу") як адреса<Предмет>);
    }
    ціль предмет_типу = предмет_я як адреса<ПредметТипу>;
    вернути предмет_типу_виконати_метод_чародія_юнікод(М, предмет_типу, місцезнаходження);
  }

  дія записати_метод_структури_Тип_чародія_юнікод(М: адреса<Машина>) {
    ціль предмет_дії_метода_чародія_юнікод = створити_предмет_рідної_дії(М, назва(М, "чародія_юнікод"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_юнікод, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_Тип, назва(М, "чародія_юнікод"), предмет_дії_метода_чародія_юнікод);
  }

  зовнішня дія заповнити_предмет_структури_Тип(М: адреса<Машина>) {
    // параметри
    записати_параметр_структури_Тип_може_бути_пусто(М);
    записати_параметр_структури_Тип_допустимі_структури(М);

    // методи
    записати_метод_структури_Тип_чародія_текст(М);
    записати_метод_структури_Тип_чародія_юнікод(М);
  }

  зовнішня дія створити_предмет_типу(М: адреса<Машина>, може_бути_пусто: логічне, допустимі_структури: Послідовність<адреса<ПредметСтруктури>>): адреса<ПредметТипу> {
    ціль предмет_типу = створити_предмет<ПредметТипу>(М, М.предмет_структури_Тип);
    предмет_типу.може_бути_пусто = позитивне(може_бути_пусто);
    предмет_типу.допустимі_структури = допустимі_структури;
    вернути предмет_типу;
  }

  зовнішня дія предмет_типу_виконати(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_виконати"), кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
  }

  зовнішня дія предмет_типу_отримати_властивість(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо перевірити_чи_предмети_назви_рівні(М, назва, МаМа::назва(М, "може_бути_пусто")) {
      якщо предмет_типу.може_бути_пусто == позитивне(так) {
        вернути М.предмет_логічного_так як адреса<Предмет>;
      }
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, МаМа::назва(М, "допустимі_структури")) {
      вернути створити_предмет_списку_1(М, (предмет_типу.допустимі_структури::адреса як адреса<Послідовність<адреса<Предмет>>>)::вміст) як адреса<Предмет>;
    }
    змінна ціль метод: адреса<ПредметДії> = пусто;
    якщо знайти_метод_в_структурі(М, предмет_типу.тип, назва, метод::адреса) {
      вернути метод як адреса<Предмет>;
    }
    вернути пусто;
  }

  зовнішня дія предмет_типу_змінити_властивість(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, назва: адреса<ПредметТексту>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути пусто;
  }

  зовнішня дія предмет_типу_видалити_властивість(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  зовнішня дія предмет_типу_виконати_властивість(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, назва: адреса<ПредметТексту>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль предмет_властивості = предмет_типу_отримати_властивість(М, предмет_типу, назва, місцезнаходження);
    якщо М.стан_падіння == позитивне(так) {
      вернути предмет_властивості;
    }
    якщо предмет_властивості == пусто {
      змінна ціль накопичувач_т8_помилки = зробити_накопичувач<п8>(М);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "Неможливо виконати пусту властивість предмета типу \"");
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, назва.значення);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "\"");
      ціль предмет_помилки = створити_предмет_тексту(М, т8 { накопичувач_т8_помилки.розмір, накопичувач_т8_помилки.дані });
      звільнити_памʼять(М, накопичувач_т8_помилки.дані);
      вернути результат_стан_падіння(М, місцезнаходження, предмет_помилки як адреса<Предмет>);
    }
    вернути предмет_виконати(М, предмет_властивості, предмет_типу як адреса<Предмет>, кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
  }

  зовнішня дія предмет_типу_додати(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_додати"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_відняти(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_відняти"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_помножити(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_помножити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_поділити(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_поділити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_остача(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_остача"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_неповна_частка(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_неповна_частка"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_степінь(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_степінь"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_зсунути_вліво(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_вліво"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_зсунути_вправо(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_вправо"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_беззнаковий_зсув_вправо(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_беззнаковий_зсув_вправо"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_двійкове_і(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_двійкове_і"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_двійкове_або(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_двійкове_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_двійкове_виключне_або(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_двійкове_виключне_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_двійкове_заперечення(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_двійкове_заперечення"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_менше(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_менше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_більше(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_більше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_містить(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_містить"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_числова_негація(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_числова_негація"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_отримати_число(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_число"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_збільшити(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_збільшити"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_зменшити(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_зменшити"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_текст(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_метод_чародія_текст(М, предмет_типу, місцезнаходження);
  }

  зовнішня дія предмет_типу_юнікод(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_метод_чародія_юнікод(М, предмет_типу, місцезнаходження);
  }

  зовнішня дія предмет_типу_отримати_елемент(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_отримати_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_змінити_елемент(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, ключ: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_змінити_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_видалити_елемент(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_видалити_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_отримати_перебір(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_перебір"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_типу_отримати_діапазон(М: адреса<Машина>, предмет_типу: адреса<ПредметТипу>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
    якщо включно {
      аргументи[0] = М.предмет_логічного_так як адреса<Предмет>;
    } інакше {
      аргументи[0] = М.предмет_логічного_ні як адреса<Предмет>;
    }
    аргументи[1] = до;
    ціль результат = предмет_типу_виконати_властивість(М, предмет_типу, назва(М, "чародія_діапазон"), 2, аргументи, 0, пусто, місцезнаходження);
    звільнити_памʼять(М, аргументи);
    вернути результат;
  }
}