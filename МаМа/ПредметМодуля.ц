взяти визначення МаМа;

секція МаМа {
  дія предмет_модуля_виконати_метод_чародія_текст(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна накопичувач_т8 = зробити_накопичувач<п8>(М);
    покласти_в_накопичувач_т8(М, накопичувач_т8::адреса, "<модуль");
    якщо предмет_модуля.назва != пусто {
      покласти_в_накопичувач_т8(М, накопичувач_т8::адреса, " ");
      покласти_в_накопичувач_т8(М, накопичувач_т8::адреса, предмет_модуля.назва.значення);
    }
    покласти_в_накопичувач_т8(М, накопичувач_т8::адреса, ">");
    ціль предмет_тексту = створити_предмет_тексту(М, т8 { накопичувач_т8.розмір, накопичувач_т8.дані });
    звільнити_памʼять(М, накопичувач_т8.дані);
    вернути предмет_тексту як адреса<Предмет>;
  }

  дія предмет_модуля_виконати_метод_чародія_юнікод(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна накопичувач_ю8 = зробити_накопичувач<п8>(М);
    покласти_в_накопичувач_ю8(М, накопичувач_ю8::адреса, ю8"<модуль");
    якщо предмет_модуля.назва != пусто {
      покласти_в_накопичувач_ю8(М, накопичувач_ю8::адреса, ю8" ");
      покласти_т8_в_накопичувач_ю8(М, накопичувач_ю8::адреса, предмет_модуля.назва.значення);
    }
    покласти_в_накопичувач_ю8(М, накопичувач_ю8::адреса, ю8">");
    ціль предмет_юнікоду = створити_предмет_юнікоду_з_ю8(М, ю8 { накопичувач_ю8.розмір, накопичувач_ю8.дані });
    звільнити_памʼять(М, накопичувач_ю8.дані);
    вернути предмет_юнікоду як адреса<Предмет>;
  }
}

секція МаМа {
  дія рідна_дія_метода_чародія_текст(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_Модуль {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_текст\" не для модуля") як адреса<Предмет>);
    }
    ціль предмет_модуля = предмет_я як адреса<ПредметМодуля>;
    вернути предмет_модуля_виконати_метод_чародія_текст(М, предмет_модуля, місцезнаходження);
  }

  дія записати_метод_структури_Модуль_чародія_текст(М: адреса<Машина>) {
    ціль предмет_дії_метода_чародія_текст = створити_предмет_рідної_дії(М, назва(М, "чародія_текст"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_текст, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_Модуль, назва(М, "чародія_текст"), предмет_дії_метода_чародія_текст);
  }

  дія рідна_дія_метода_чародія_юнікод(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_Модуль {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_юнікод\" не для модуля") як адреса<Предмет>);
    }
    ціль предмет_модуля = предмет_я як адреса<ПредметМодуля>;
    вернути предмет_модуля_виконати_метод_чародія_юнікод(М, предмет_модуля, місцезнаходження);
  }

  дія записати_метод_структури_Модуль_чародія_юнікод(М: адреса<Машина>) {
    ціль предмет_дії_метода_чародія_юнікод = створити_предмет_рідної_дії(М, назва(М, "чародія_юнікод"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_юнікод, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_Модуль, назва(М, "чародія_юнікод"), предмет_дії_метода_чародія_юнікод);
  }

  зовнішня дія заповнити_предмет_структури_Модуль(М: адреса<Машина>) {
    // методи
    записати_метод_структури_Модуль_чародія_текст(М);
    записати_метод_структури_Модуль_чародія_юнікод(М);
  }

  зовнішня дія створити_предмет_модуля(М: адреса<Машина>, назва: адреса<ПредметТексту>): адреса<ПредметМодуля> {
    ціль предмет_модуля = створити_предмет<ПредметМодуля>(М, М.предмет_структури_Модуль);
    предмет_модуля.назва = назва;
    предмет_модуля.властивості = зробити_реєстр_з_даними<адреса<ПредметТексту>, адреса<Предмет>, Машина>(М, М, перевірити_чи_предмети_назви_рівні);
    предмет_модуля.назва_паку = пусто;
    вернути предмет_модуля;
  }

  зовнішня дія предмет_модуля_виконати(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_виконати"), кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
  }

  зовнішня дія предмет_модуля_отримати_властивість(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль елемент = ЕлементРеєстру<адреса<ПредметТексту>, адреса<Предмет>> { пусто, пусто };
    якщо знайти_в_реєстрі<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_модуля.властивості::адреса, назва, елемент::адреса) {
      вернути елемент.значення;
    }
    змінна метод: адреса<ПредметДії> = пусто;
    якщо знайти_метод_в_структурі(М, предмет_модуля.тип, назва, метод::адреса) {
      вернути метод як адреса<Предмет>;
    }
    вернути пусто;
  }

  зовнішня дія предмет_модуля_змінити_властивість(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, назва: адреса<ПредметТексту>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінити_в_реєстрі<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_модуля.властивості::адреса, назва, значення);
    вернути пусто;
  }

  зовнішня дія предмет_модуля_видалити_властивість(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо видалити_з_реєстру<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_модуля.властивості::адреса, назва) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    } інакше {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
  }

  зовнішня дія предмет_модуля_виконати_властивість(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, назва: адреса<ПредметТексту>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль предмет_властивості = предмет_модуля_отримати_властивість(М, предмет_модуля, назва, місцезнаходження);
    якщо М.стан_падіння == позитивне(так) {
      вернути предмет_властивості;
    }
    якщо предмет_властивості == пусто {
      змінна накопичувач_т8_помилки = зробити_накопичувач<п8>(М);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "Неможливо виконати пусту властивість предмета модуля \"");
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, назва.значення);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "\"");
      ціль предмет_помилки = створити_предмет_тексту(М, т8 { накопичувач_т8_помилки.розмір, накопичувач_т8_помилки.дані });
      звільнити_памʼять(М, накопичувач_т8_помилки.дані);
      вернути результат_стан_падіння(М, місцезнаходження, предмет_помилки як адреса<Предмет>);
    }
    вернути предмет_виконати(М, предмет_властивості, предмет_модуля як адреса<Предмет>, кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
  }

  зовнішня дія предмет_модуля_додати(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_додати"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_відняти(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_відняти"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_помножити(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_помножити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_поділити(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_поділити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_остача(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_остача"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_неповна_частка(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_неповна_частка"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_степінь(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_степінь"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_зсунути_вліво(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_вліво"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_зсунути_вправо(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_вправо"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_зсунути_вправо_2(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_вправо_2"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_двійкове_і(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_двійкове_і"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_двійкове_або(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_двійкове_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_двійкове_виключне_або(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_двійкове_виключне_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_двійкове_заперечення(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_двікове_заперечення"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_менше(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_менше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_більше(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_більше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_містить(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_містить"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_числова_негація(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_числова_негація"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_отримати_число(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_число"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_збільшити(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_збільшити"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_зменшити(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_зменшити"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_текст(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_метод_чародія_текст(М, предмет_модуля, місцезнаходження);
  }

  зовнішня дія предмет_модуля_юнікод(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_метод_чародія_юнікод(М, предмет_модуля, місцезнаходження);
  }

  зовнішня дія предмет_модуля_отримати_елемент(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_отримати_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_змінити_елемент(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, ключ: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_змінити_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_видалити_елемент(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_видалити_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_отримати_перебір(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_перебір"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_модуля_отримати_діапазон(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
    якщо включно {
      аргументи[0] = М.предмет_логічного_так як адреса<Предмет>;
    } інакше {
      аргументи[0] = М.предмет_логічного_ні як адреса<Предмет>;
    }
    аргументи[1] = до;
    ціль результат = предмет_модуля_виконати_властивість(М, предмет_модуля, назва(М, "чародія_діапазон"), 2, аргументи, 0, пусто, місцезнаходження);
    звільнити_памʼять(М, аргументи);
    вернути результат;
  }
}