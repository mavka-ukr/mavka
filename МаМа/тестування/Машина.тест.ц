взяти визначення МаМа;

зовнішня дія мавка_система_виділити_сиру_памʼять(розмір: позитивне): памʼять<п8>;
зовнішня дія мавка_система_перевиділити_сиру_памʼять(значення: памʼять<п8>, розмір: позитивне): памʼять<п8>;
зовнішня дія мавка_система_звільнити_сиру_памʼять(значення: памʼять<п8>);
зовнішня дія мавка_система_вийти(код: ц32);
зовнішня дія мавка_система_прочитати_файл(шлях: ю8, вихід: адреса<ю8>);

дія машина_виділити_сиру_памʼять(М: адреса<МаМа::Машина>, розмір: позитивне): памʼять<п8> {
  вернути мавка_система_виділити_сиру_памʼять(розмір);
}

дія машина_перевиділити_сиру_памʼять(М: адреса<МаМа::Машина>, значення: памʼять<п8>, розмір: позитивне): памʼять<п8> {
  вернути мавка_система_перевиділити_сиру_памʼять(значення, розмір);
}

дія машина_звільнити_сиру_памʼять(М: адреса<МаМа::Машина>, значення: памʼять<п8>) {
  мавка_система_звільнити_сиру_памʼять(значення);
}

дія машина_померти(М: адреса<МаМа::Машина>, код: ц32, повідомлення: т8) {
  надрукувати_ю8(ю8"СМЕРТЬ!");
  мавка_система_вийти(код);
}

дія створити_машину_для_тестування(): адреса<МаМа::Машина> {
  ціль М = мавка_система_виділити_сиру_памʼять(МаМа::Машина.розмір) як адреса<МаМа::Машина>;

  МаМа::налаштувати_машину(М, МаМа::Система {
    виділити_сиру_памʼять = машина_виділити_сиру_памʼять,
    перевиділити_сиру_памʼять = машина_перевиділити_сиру_памʼять,
    звільнити_сиру_памʼять = машина_звільнити_сиру_памʼять,
    померти = машина_померти
  });

  вернути М;
}

дія знищити_машину(М: адреса<МаМа::Машина>) {
  МаМа::розлаштувати_машину(М);
  мавка_система_звільнити_сиру_памʼять(М як памʼять<п8>);
}

дія записати_аргумент_в_накопичувач_вказівок(М: адреса<МаМа::Машина>, накопичувач_вказівок: адреса<МаМа::Накопичувач<п8>>, значення: позитивне) {
  ціль значення_як_памʼять_п8 = значення::адреса як памʼять<п8>;
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, значення_як_памʼять_п8[0]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, значення_як_памʼять_п8[1]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, значення_як_памʼять_п8[2]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, значення_як_памʼять_п8[3]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, значення_як_памʼять_п8[4]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, значення_як_памʼять_п8[5]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, значення_як_памʼять_п8[6]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, значення_як_памʼять_п8[7]);
}

дія записати_вказівку(М: адреса<МаМа::Машина>, накопичувач_вказівок: адреса<МаМа::Накопичувач<п8>>, вказівка: п8) {
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, вказівка);
  ціль рядок: позитивне = 0;
  ціль рядок_як_памʼять_п8 = рядок::адреса як памʼять<п8>;
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, рядок_як_памʼять_п8[0]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, рядок_як_памʼять_п8[1]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, рядок_як_памʼять_п8[2]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, рядок_як_памʼять_п8[3]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, рядок_як_памʼять_п8[4]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, рядок_як_памʼять_п8[5]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, рядок_як_памʼять_п8[6]);
  МаМа::покласти_в_накопичувач<п8>(М, накопичувач_вказівок, рядок_як_памʼять_п8[7]);
}

дія записати_вказівку_з_аргументом(М: адреса<МаМа::Машина>, накопичувач_вказівок: адреса<МаМа::Накопичувач<п8>>, вказівка: п8, аргумент: позитивне) {
  записати_вказівку(М, накопичувач_вказівок, вказівка);
  записати_аргумент_в_накопичувач_вказівок(М, накопичувач_вказівок, аргумент);
}

дія записати_вказівку_з_двома_аргументами(М: адреса<МаМа::Машина>, накопичувач_вказівок: адреса<МаМа::Накопичувач<п8>>, вказівка: п8, аргумент: позитивне, аргумент2: позитивне) {
  записати_вказівку(М, накопичувач_вказівок, вказівка);
  записати_аргумент_в_накопичувач_вказівок(М, накопичувач_вказівок, аргумент);
  записати_аргумент_в_накопичувач_вказівок(М, накопичувач_вказівок, аргумент2);
}

дія перевірити_виконання_вказівки_ВПокластиПусто(): логічне {
  вивести_ю8(ю8"перевірити_виконання_вказівки_ВПокластиПусто: ");
  ціль М = створити_машину_для_тестування();
  ціль притримувач = МаМа::покласти_притримувач(М);
  ціль накопичувач_вказівок = МаМа::зробити_накопичувач<п8>(М);
  записати_вказівку(М, накопичувач_вказівок::адреса, МаМа::ВПокластиПусто);
  ціль байти_вказівок = МаМа::створити_предмет_байтів(М, накопичувач_вказівок.розмір, накопичувач_вказівок.дані);
  ціль код = МаМа::створити_предмет_коду(М, пусто, МаМа::Послідовність<адреса<МаМа::Предмет>> { 0, пусто }, байти_вказівок);
  МаМа::притримати(М, притримувач, код як адреса<МаМа::Предмет>);
  ціль результат = МаМа::виконати_код(М, код, пусто);
  якщо результат != пусто {
    надрукувати_ю8(ю8"результат != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.стан_падіння == позитивне(так) {
    надрукувати_ю8(ю8"стан падіння");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.розмір != 1 {
    надрукувати_ю8(ю8"накопичувач_предметів.розмір != 1");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0] != пусто {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0] != пусто");
    знищити_машину(М);
    вернути ні;
  }
  надрукувати_ю8(ю8"добре");
  знищити_машину(М);
  вернути так;
}

дія перевірити_виконання_вказівки_ВПокластиТак(): логічне {
  вивести_ю8(ю8"перевірити_виконання_вказівки_ВПокластиТак: ");
  ціль М = створити_машину_для_тестування();
  ціль притримувач = МаМа::покласти_притримувач(М);
  ціль накопичувач_вказівок = МаМа::зробити_накопичувач<п8>(М);
  записати_вказівку(М, накопичувач_вказівок::адреса, МаМа::ВПокластиТак);
  ціль байти_вказівок = МаМа::створити_предмет_байтів(М, накопичувач_вказівок.розмір, накопичувач_вказівок.дані);
  ціль код = МаМа::створити_предмет_коду(М, пусто, МаМа::Послідовність<адреса<МаМа::Предмет>> { 0, пусто }, байти_вказівок);
  МаМа::притримати(М, притримувач, код як адреса<МаМа::Предмет>);
  ціль результат = МаМа::виконати_код(М, код, пусто);
  якщо результат != пусто {
    надрукувати_ю8(ю8"результат != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.стан_падіння == позитивне(так) {
    надрукувати_ю8(ю8"стан падіння");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.розмір != 1 {
    надрукувати_ю8(ю8"накопичувач_предметів.розмір != 1");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0] != М.предмет_логічного_так {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0] != М.предмет_логічного_так");
    знищити_машину(М);
    вернути ні;
  }
  надрукувати_ю8(ю8"добре");
  знищити_машину(М);
  вернути так;
}

дія перевірити_виконання_вказівки_ВПокластиНі(): логічне {
  вивести_ю8(ю8"перевірити_виконання_вказівки_ВПокластиНі: ");
  ціль М = створити_машину_для_тестування();
  ціль притримувач = МаМа::покласти_притримувач(М);
  ціль накопичувач_вказівок = МаМа::зробити_накопичувач<п8>(М);
  записати_вказівку(М, накопичувач_вказівок::адреса, МаМа::ВПокластиНі);
  ціль байти_вказівок = МаМа::створити_предмет_байтів(М, накопичувач_вказівок.розмір, накопичувач_вказівок.дані);
  ціль код = МаМа::створити_предмет_коду(М, пусто, МаМа::Послідовність<адреса<МаМа::Предмет>> { 0, пусто }, байти_вказівок);
  МаМа::притримати(М, притримувач, код як адреса<МаМа::Предмет>);
  ціль результат = МаМа::виконати_код(М, код, пусто);
  якщо результат != пусто {
    надрукувати_ю8(ю8"результат != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.стан_падіння == позитивне(так) {
    надрукувати_ю8(ю8"стан падіння");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.розмір != 1 {
    надрукувати_ю8(ю8"накопичувач_предметів.розмір != 1");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0] != М.предмет_логічного_ні {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0] != М.предмет_логічного_ні");
    знищити_машину(М);
    вернути ні;
  }
  надрукувати_ю8(ю8"добре");
  знищити_машину(М);
  вернути так;
}

дія перевірити_виконання_вказівки_ВПокластиКонстанту(): логічне {
  вивести_ю8(ю8"перевірити_виконання_вказівки_ВПокластиКонстанту: ");
  ціль М = створити_машину_для_тестування();
  ціль притримувач = МаМа::покласти_притримувач(М);
  ціль константа_числа = МаМа::створити_предмет_числа(М, 123);
  ціль накопичувач_констант = МаМа::зробити_накопичувач<адреса<МаМа::Предмет>>(М);
  МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, накопичувач_констант::адреса, константа_числа як адреса<МаМа::Предмет>);
  ціль позиція_константи = накопичувач_констант.розмір - 1;
  ціль накопичувач_вказівок = МаМа::зробити_накопичувач<п8>(М);
  записати_вказівку_з_аргументом(М, накопичувач_вказівок::адреса, МаМа::ВПокластиКонстанту, позиція_константи);
  ціль байти_вказівок = МаМа::створити_предмет_байтів(М, накопичувач_вказівок.розмір, накопичувач_вказівок.дані);
  ціль код = МаМа::створити_предмет_коду(М, пусто, МаМа::Послідовність<адреса<МаМа::Предмет>> { накопичувач_констант.розмір, накопичувач_констант.дані }, байти_вказівок);
  МаМа::притримати(М, притримувач, код як адреса<МаМа::Предмет>);
  ціль результат = МаМа::виконати_код(М, код, пусто);
  якщо результат != пусто {
    надрукувати_ю8(ю8"результат != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.стан_падіння == позитивне(так) {
    надрукувати_ю8(ю8"стан падіння");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.розмір != 1 {
    надрукувати_ю8(ю8"накопичувач_предметів.розмір != 1");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0] != константа_числа {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0] != константа_числа");
    знищити_машину(М);
    вернути ні;
  }
  надрукувати_ю8(ю8"добре");
  знищити_машину(М);
  вернути так;
}

дія перевірити_виконання_вказівки_ВСтворитиДію_1(): логічне {
  вивести_ю8(ю8"перевірити_виконання_вказівки_ВСтворитиДію_1: ");
  ціль М = створити_машину_для_тестування();
  ціль притримувач = МаМа::покласти_притримувач(М);
  ціль накопичувач_констант = МаМа::зробити_накопичувач<адреса<МаМа::Предмет>>(М);
  ціль накопичувач_вказівок = МаМа::зробити_накопичувач<п8>(М);
  записати_вказівку(М, накопичувач_вказівок::адреса, МаМа::ВПокластиПусто); // назва
  записати_вказівку(М, накопичувач_вказівок::адреса, МаМа::ВПокластиПусто); // тип_результату
  ціль накопичувач_вказівок_дії = МаМа::зробити_накопичувач<п8>(М);
  записати_вказівку(М, накопичувач_вказівок_дії::адреса, МаМа::ВПокластиПусто);
  записати_вказівку(М, накопичувач_вказівок_дії::адреса, МаМа::ВВернути);
  ціль байти_вказівок_дії = МаМа::створити_предмет_байтів(М, накопичувач_вказівок_дії.розмір, накопичувач_вказівок_дії.дані);
  ціль код_дії = МаМа::створити_предмет_коду(М, пусто, МаМа::Послідовність<адреса<МаМа::Предмет>> { 0, пусто }, байти_вказівок_дії);
  МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, накопичувач_констант::адреса, код_дії як адреса<МаМа::Предмет>);
  ціль позиція_константи_коду_дії = накопичувач_констант.розмір - 1;
  ціль позиція_константи_коду_дії_як_памʼять_п8 = позиція_константи_коду_дії::адреса як памʼять<п8>;
  записати_вказівку_з_аргументом(М, накопичувач_вказівок::адреса, МаМа::ВПокластиКонстанту, позиція_константи_коду_дії); // код
  ціль кількість_параметрів: позитивне = 0;
  записати_вказівку_з_аргументом(М, накопичувач_вказівок::адреса, МаМа::ВСтворитиДію, кількість_параметрів);
  ціль байти_вказівок = МаМа::створити_предмет_байтів(М, накопичувач_вказівок.розмір, накопичувач_вказівок.дані);
  ціль код = МаМа::створити_предмет_коду(М, пусто, МаМа::Послідовність<адреса<МаМа::Предмет>> { накопичувач_констант.розмір, накопичувач_констант.дані }, байти_вказівок);
  МаМа::притримати(М, притримувач, код як адреса<МаМа::Предмет>);
  ціль результат = МаМа::виконати_код(М, код, пусто);
  якщо результат != пусто {
    надрукувати_ю8(ю8"результат != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.стан_падіння == позитивне(так) {
    надрукувати_ю8(ю8"стан падіння");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.розмір != 1 {
    надрукувати_ю8(ю8"накопичувач_предметів.розмір != 1");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0] == пусто {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0] == пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0].тип != М.предмет_структури_Дія {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0].тип != М.предмет_структури_Дія");
    знищити_машину(М);
    вернути ні;
  }
  ціль дія_з_накопичувача_предметів = М.накопичувач_предметів.дані[0] як адреса<МаМа::ПредметДії>;
  якщо дія_з_накопичувача_предметів.назва != пусто {
    надрукувати_ю8(ю8"дія_з_накопичувача_предметів.назва != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо дія_з_накопичувача_предметів.параметри.розмір != 0 {
    надрукувати_ю8(ю8"дія_з_накопичувача_предметів.параметри.розмір != 0");
    знищити_машину(М);
    вернути ні;
  }
  якщо дія_з_накопичувача_предметів.тип_результату != пусто {
    надрукувати_ю8(ю8"дія_з_накопичувача_предметів.тип_результату != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо дія_з_накопичувача_предметів.код != код_дії {
    надрукувати_ю8(ю8"дія_з_накопичувача_предметів.код != код_дії");
    знищити_машину(М);
    вернути ні;
  }
  якщо дія_з_накопичувача_предметів.рідна != пусто {
    надрукувати_ю8(ю8"дія_з_накопичувача_предметів.рідна != пусто");
    знищити_машину(М);
    вернути ні;
  }
  надрукувати_ю8(ю8"добре");
  знищити_машину(М);
  вернути так;
}

дія перевірити_виконання_вказівки_ВСтворитиДію(): логічне {
  перевірити_виконання_вказівки_ВСтворитиДію_1();
  вернути так;
}

дія перевірити_виконання_вказівки_ВСтворитиСтруктуру_1(): логічне {
  вивести_ю8(ю8"перевірити_виконання_вказівки_ВСтворитиСтруктуру_1: ");
  ціль М = створити_машину_для_тестування();
  ціль притримувач = МаМа::покласти_притримувач(М);
  ціль накопичувач_констант = МаМа::зробити_накопичувач<адреса<МаМа::Предмет>>(М);
  ціль накопичувач_вказівок = МаМа::зробити_накопичувач<п8>(М);
  записати_вказівку(М, накопичувач_вказівок::адреса, МаМа::ВПокластиПусто); // назва
  записати_вказівку(М, накопичувач_вказівок::адреса, МаМа::ВПокластиСтруктуруПредмет); // предок
  ціль кількість_параметрів: позитивне = 0;
  записати_вказівку_з_аргументом(М, накопичувач_вказівок::адреса, МаМа::ВСтворитиСтруктуру, кількість_параметрів);
  ціль байти_вказівок = МаМа::створити_предмет_байтів(М, накопичувач_вказівок.розмір, накопичувач_вказівок.дані);
  ціль код = МаМа::створити_предмет_коду(М, пусто, МаМа::Послідовність<адреса<МаМа::Предмет>> { накопичувач_констант.розмір, накопичувач_констант.дані }, байти_вказівок);
  МаМа::притримати(М, притримувач, код як адреса<МаМа::Предмет>);
  ціль результат = МаМа::виконати_код(М, код, пусто);
  якщо результат != пусто {
    надрукувати_ю8(ю8"результат != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.стан_падіння == позитивне(так) {
    надрукувати_ю8(ю8"стан падіння");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.розмір != 1 {
    надрукувати_ю8(ю8"накопичувач_предметів.розмір != 1");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0] == пусто {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0] == пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0].тип != М.предмет_структури_Структура {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0].тип != М.предмет_структури_Структура");
    знищити_машину(М);
    вернути ні;
  }
  ціль структура_з_накопичувача_предметів = М.накопичувач_предметів.дані[0] як адреса<МаМа::ПредметСтруктури>;
  якщо структура_з_накопичувача_предметів.назва != пусто {
    надрукувати_ю8(ю8"структура_з_накопичувача_предметів.назва != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо структура_з_накопичувача_предметів.предок != М.предмет_структури_предмет {
    надрукувати_ю8(ю8"структура_з_накопичувача_предметів.предок != М.предмет_структури_предмет");
    знищити_машину(М);
    вернути ні;
  }
  якщо структура_з_накопичувача_предметів.параметри.розмір != 0 {
    надрукувати_ю8(ю8"структура_з_накопичувача_предметів.параметри.розмір != 0");
    знищити_машину(М);
    вернути ні;
  }
  надрукувати_ю8(ю8"добре");
  знищити_машину(М);
  вернути так;
}

дія перевірити_виконання_вказівки_ВСтворитиСтруктуру(): логічне {
  перевірити_виконання_вказівки_ВСтворитиСтруктуру_1();
  вернути так;
}

дія перевірити_виконання_вказівки_ВСтворитиМодуль_1(): логічне {
  вивести_ю8(ю8"перевірити_виконання_вказівки_ВСтворитиМодуль_1: ");
  ціль М = створити_машину_для_тестування();
  ціль притримувач = МаМа::покласти_притримувач(М);
  ціль накопичувач_констант = МаМа::зробити_накопичувач<адреса<МаМа::Предмет>>(М);
  ціль накопичувач_вказівок = МаМа::зробити_накопичувач<п8>(М);
  записати_вказівку(М, накопичувач_вказівок::адреса, МаМа::ВПокластиПусто); // назва
  ціль накопичувач_вказівок_модуля = МаМа::зробити_накопичувач<п8>(М);
  ціль байти_вказівок_модуля = МаМа::створити_предмет_байтів(М, накопичувач_вказівок_модуля.розмір, накопичувач_вказівок_модуля.дані);
  ціль код_модуля = МаМа::створити_предмет_коду(М, пусто, МаМа::Послідовність<адреса<МаМа::Предмет>> { 0, пусто }, байти_вказівок_модуля);
  МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, накопичувач_констант::адреса, код_модуля як адреса<МаМа::Предмет>);
  ціль позиція_константи_коду_модуля = накопичувач_констант.розмір - 1;
  ціль позиція_константи_коду_модуля_як_памʼять_п8 = позиція_константи_коду_модуля::адреса як памʼять<п8>;
  записати_вказівку_з_аргументом(М, накопичувач_вказівок::адреса, МаМа::ВПокластиКонстанту, позиція_константи_коду_модуля); // код
  записати_вказівку(М, накопичувач_вказівок::адреса, МаМа::ВСтворитиМодуль);
  ціль байти_вказівок = МаМа::створити_предмет_байтів(М, накопичувач_вказівок.розмір, накопичувач_вказівок.дані);
  ціль код = МаМа::створити_предмет_коду(М, пусто, МаМа::Послідовність<адреса<МаМа::Предмет>> { накопичувач_констант.розмір, накопичувач_констант.дані }, байти_вказівок);
  МаМа::притримати(М, притримувач, код як адреса<МаМа::Предмет>);
  ціль результат = МаМа::виконати_код(М, код, пусто);
  якщо результат != пусто {
    надрукувати_ю8(ю8"результат != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.стан_падіння == позитивне(так) {
    надрукувати_ю8(ю8"стан падіння");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.розмір != 1 {
    надрукувати_ю8(ю8"накопичувач_предметів.розмір != 1");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0] == пусто {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0] == пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0].тип != М.предмет_структури_Модуль {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0].тип != М.предмет_структури_Модуль");
    знищити_машину(М);
    вернути ні;
  }
  ціль модуль_з_накопичувача_предметів = М.накопичувач_предметів.дані[0] як адреса<МаМа::ПредметМодуля>;
  якщо модуль_з_накопичувача_предметів.назва != пусто {
    надрукувати_ю8(ю8"модуль_з_накопичувача_предметів.назва != пусто");
    знищити_машину(М);
    вернути ні;
  }
  надрукувати_ю8(ю8"добре");
  знищити_машину(М);
  вернути так;
}

дія перевірити_виконання_вказівки_ВСтворитиМодуль(): логічне {
  перевірити_виконання_вказівки_ВСтворитиМодуль_1();
  вернути ні;
}

дія перевірити_виконання_вказівки_ВСтворитиСписок_1(): логічне {
  вивести_ю8(ю8"перевірити_виконання_вказівки_ВСтворитиСписок_1: ");
  ціль М = створити_машину_для_тестування();
  ціль притримувач = МаМа::покласти_притримувач(М);
  ціль накопичувач_вказівок = МаМа::зробити_накопичувач<п8>(М);
  записати_вказівку_з_аргументом(М, накопичувач_вказівок::адреса, МаМа::ВСтворитиСписок, 0);
  ціль байти_вказівок = МаМа::створити_предмет_байтів(М, накопичувач_вказівок.розмір, накопичувач_вказівок.дані);
  ціль код = МаМа::створити_предмет_коду(М, пусто, МаМа::Послідовність<адреса<МаМа::Предмет>> { 0, пусто }, байти_вказівок);
  МаМа::притримати(М, притримувач, код як адреса<МаМа::Предмет>);
  ціль результат = МаМа::виконати_код(М, код, пусто);
  якщо результат != пусто {
    надрукувати_ю8(ю8"результат != пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.стан_падіння == позитивне(так) {
    надрукувати_ю8(ю8"стан падіння");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.розмір != 1 {
    надрукувати_ю8(ю8"накопичувач_предметів.розмір != 1");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0] == пусто {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0] == пусто");
    знищити_машину(М);
    вернути ні;
  }
  якщо М.накопичувач_предметів.дані[0].тип != М.предмет_структури_список {
    надрукувати_ю8(ю8"накопичувач_предметів.дані[0].тип != М.предмет_структури_список");
    знищити_машину(М);
    вернути ні;
  }
  ціль список_з_накопичувача_предметів = М.накопичувач_предметів.дані[0] як адреса<МаМа::ПредметСписку>;
  якщо список_з_накопичувача_предметів.елементи.розмір != 0 {
    надрукувати_ю8(ю8"список_з_накопичувача_предметів.елементи.розмір != 0");
    знищити_машину(М);
    вернути ні;
  }
  надрукувати_ю8(ю8"добре");
  знищити_машину(М);
  вернути так;
}

дія перевірити_виконання_вказівки_ВСтворитиСписок(): логічне {
  перевірити_виконання_вказівки_ВСтворитиСписок_1();
  вернути так;
}

дія перевірити_виконання_вказівки_ВПокластиВСписок(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВПокластиВСписок: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВСтворитиСловник(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВСтворитиСловник: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВПокластиВСловник(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВПокластиВСловник: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВПокластиСтруктуруПредмет(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВПокластиСтруктуруПредмет: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВПокластиЯ(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВПокластиЯ: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗаписатиМетод(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗаписатиМетод: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗаписатиСпецДію(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗаписатиСпецДію: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВизначити(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВизначити: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗвернутись(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗвернутись: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВиконати(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВиконати: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВОтриматиВластивість(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВОтриматиВластивість: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗмінитиВластивість(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗмінитиВластивість: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВиконатиВластивість(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВиконатиВластивість: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВОтриматиЕлемент(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВОтриматиЕлемент: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗмінитиЕлемент(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗмінитиЕлемент: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВОтриматиПеребір(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВОтриматиПеребір: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВизначитиЗзовні(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВизначитиЗзовні: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВиконатиЗПредка(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВиконатиЗПредка: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВидалити(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВидалити: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВидалитиВластивість(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВидалитиВластивість: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВидалитиЕлемент(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВидалитиЕлемент: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВДодати(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВДодати: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВідняти(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВідняти: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВПомножити(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВПомножити: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВПоділити(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВПоділити: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВОтриматиОстачуДілення(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВОтриматиОстачуДілення: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВОтриматиНеповнуЧасткуДілення(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВОтриматиНеповнуЧасткуДілення: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВПіднестиДоСтепеня(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВПіднестиДоСтепеня: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗсунутиВліво(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗсунутиВліво: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗсунутиВправо(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗсунутиВправо: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗсунутиВправоЗіЗаповненням(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗсунутиВправоЗіЗаповненням: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВДвійковеІ(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВДвійковеІ: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВДвійковеАБО(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВДвійковеАБО: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВДвійковеВиключнеАБО(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВДвійковеВиключнеАБО: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВДвійковеНЕ(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВДвійковеНЕ: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВМенше(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВМенше: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВБільше(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВБільше: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВНеБільше(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВНеБільше: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВНеМенше(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВНеМенше: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВРівно(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВРівно: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВНеРівно(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВНеРівно: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВМістить(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВМістить: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВНеМістить(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВНеМістить: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЄ(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЄ: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВНеЄ(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВНеЄ: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВідʼємне(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВідʼємне: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЧислове(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЧислове: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗаперечити(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗаперечити: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗбільшити(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗбільшити: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗбільшитиПопереднє(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗбільшитиПопереднє: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗменшити(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗменшити: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВПочатиСпробу(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВПочатиСпробу: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВпасти(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВпасти: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗакінчитиСпробу(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗакінчитиСпробу: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВзяти(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВзяти: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВДати(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВДати: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВПеребратиДалі(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВПеребратиДалі: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗбитиТекст(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗбитиТекст: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗбитиЮнікод(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗбитиЮнікод: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВСтворитиПараметр(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВСтворитиПараметр: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВСтворитиТип(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВСтворитиТип: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВСтрибнути(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВСтрибнути: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВСтрибнутиЯкщоНі(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВСтрибнутиЯкщоНі: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВЗабрати(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВЗабрати: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВВернути(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВВернути: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВСтрибнутиЯкщоНіЗалишивши(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВСтрибнутиЯкщоНіЗалишивши: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВСтрибнутиЯкщоТак(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВСтрибнутиЯкщоТак: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВСтрибнутиЯкщоТакЗалишивши(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВСтрибнутиЯкщоТакЗалишивши: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВДублювати(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВДублювати: -");
  вернути ні;
}

дія перевірити_виконання_вказівки_ВДублюватиПопереднє(): логічне {
  надрукувати_ю8(ю8"перевірити_виконання_вказівки_ВДублюватиПопереднє: -");
  вернути ні;
}


зовнішня дія запустити_мавку(кількість_аргументів: ц32, аргументи: памʼять<памʼять<п8>>): ц32 {
  перевірити_виконання_вказівки_ВПокластиПусто();
  перевірити_виконання_вказівки_ВПокластиТак();
  перевірити_виконання_вказівки_ВПокластиНі();
  перевірити_виконання_вказівки_ВПокластиКонстанту();
  перевірити_виконання_вказівки_ВСтворитиДію();
  перевірити_виконання_вказівки_ВСтворитиСтруктуру();
  перевірити_виконання_вказівки_ВСтворитиМодуль();
  перевірити_виконання_вказівки_ВСтворитиСписок();
  перевірити_виконання_вказівки_ВПокластиВСписок();
  перевірити_виконання_вказівки_ВСтворитиСловник();
  перевірити_виконання_вказівки_ВПокластиВСловник();
  перевірити_виконання_вказівки_ВПокластиСтруктуруПредмет();
  перевірити_виконання_вказівки_ВПокластиЯ();
  перевірити_виконання_вказівки_ВЗаписатиМетод();
  перевірити_виконання_вказівки_ВЗаписатиСпецДію();
  перевірити_виконання_вказівки_ВВизначити();
  перевірити_виконання_вказівки_ВЗвернутись();
  перевірити_виконання_вказівки_ВВиконати();
  перевірити_виконання_вказівки_ВОтриматиВластивість();
  перевірити_виконання_вказівки_ВЗмінитиВластивість();
  перевірити_виконання_вказівки_ВВиконатиВластивість();
  перевірити_виконання_вказівки_ВОтриматиЕлемент();
  перевірити_виконання_вказівки_ВЗмінитиЕлемент();
  перевірити_виконання_вказівки_ВОтриматиПеребір();
  перевірити_виконання_вказівки_ВВизначитиЗзовні();
  перевірити_виконання_вказівки_ВВиконатиЗПредка();
  перевірити_виконання_вказівки_ВВидалити();
  перевірити_виконання_вказівки_ВВидалитиВластивість();
  перевірити_виконання_вказівки_ВВидалитиЕлемент();
  перевірити_виконання_вказівки_ВДодати();
  перевірити_виконання_вказівки_ВВідняти();
  перевірити_виконання_вказівки_ВПомножити();
  перевірити_виконання_вказівки_ВПоділити();
  перевірити_виконання_вказівки_ВОтриматиОстачуДілення();
  перевірити_виконання_вказівки_ВОтриматиНеповнуЧасткуДілення();
  перевірити_виконання_вказівки_ВПіднестиДоСтепеня();
  перевірити_виконання_вказівки_ВЗсунутиВліво();
  перевірити_виконання_вказівки_ВЗсунутиВправо();
  перевірити_виконання_вказівки_ВЗсунутиВправоЗіЗаповненням();
  перевірити_виконання_вказівки_ВДвійковеІ();
  перевірити_виконання_вказівки_ВДвійковеАБО();
  перевірити_виконання_вказівки_ВДвійковеВиключнеАБО();
  перевірити_виконання_вказівки_ВДвійковеНЕ();
  перевірити_виконання_вказівки_ВМенше();
  перевірити_виконання_вказівки_ВБільше();
  перевірити_виконання_вказівки_ВНеБільше();
  перевірити_виконання_вказівки_ВНеМенше();
  перевірити_виконання_вказівки_ВРівно();
  перевірити_виконання_вказівки_ВНеРівно();
  перевірити_виконання_вказівки_ВМістить();
  перевірити_виконання_вказівки_ВНеМістить();
  перевірити_виконання_вказівки_ВЄ();
  перевірити_виконання_вказівки_ВНеЄ();
  перевірити_виконання_вказівки_ВВідʼємне();
  перевірити_виконання_вказівки_ВЧислове();
  перевірити_виконання_вказівки_ВЗаперечити();
  перевірити_виконання_вказівки_ВЗбільшити();
  перевірити_виконання_вказівки_ВЗбільшитиПопереднє();
  перевірити_виконання_вказівки_ВЗменшити();
  перевірити_виконання_вказівки_ВПочатиСпробу();
  перевірити_виконання_вказівки_ВВпасти();
  перевірити_виконання_вказівки_ВЗакінчитиСпробу();
  перевірити_виконання_вказівки_ВВзяти();
  перевірити_виконання_вказівки_ВДати();
  перевірити_виконання_вказівки_ВПеребратиДалі();
  перевірити_виконання_вказівки_ВЗбитиТекст();
  перевірити_виконання_вказівки_ВЗбитиЮнікод();
  перевірити_виконання_вказівки_ВСтворитиПараметр();
  перевірити_виконання_вказівки_ВСтворитиТип();
  перевірити_виконання_вказівки_ВСтрибнути();
  перевірити_виконання_вказівки_ВСтрибнутиЯкщоНі();
  перевірити_виконання_вказівки_ВЗабрати();
  перевірити_виконання_вказівки_ВВернути();
  перевірити_виконання_вказівки_ВСтрибнутиЯкщоНіЗалишивши();
  перевірити_виконання_вказівки_ВСтрибнутиЯкщоТак();
  перевірити_виконання_вказівки_ВСтрибнутиЯкщоТакЗалишивши();
  перевірити_виконання_вказівки_ВДублювати();
  перевірити_виконання_вказівки_ВДублюватиПопереднє();
  вернути 1;
}