взяти визначення біб/КД;
взяти визначення МаМа;

секція МаМа {
  зовнішня дія перевірити_чи_ю8_рівні(а: ю8, б: ю8): логічне {
    вернути КД::перевірити_чи_ю8_рівні(а, б);
  }

  зовнішня дія перевірити_чи_ю32_рівні(а: ю32, б: ю32): логічне {
    вернути КД::перевірити_чи_ю32_рівні(а, б);
  }

  зовнішня дія перевірити_чи_т8_рівні(а: т8, б: т8): логічне {
    вернути КД::перевірити_чи_т8_рівні(а, б);
  }

  зовнішня дія перевірити_чи_т32_рівні(а: т32, б: т32): логічне {
    вернути КД::перевірити_чи_т32_рівні(а, б);
  }

  зовнішня дія порахувати_розмір_ю8сі(значення: памʼять<п8>): позитивне {
    вернути КД::порахувати_розмір_ю8сі(значення);
  }

  зовнішня дія порахувати_розмір_ю32сі(значення: памʼять<п32>): позитивне {
    вернути КД::порахувати_розмір_ю32сі(значення);
  }

  зовнішня дія порахувати_розмір_т8сі(значення: памʼять<п8>): позитивне {
    вернути КД::порахувати_розмір_т8сі(значення);
  }

  зовнішня дія порахувати_розмір_т32сі(значення: памʼять<п32>): позитивне {
    вернути КД::порахувати_розмір_т32сі(значення);
  }

  зовнішня дія перевірити_чи_ю8_закінчується_на(значення: ю8, шукане: ю8): логічне {
    якщо шукане.розмір > значення.розмір {
      вернути ні;
    }
    змінна п: позитивне = значення.розмір - шукане.розмір;
    змінна пп: позитивне = 0;
    поки п < значення.розмір {
      якщо значення.дані[п] != шукане.дані[пп] {
        вернути ні;
      }
      п += 1;
      пп += 1;
    }
    вернути так;
  }

  зовнішня дія виділити_копію_т8(М: адреса<Машина>, значення: т8, вихід: адреса<т8>): логічне {
    змінна копія = т8 {
      значення.розмір,
      виділити_памʼять<п8>(М, значення.розмір)
    };
    змінна п: позитивне = 0;
    поки п < значення.розмір {
      копія.дані[п] = значення.дані[п];
      п += 1;
    }
    вихід::вміст = копія;
    вернути так;
  }

  зовнішня дія виділити_копію_ю8(М: адреса<Машина>, значення: ю8, вихід: адреса<ю8>): логічне {
    змінна копія = ю8 {
      значення.розмір,
      виділити_памʼять<п8>(М, значення.розмір)
    };
    змінна п: позитивне = 0;
    поки п < значення.розмір {
      копія.дані[п] = значення.дані[п];
      п += 1;
    }
    вихід::вміст = копія;
    вернути так;
  }

  зовнішня дія виділити_копію_ю32(М: адреса<Машина>, значення: ю32, вихід: адреса<ю32>): логічне {
    змінна копія = ю32 {
      значення.розмір,
      виділити_памʼять<п32>(М, значення.розмір)
    };
    змінна п: позитивне = 0;
    поки п < значення.розмір {
      копія.дані[п] = значення.дані[п];
      п += 1;
    }
    вихід::вміст = копія;
    вернути так;
  }

  зовнішня дія виділити_копію_памʼяті(М: адреса<Машина>, розмір: позитивне, значення: памʼять<п8>, вихід: адреса<памʼять<п8>>): логічне {
    змінна копія = виділити_памʼять<п8>(М, розмір);
    змінна п: позитивне = 0;
    поки п < розмір {
      копія[п] = значення[п];
      п += 1;
    }
    вихід::вміст = копія;
    вернути так;
  }

  дія система_КД_виділити_сиру_памʼять(система: адреса<КД::Система>, розмір: позитивне): памʼять<п8> {
    змінна М = система.дані як адреса<Машина>;
    вернути виділити_памʼять<п8>(М, розмір);
  }

  дія система_КД_перевиділити_сиру_памʼять(система: адреса<КД::Система>, значення: памʼять<п8>, новий_розмір: позитивне): памʼять<п8> {
    змінна М = система.дані як адреса<Машина>;
    вернути перевиділити_памʼять<п8>(М, значення, новий_розмір);
  }

  дія система_КД_звільнити_сиру_памʼять(система: адреса<КД::Система>, значення: невідома_памʼять) {
    змінна М = система.дані як адреса<Машина>;
    звільнити_памʼять(М, значення);
  }

  зовнішня дія перекодувати_ю8_в_т8(М: адреса<Машина>, вхід: ю8, вихід: адреса<т8>, з_нульовим_байтом_в_кінці: логічне): логічне {
    змінна система = КД::Система {
      дані = М,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять,
    };
    вернути КД::перекодувати_ю8_в_т8(система::адреса, вхід, ні, з_нульовим_байтом_в_кінці, вихід, пусто);
  }

  зовнішня дія перекодувати_ю8_в_ю32(М: адреса<Машина>, вхід: ю8, вихід: адреса<ю32>, з_нульовим_байтом_в_кінці: логічне): логічне {
    змінна система = КД::Система {
      дані = М,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять,
    };
    вернути КД::перекодувати_ю8_в_ю32(система::адреса, вхід, з_нульовим_байтом_в_кінці, вихід, пусто);
  }

  зовнішня дія перекодувати_ю32_в_ю8(М: адреса<Машина>, вхід: ю32, вихід: адреса<ю8>, з_нульовим_байтом_в_кінці: логічне): логічне {
    змінна система = КД::Система {
      дані = М,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять,
    };
    вернути КД::перекодувати_ю32_в_ю8(система::адреса, вхід, з_нульовим_байтом_в_кінці, вихід, пусто);
  }

  зовнішня дія перекодувати_т8_в_ю8(М: адреса<Машина>, вхід: т8, вихід: адреса<ю8>, з_нульовим_байтом_в_кінці: логічне): логічне {
    змінна система = КД::Система {
      дані = М,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять,
    };
    вернути КД::перекодувати_т8_в_ю8(система::адреса, вхід, з_нульовим_байтом_в_кінці, вихід, пусто);
  }
}
