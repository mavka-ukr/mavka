взяти визначення МаМа;

зовнішня дія мавка_система_остача_від_ділення_д64(а: д64, б: д64): д64;
зовнішня дія мавка_система_неповна_частка_від_ділення_д64(а: д64, б: д64): д64;
зовнішня дія мавка_система_піднести_до_степеня_д64(а: д64, б: д64): д64;

секція МаМа {
  дія предмет_числа_виконати_метод_чародія_додати(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_числа(М, предмет_числа.значення + значення.значення) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_відняти(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, предмет_числа.значення - значення.значення) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_помножити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, предмет_числа.значення * значення.значення) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_поділити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, предмет_числа.значення / значення.значення) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_остача(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, мавка_система_остача_від_ділення_д64(предмет_числа.значення, значення.значення)) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_неповна_частка(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, мавка_система_неповна_частка_від_ділення_д64(предмет_числа.значення, значення.значення)) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_степінь(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, мавка_система_піднести_до_степеня_д64(предмет_числа.значення, значення.значення)) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_вліво(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) << ц32(значення.значення))) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_вправо(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) >> ц32(значення.значення))) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_вправо_2(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, д64(п32(предмет_числа.значення) >> п32(значення.значення))) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_двійкове_і(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) ∧ ц32(значення.значення))) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_двійкове_або(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) ∨ ц32(значення.значення))) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_двійкове_виключне_або(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) ⊕ ц32(значення.значення))) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_двійкове_заперечення(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_числа(М, д64(¬ц32(предмет_числа.значення))) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_менше(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_числа.значення < значення.значення {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_більше(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, значення: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_числа.значення > значення.значення {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_числова_негація(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_числа(М, д64(0.0) - предмет_числа.значення) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_число(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_збільшити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_числа(М, предмет_числа.значення + 1.0) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_зменшити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_числа(М, предмет_числа.значення - 1.0) як адреса<Предмет>;
  }

  дія предмет_числа_виконати_метод_чародія_зображення(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна значення_ю8 = ю8 { 0, пусто };
    мавка_система_перетворити_д64_в_ю8(предмет_числа.значення, значення_ю8::адреса);
    змінна значення = т8 { 0, пусто };
    якщо перекодувати_ю8_в_т8(М, значення_ю8, значення::адреса, ні) == ні {
      // потім: помилка
    }
    змінна предмет_тексту = створити_предмет_тексту(М, значення) як адреса<Предмет>;
    звільнити_памʼять(М, значення_ю8.дані);
    звільнити_памʼять(М, значення.дані);
    вернути предмет_тексту;
  }

  дія предмет_числа_виконати_метод_чародія_текст(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна значення_ю8 = ю8 { 0, пусто };
    мавка_система_перетворити_д64_в_ю8(предмет_числа.значення, значення_ю8::адреса);
    змінна значення = т8 { 0, пусто };
    якщо перекодувати_ю8_в_т8(М, значення_ю8, значення::адреса, ні) == ні {
      // потім: помилка
    }
    змінна предмет_тексту = створити_предмет_тексту(М, значення) як адреса<Предмет>;
    звільнити_памʼять(М, значення_ю8.дані);
    звільнити_памʼять(М, значення.дані);
    вернути предмет_тексту;
  }

  дія предмет_числа_виконати_метод_чародія_юнікод(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна значення_ю8 = ю8 { 0, пусто };
    мавка_система_перетворити_д64_в_ю8(предмет_числа.значення, значення_ю8::адреса);
    змінна предмет_тексту = створити_предмет_юнікоду_з_ю8(М, значення_ю8) як адреса<Предмет>;
    звільнити_памʼять(М, значення_ю8.дані);
    вернути предмет_тексту;
  }

  дія предмет_числа_виконати_метод_чародія_діапазон(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, включно: логічне, до: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_діапазону_чисел(М, предмет_числа, включно, до) як адреса<Предмет>;
  }
}

секція МаМа {
  дія рідна_дія_метода_чародія_додати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_додати\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_додати(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_додати(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_додати = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_додати[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_додати = створити_предмет_рідної_дії(М, назва(М, "чародія_додати"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_додати }, пусто, рідна_дія_метода_чародія_додати, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_додати"), предмет_дії_метода_чародія_додати);
  }

  дія рідна_дія_метода_чародія_відняти(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_відняти\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_відняти(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_відняти(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_відняти = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_відняти[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_відняти = створити_предмет_рідної_дії(М, назва(М, "чародія_відняти"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_відняти }, пусто, рідна_дія_метода_чародія_відняти, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_відняти"), предмет_дії_метода_чародія_відняти);
  }

  дія рідна_дія_метода_чародія_помножити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_помножити\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_помножити(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_помножити(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_помножити = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_помножити[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_помножити = створити_предмет_рідної_дії(М, назва(М, "чародія_помножити"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_помножити }, пусто, рідна_дія_метода_чародія_помножити, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_помножити"), предмет_дії_метода_чародія_помножити);
  }

  дія рідна_дія_метода_чародія_поділити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_поділити\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_поділити(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_поділити(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_поділити = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_поділити[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_поділити = створити_предмет_рідної_дії(М, назва(М, "чародія_поділити"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_поділити }, пусто, рідна_дія_метода_чародія_поділити, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_поділити"), предмет_дії_метода_чародія_поділити);
  }

  дія рідна_дія_метода_чародія_остача(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_остача\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_остача(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_остача(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_остача = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_остача[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_остача = створити_предмет_рідної_дії(М, назва(М, "чародія_остача"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_остача }, пусто, рідна_дія_метода_чародія_остача, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_остача"), предмет_дії_метода_чародія_остача);
  }

  дія рідна_дія_метода_чародія_неповна_частка(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_неповна_частка\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_неповна_частка(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_неповна_частка(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_неповна_частка = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_неповна_частка[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_неповна_частка = створити_предмет_рідної_дії(М, назва(М, "чародія_неповна_частка"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_неповна_частка }, пусто, рідна_дія_метода_чародія_неповна_частка, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_неповна_частка"), предмет_дії_метода_чародія_неповна_частка);
  }

  дія рідна_дія_метода_чародія_степінь(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_степінь\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_степінь(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_степінь(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_степінь = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_степінь[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_степінь = створити_предмет_рідної_дії(М, назва(М, "чародія_степінь"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_степінь }, пусто, рідна_дія_метода_чародія_степінь, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_степінь"), предмет_дії_метода_чародія_степінь);
  }

  дія рідна_дія_метода_чародія_вліво(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_вліво\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_вліво(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_вліво(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_вліво = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_вліво[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_вліво = створити_предмет_рідної_дії(М, назва(М, "чародія_вліво"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_вліво }, пусто, рідна_дія_метода_чародія_вліво, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_вліво"), предмет_дії_метода_чародія_вліво);
  }

  дія рідна_дія_метода_чародія_вправо(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_вправо\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_вправо(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_вправо(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_вправо = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_вправо[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_вправо = створити_предмет_рідної_дії(М, назва(М, "чародія_вправо"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_вправо }, пусто, рідна_дія_метода_чародія_вправо, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_вправо"), предмет_дії_метода_чародія_вправо);
  }

  дія рідна_дія_метода_чародія_вправо_2(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_вправо_2\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_вправо_2(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_вправо_2(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_вправо_2 = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_вправо_2[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_вправо_2 = створити_предмет_рідної_дії(М, назва(М, "чародія_вправо_2"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_вправо_2 }, пусто, рідна_дія_метода_чародія_вправо_2, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_вправо_2"), предмет_дії_метода_чародія_вправо_2);
  }

  дія рідна_дія_метода_чародія_двійкове_і(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_двійкове_і\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_двійкове_і(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_двійкове_і(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_двійкове_і = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_двійкове_і[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_двійкове_і = створити_предмет_рідної_дії(М, назва(М, "чародія_двійкове_і"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_двійкове_і }, пусто, рідна_дія_метода_чародія_двійкове_і, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_двійкове_і"), предмет_дії_метода_чародія_двійкове_і);
  }

  дія рідна_дія_метода_чародія_двійкове_або(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_двійкове_або\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_двійкове_або(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_двійкове_або(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_двійкове_або = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_двійкове_або[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_двійкове_або = створити_предмет_рідної_дії(М, назва(М, "чародія_двійкове_або"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_двійкове_або }, пусто, рідна_дія_метода_чародія_двійкове_або, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_двійкове_або"), предмет_дії_метода_чародія_двійкове_або);
  }

  дія рідна_дія_метода_чародія_двійкове_виключне_або(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_двійкове_виключне_або\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_двійкове_виключне_або(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_двійкове_виключне_або(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_двійкове_виключне_або = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_двійкове_виключне_або[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_двійкове_виключне_або = створити_предмет_рідної_дії(М, назва(М, "чародія_двійкове_виключне_або"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_двійкове_виключне_або }, пусто, рідна_дія_метода_чародія_двійкове_виключне_або, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_двійкове_виключне_або"), предмет_дії_метода_чародія_двійкове_виключне_або);
  }

  дія рідна_дія_метода_чародія_двійкове_заперечення(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_двійкове_заперечення\" не для числа") як адреса<Предмет>);
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_двійкове_заперечення(М, предмет_числа, місцезнаходження);
  }

  дія рідна_дія_метода_чародія_менше(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_менше\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_менше(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_менше(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_менше = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_менше[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_менше = створити_предмет_рідної_дії(М, назва(М, "чародія_менше"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_менше }, пусто, рідна_дія_метода_чародія_менше, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_менше"), предмет_дії_метода_чародія_менше);
  }

  дія рідна_дія_метода_чародія_більше(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_більше\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_більше(М, предмет_числа, аргумент_значення як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_більше(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_число;
    змінна тип_параметра_значення = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    змінна параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), тип_параметра_значення, пусто);
    змінна дані_параметрів_метода_чародія_більше = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_чародія_більше[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_більше = створити_предмет_рідної_дії(М, назва(М, "чародія_більше"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_чародія_більше }, пусто, рідна_дія_метода_чародія_більше, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_більше"), предмет_дії_метода_чародія_більше);
  }

  дія записати_метод_структури_число_чародія_двійкове_заперечення(М: адреса<Машина>) {
    змінна предмет_дії_метода_чародія_двійкове_заперечення = створити_предмет_рідної_дії(М, назва(М, "чародія_двійкове_заперечення"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_двійкове_заперечення, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_двійкове_заперечення"), предмет_дії_метода_чародія_двійкове_заперечення);
  }

  дія рідна_дія_метода_чародія_числова_негація(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_числова_негація\" не для числа") як адреса<Предмет>);
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_числова_негація(М, предмет_числа, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_числова_негація(М: адреса<Машина>) {
    змінна предмет_дії_метода_чародія_числова_негація = створити_предмет_рідної_дії(М, назва(М, "чародія_числова_негація"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_числова_негація, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_числова_негація"), предмет_дії_метода_чародія_числова_негація);
  }

  дія рідна_дія_метода_чародія_збільшити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_збільшити\" не для числа") як адреса<Предмет>);
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_збільшити(М, предмет_числа, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_збільшити(М: адреса<Машина>) {
    змінна предмет_дії_метода_чародія_збільшити = створити_предмет_рідної_дії(М, назва(М, "чародія_збільшити"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_збільшити, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_збільшити"), предмет_дії_метода_чародія_збільшити);
  }

  дія рідна_дія_метода_чародія_зменшити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_зменшити\" не для числа") як адреса<Предмет>);
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_зменшити(М, предмет_числа, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_зменшити(М: адреса<Машина>) {
    змінна предмет_дії_метода_чародія_зменшити = створити_предмет_рідної_дії(М, назва(М, "чародія_зменшити"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_зменшити, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_зменшити"), предмет_дії_метода_чародія_зменшити);
  }

  дія рідна_дія_метода_чародія_число(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_число\" не для числа") як адреса<Предмет>);
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_число(М, предмет_числа, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_число(М: адреса<Машина>) {
    змінна предмет_дії_метода_чародія_число = створити_предмет_рідної_дії(М, назва(М, "чародія_число"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_число, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_число"), предмет_дії_метода_чародія_число);
  }

  дія рідна_дія_метода_чародія_зображення(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_зображення\" не для числа") як адреса<Предмет>);
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_зображення(М, предмет_числа, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_зображення(М: адреса<Машина>) {
    змінна предмет_дії_метода_чародія_зображення = створити_предмет_рідної_дії(М, назва(М, "чародія_зображення"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_зображення, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_зображення"), предмет_дії_метода_чародія_зображення);
  }

  дія рідна_дія_метода_чародія_текст(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_текст\" не для числа") як адреса<Предмет>);
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_текст(М, предмет_числа, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_текст(М: адреса<Машина>) {
    змінна предмет_дії_метода_чародія_текст = створити_предмет_рідної_дії(М, назва(М, "чародія_текст"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_текст, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_текст"), предмет_дії_метода_чародія_текст);
  }

  дія рідна_дія_метода_чародія_юнікод(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_юнікод\" не для числа") як адреса<Предмет>);
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_юнікод(М, предмет_числа, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_юнікод(М: адреса<Машина>) {
    змінна предмет_дії_метода_чародія_юнікод = створити_предмет_рідної_дії(М, назва(М, "чародія_юнікод"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_юнікод, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_юнікод"), предмет_дії_метода_чародія_юнікод);
  }

  дія рідна_дія_метода_чародія_діапазон(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_діапазон\" не для числа") як адреса<Предмет>);
    }
    змінна аргумент_включно: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_включно = ні;
    змінна аргумент_до: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_до = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_включно = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "включно"), аргумент_включно::адреса);
      знайдено_аргумент_до = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "до"), аргумент_до::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_включно == ні {
        аргумент_включно = аргументи[0];
        знайдено_аргумент_включно = так;
      }
      якщо кількість_аргументів > 1 {
        якщо знайдено_аргумент_до == ні {
          аргумент_до = аргументи[1];
          знайдено_аргумент_до = так;
        }
      }
    }
    змінна предмет_числа = предмет_я як адреса<ПредметЧисла>;
    вернути предмет_числа_виконати_метод_чародія_діапазон(М, предмет_числа, перевірити_чи_предмет_виражається_логічним_так(М, аргумент_включно), аргумент_до як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_число_чародія_діапазон(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_включно = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_включно[0] = М.предмет_структури_логічне;
    змінна тип_параметра_включно = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_включно });
    змінна параметр_включно = створити_предмет_параметра(М, назва(М, "включно"), тип_параметра_включно, пусто);
    змінна допустимі_структури_типу_параметра_до = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_до[0] = М.предмет_структури_число;
    змінна тип_параметра_до = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_до });
    змінна параметр_до = створити_предмет_параметра(М, назва(М, "до"), тип_параметра_до, пусто);
    змінна дані_параметрів_метода_чародія_діапазон = виділити_памʼять<адреса<ПредметПараметра>>(М, 2);
    дані_параметрів_метода_чародія_діапазон[0] = параметр_включно;
    дані_параметрів_метода_чародія_діапазон[1] = параметр_до;
    змінна предмет_дії_метода_чародія_діапазон = створити_предмет_рідної_дії(М, назва(М, "чародія_діапазон"), Послідовність<адреса<ПредметПараметра>> { 2, дані_параметрів_метода_чародія_діапазон }, пусто, рідна_дія_метода_чародія_діапазон, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_число, назва(М, "чародія_діапазон"), предмет_дії_метода_чародія_діапазон);
  }

  зовнішня дія заповнити_предмет_структури_число(М: адреса<Машина>) {
    // методи
    записати_метод_структури_число_чародія_додати(М);
    записати_метод_структури_число_чародія_відняти(М);
    записати_метод_структури_число_чародія_помножити(М);
    записати_метод_структури_число_чародія_поділити(М);
    записати_метод_структури_число_чародія_остача(М);
    записати_метод_структури_число_чародія_неповна_частка(М);
    записати_метод_структури_число_чародія_степінь(М);
    записати_метод_структури_число_чародія_вліво(М);
    записати_метод_структури_число_чародія_вправо(М);
    записати_метод_структури_число_чародія_вправо_2(М);
    записати_метод_структури_число_чародія_двійкове_і(М);
    записати_метод_структури_число_чародія_двійкове_або(М);
    записати_метод_структури_число_чародія_двійкове_виключне_або(М);
    записати_метод_структури_число_чародія_двійкове_заперечення(М);
    записати_метод_структури_число_чародія_менше(М);
    записати_метод_структури_число_чародія_більше(М);
    записати_метод_структури_число_чародія_числова_негація(М);
    записати_метод_структури_число_чародія_число(М);
    записати_метод_структури_число_чародія_збільшити(М);
    записати_метод_структури_число_чародія_зменшити(М);
    записати_метод_структури_число_чародія_зображення(М);
    записати_метод_структури_число_чародія_текст(М);
    записати_метод_структури_число_чародія_юнікод(М);
    записати_метод_структури_число_чародія_діапазон(М);
  }

  зовнішня дія створити_предмет_числа(М: адреса<Машина>, значення: д64): адреса<ПредметЧисла> {
    змінна предмет_числа = створити_предмет<ПредметЧисла>(М, М.предмет_структури_число);
    предмет_числа.значення = значення;
    вернути предмет_числа;
  }

  зовнішня дія предмет_числа_виконати(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа_виконати_властивість(М, предмет_числа, назва(М, "чародія_виконати"), кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
  }

  зовнішня дія предмет_числа_отримати_властивість(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна метод: адреса<ПредметДії> = пусто;
    якщо знайти_метод_в_структурі(М, предмет_числа.тип, назва, метод::адреса) {
      вернути метод як адреса<Предмет>;
    }
    вернути пусто;
  }

  зовнішня дія предмет_числа_змінити_властивість(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, назва: адреса<ПредметТексту>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути пусто;
  }

  зовнішня дія предмет_числа_виконати_властивість(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, назва: адреса<ПредметТексту>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна предмет_властивості = предмет_числа_отримати_властивість(М, предмет_числа, назва, місцезнаходження);
    якщо М.стан_падіння == позитивне(так) {
      вернути предмет_властивості;
    }
    якщо предмет_властивості == пусто {
      змінна накопичувач_т8_помилки = зробити_накопичувач<п8>(М);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "Неможливо виконати пусту властивість предмета числа \"");
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, назва.значення);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "\"");
      змінна предмет_помилки = створити_предмет_тексту(М, т8 { накопичувач_т8_помилки.розмір, накопичувач_т8_помилки.дані });
      звільнити_памʼять(М, накопичувач_т8_помилки.дані);
      вернути результат_стан_падіння(М, місцезнаходження, предмет_помилки як адреса<Предмет>);
    }
    вернути предмет_виконати(М, предмет_властивості, предмет_числа як адреса<Предмет>, кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
  }

  зовнішня дія предмет_числа_додати(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо додати пусто до числа") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_додати(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати додавання числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_відняти(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо відняти пусто від числа") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_відняти(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати віднімання числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_помножити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо помножити число на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_помножити(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо помножити число") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_поділити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо поділити число на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_поділити(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо поділити число") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_остача(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо отримати остачу від ділення числа на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_остача(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо отримати остачу від ділення числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_неповна_частка(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо отримати частку від ділення числа на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_неповна_частка(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо отримати частку від ділення числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_степінь(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо піднести число до степеня пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_степінь(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо піднести число до степеня") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_зсунути_вліво(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вліво на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_вліво(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вліво") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_зсунути_вправо(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вправо на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_вправо(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вправо") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_зсунути_вправо_2(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вправо зі заповненням на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_вправо_2(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вправо зі заповненням") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_двійкове_і(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове І для числа і пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_двійкове_і(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове І для числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_двійкове_або(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове АБО для числа і пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_двійкове_або(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове АБО для числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_двійкове_виключне_або(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове виключне АБО для числа і пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_двійкове_виключне_або(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове виключне АБО для числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_двійкове_заперечення(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути предмет_числа_виконати_метод_чародія_двійкове_заперечення(М, предмет_числа, місцезнаходження);
  }

  зовнішня дія предмет_числа_менше(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо перевірити чи число менше пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_менше(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо перевірити чи число менше") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_більше(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо перевірити чи число більше пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      змінна аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути предмет_числа_виконати_метод_чародія_більше(М, предмет_числа, аргумент_предмет_числа, місцезнаходження);
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо перевірити чи число більше") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_містить(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа_виконати_властивість(М, предмет_числа, назва(М, "чародія_містить"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_числа_числова_негація(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути предмет_числа_виконати_метод_чародія_числова_негація(М, предмет_числа, місцезнаходження);
  }

  зовнішня дія предмет_числа_отримати_число(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути предмет_числа_виконати_метод_чародія_число(М, предмет_числа, місцезнаходження);
  }

  зовнішня дія предмет_числа_збільшити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути предмет_числа_виконати_метод_чародія_збільшити(М, предмет_числа, місцезнаходження);
  }

  зовнішня дія предмет_числа_зменшити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа_виконати_метод_чародія_зменшити(М, предмет_числа, місцезнаходження);
  }

  зовнішня дія предмет_числа_зображення(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа_виконати_метод_чародія_зображення(М, предмет_числа, місцезнаходження) як адреса<Предмет>;
  }

  зовнішня дія предмет_числа_текст(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа_виконати_метод_чародія_текст(М, предмет_числа, місцезнаходження) як адреса<Предмет>;
  }

  зовнішня дія предмет_числа_юнікод(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа_виконати_метод_чародія_юнікод(М, предмет_числа, місцезнаходження) як адреса<Предмет>;
  }

  зовнішня дія предмет_числа_отримати_байти(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа_виконати_властивість(М, предмет_числа, назва(М, "чародія_байти"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_числа_отримати_елемент(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа_виконати_властивість(М, предмет_числа, назва(М, "чародія_отримати_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_числа_змінити_елемент(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, ключ: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа_виконати_властивість(М, предмет_числа, назва(М, "чародія_змінити_елемент"), 2, ключ::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_числа_отримати_перебір(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа_виконати_властивість(М, предмет_числа, назва(М, "чародія_перебір"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_числа_отримати_діапазон(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо до == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Створити діапазон чисел можна лише для двох чисел") як адреса<Предмет>);
    }
    якщо до.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Створити діапазон чисел можна лише для двох чисел") як адреса<Предмет>);
    }
    вернути предмет_числа_виконати_метод_чародія_діапазон(М, предмет_числа, включно, до як адреса<ПредметЧисла>, місцезнаходження);
  }
}