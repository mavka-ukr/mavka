взяти визначення МаМа;

зовнішня дія мавка_система_остача_від_ділення_д64(а: д64, б: д64): д64;
зовнішня дія мавка_система_частка_від_ділення_д64(а: д64, б: д64): д64;
зовнішня дія мавка_система_піднести_до_степеня_д64(а: д64, б: д64): д64;

секція МаМа {
  зовнішня дія заповнити_предмет_структури_число(М: адреса<Машина>) {

  }

  зовнішня дія створити_предмет_числа(М: адреса<Машина>, значення: д64): адреса<ПредметЧисла> {
    ціль предмет_числа = створити_предмет<ПредметЧисла>(М, М.предмет_структури_число);
    предмет_числа.значення = значення;
    вернути предмет_числа;
  }

  зовнішня дія предмет_числа_виконати(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_отримати_властивість(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_змінити_властивість(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, назва: адреса<ПредметТексту>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_видалити_властивість(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_виконати_властивість(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, назва: адреса<ПредметТексту>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_додати(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо додати пусто до числа") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, предмет_числа.значення + аргумент_предмет_числа.значення) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати додавання числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_відняти(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо відняти пусто від числа") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, предмет_числа.значення - аргумент_предмет_числа.значення) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати віднімання числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_помножити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо помножити число на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, предмет_числа.значення * аргумент_предмет_числа.значення) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо помножити число") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_поділити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо поділити число на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, предмет_числа.значення / аргумент_предмет_числа.значення) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо поділити число") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_остача(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо отримати остачу від ділення числа на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, мавка_система_остача_від_ділення_д64(предмет_числа.значення, аргумент_предмет_числа.значення)) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо отримати остачу від ділення числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_частка(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо отримати частку від ділення числа на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, мавка_система_частка_від_ділення_д64(предмет_числа.значення, аргумент_предмет_числа.значення)) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо отримати частку від ділення числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_степінь(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо піднести число до степеня пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, мавка_система_піднести_до_степеня_д64(предмет_числа.значення, аргумент_предмет_числа.значення)) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо піднести число до степеня") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_зсунути_вліво(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вліво на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) << ц32(аргумент_предмет_числа.значення))) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вліво") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_зсунути_вправо(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вправо на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) >> ц32(аргумент_предмет_числа.значення))) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вправо") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_зсунути_вправо_зі_заповненням(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вправо зі заповненням на пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) >>> ц32(аргумент_предмет_числа.значення))) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо зсунути число вправо зі заповненням") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_двійкове_і(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове І для числа і пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) & ц32(аргумент_предмет_числа.значення))) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове І для числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_двійкове_або(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове АБО для числа і пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) | ц32(аргумент_предмет_числа.значення))) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове АБО для числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_двійкове_виключне_або(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове виключне АБО для числа і пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) ^ ц32(аргумент_предмет_числа.значення))) як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати двійкове виключне АБО для числа") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_двійкове_заперечення(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_числа(М, д64(ц32(предмет_числа.значення) ^ ц32(0)-1)) як адреса<Предмет>;
  }

  зовнішня дія предмет_числа_менше(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо перевірити чи число менше пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      якщо предмет_числа.значення < аргумент_предмет_числа.значення {
        вернути М.предмет_логічного_так як адреса<Предмет>;
      }
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо перевірити чи число менше") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_більше(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо перевірити чи число більше пусто") як адреса<Предмет>);
    } інакше якщо аргумент.тип == М.предмет_структури_число {
      ціль аргумент_предмет_числа = аргумент як адреса<ПредметЧисла>;
      якщо предмет_числа.значення > аргумент_предмет_числа.значення {
        вернути М.предмет_логічного_так як адреса<Предмет>;
      }
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо перевірити чи число більше") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_містить(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_мінусове(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_числа(М, д64(0) - предмет_числа.значення) як адреса<Предмет>;
  }

  зовнішня дія предмет_числа_число(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_числа як адреса<Предмет>;
  }

  зовнішня дія предмет_числа_збільшити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_числа(М, предмет_числа.значення + 1.0) як адреса<Предмет>;
  }

  зовнішня дія предмет_числа_зменшити(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_числа(М, предмет_числа.значення - 1.0) як адреса<Предмет>;
  }

  зовнішня дія предмет_числа_текст(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль значення_ю8 = ю8 { 0, пусто };
    мавка_система_перетворити_д64_в_ю8(предмет_числа.значення, значення_ю8::адреса);
    змінна ціль значення = т8 { 0, пусто };
    якщо перекодувати_ю8_в_т8(М, значення_ю8, значення::адреса, ні) == ні {
      // потім: помилка
    }
    ціль предмет_тексту = створити_предмет_тексту(М, значення) як адреса<Предмет>;
    звільнити_памʼять(М, значення_ю8.дані);
    звільнити_памʼять(М, значення.дані);
    вернути предмет_тексту;
  }

  зовнішня дія предмет_числа_юнікод(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль значення_ю8 = ю8 { 0, пусто };
    мавка_система_перетворити_д64_в_ю8(предмет_числа.значення, значення_ю8::адреса);
    ціль предмет_тексту = створити_предмет_юнікоду_з_ю8(М, значення_ю8) як адреса<Предмет>;
    звільнити_памʼять(М, значення_ю8.дані);
    вернути предмет_тексту;
  }

  зовнішня дія предмет_числа_отримати_елемент(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_змінити_елемент(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, ключ: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_видалити_елемент(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_отримати_перебір(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_числа_отримати_діапазон(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо до == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Створити діапазон чисел можна лише для двох чисел") як адреса<Предмет>);
    }
    якщо до.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Створити діапазон чисел можна лише для двох чисел") як адреса<Предмет>);
    }
    вернути створити_предмет_діапазону_чисел(М, предмет_числа, включно, до як адреса<ПредметЧисла>) як адреса<Предмет>;
  }
}