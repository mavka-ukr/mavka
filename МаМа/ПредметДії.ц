взяти визначення МаМа;

секція МаМа {
  місцева дія виділити_предмет_дії(М: адреса<Машина>, назва: адреса<Назва>, параметри: адреса<Реєстр<адреса<Назва>, Параметр>>, середовище_створення: адреса<Середовище>, код: адреса<Код>, типи_результату: Накопичувач<адреса<ПредметСтруктури>>): адреса<ПредметДії> {
    ціль предмет_дії = виділити_предмет<ПредметДії>(М, М.предмет_структури_Дія);

    предмет_дії.властивості = зробити_реєстр<адреса<Назва>, адреса<Предмет>>(М, перевірити_чи_назви_рівні);
    предмет_дії.назва = назва;
    предмет_дії.параметри = параметри;
    предмет_дії.середовище_створення = середовище_створення;
    предмет_дії.код = код;
    предмет_дії.типи_результату = типи_результату;

    вернути предмет_дії;
  }

  місцева дія звільнити_предмет_дії(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Предмет>>(М, предмет_дії.властивості);
    звільнити_реєстр_параметрів(М, предмет_дії.параметри);
    звільнити_значення_накопичувача<адреса<ПредметСтруктури>>(М, предмет_дії.типи_результату);
    звільнити(М, предмет_дії);
  }

  місцева дія предмет_дії_виконати(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, предмет_я: адреса<Предмет>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    ціль середовище_виконання_дії = виділити_середовище(М, предмет_дії.середовище_створення);
    середовище_виконання_дії.предмет_я = предмет_я;
    покласти_в_накопичувач<ЕлементІсторіїВиконання>(М, М.історія::адреса, ЕлементІсторіїВиконання {
      предмет_дії = предмет_дії,
      середовище = середовище_виконання_дії,
    });
    змінна ціль результат_виконання: адреса<Предмет> = пусто;
    змінна ціль пп: позитивне = 0;
    поки пп < предмет_дії.параметри.розмір {
      ціль елемент_параметра = предмет_дії.параметри.елементи[пп];
      ціль назва_параметра = елемент_параметра.ключ;
      ціль параметр = елемент_параметра.значення;
      змінна ціль аргумент: адреса<Предмет> = пусто;
      якщо аргументи == пусто {
        якщо іменовані_аргументи == пусто {
          якщо параметр.код_значення_за_замовчуванням == пусто {
            якщо параметр.типи.розмір != 0 { // потім: просто перевіряти чи параметр може бути пусто
              увімкнути_стан_падіння(М, пусто);
              вернути виділити_предмет_тексту_помилки_пропущено_аргумент(М, назва_параметра);
            }
          } інакше {
            ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, середовище_виконання_дії, параметр.код_значення_за_замовчуванням);
            якщо М.стан_падіння == позитивне(так) {
              результат_виконання = результат_виконання_значення_за_замовчуванням;
              стрибнути вихід;
            }
            аргумент = результат_виконання_значення_за_замовчуванням;
          }
        } інакше {
          ціль елемент_аргумента_з_назвою = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, іменовані_аргументи, назва_параметра);
          якщо елемент_аргумента_з_назвою == пусто {
            якщо параметр.код_значення_за_замовчуванням == пусто {
              якщо параметр.типи.розмір != 0 { // потім: просто перевіряти чи параметр може бути пусто
                увімкнути_стан_падіння(М, пусто);
                вернути виділити_предмет_тексту_помилки_пропущено_аргумент(М, назва_параметра);
              }
            } інакше {
              ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, середовище_виконання_дії, параметр.код_значення_за_замовчуванням);
              якщо М.стан_падіння == позитивне(так) {
                результат_виконання = результат_виконання_значення_за_замовчуванням;
                стрибнути вихід;
              }
              аргумент = результат_виконання_значення_за_замовчуванням;
            }
          } інакше {
            аргумент = елемент_аргумента_з_назвою.значення;
          }
        }
      } інакше {
        якщо іменовані_аргументи == пусто {
          якщо аргументи.розмір > пп {
            аргумент = аргументи.дані[пп];
          } інакше {
            якщо параметр.код_значення_за_замовчуванням == пусто {
              якщо параметр.типи.розмір != 0 { // потім: просто перевіряти чи параметр може бути пусто
                увімкнути_стан_падіння(М, пусто);
                вернути виділити_предмет_тексту_помилки_пропущено_аргумент(М, назва_параметра);
              }
            } інакше {
              ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, середовище_виконання_дії, параметр.код_значення_за_замовчуванням);
              якщо М.стан_падіння == позитивне(так) {
                результат_виконання = результат_виконання_значення_за_замовчуванням;
                стрибнути вихід;
              }
              аргумент = результат_виконання_значення_за_замовчуванням;
            }
          }
        } інакше {
          ціль елемент_аргумента_з_назвою = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, іменовані_аргументи, назва_параметра);
          якщо елемент_аргумента_з_назвою == пусто {
            якщо аргументи.розмір > пп {
              аргумент = аргументи.дані[пп];
            } інакше {
              якщо параметр.код_значення_за_замовчуванням == пусто {
                якщо параметр.типи.розмір != 0 { // потім: просто перевіряти чи параметр може бути пусто
                  увімкнути_стан_падіння(М, пусто);
                  вернути виділити_предмет_тексту_помилки_пропущено_аргумент(М, назва_параметра);
                }
              } інакше {
                ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, середовище_виконання_дії, параметр.код_значення_за_замовчуванням);
                якщо М.стан_падіння == позитивне(так) {
                  результат_виконання = результат_виконання_значення_за_замовчуванням;
                  стрибнути вихід;
                }
                аргумент = результат_виконання_значення_за_замовчуванням;
              }
            }
          } інакше {
            аргумент = елемент_аргумента_з_назвою.значення;
          }
        }
      }
      якщо параметр.типи.розмір > 0 {
        змінна ціль пп: позитивне = 0;
        змінна ціль знайдено_тип: логічне = ні;
        поки пп < параметр.типи.розмір {
          якщо перевірити_чи_предмет_є(аргумент, М, параметр.типи.дані[пп]) {
            знайдено_тип = так;
          }
          пп += 1;
        }
        якщо знайдено_тип == ні {
          увімкнути_стан_падіння(М, пусто);
          якщо аргумент == пусто {
            результат_виконання = виділити_предмет_тексту_помилки_невірний_тип_аргумента(М, назва_параметра, параметр.типи, пусто);
            стрибнути вихід;
          } інакше {
            результат_виконання = виділити_предмет_тексту_помилки_невірний_тип_аргумента(М, назва_параметра, параметр.типи, аргумент.тип);
            стрибнути вихід;
          }
        }
      }
      змінити_в_середовищі(М, середовище_виконання_дії, назва_параметра, аргумент);
      пп += 1;
    }
    результат_виконання = виконати_код_в_середовищі(М, середовище_виконання_дії, предмет_дії.код);
    вихід:
    забрати_з_накопичувача<ЕлементІсторіїВиконання>(М, М.історія::адреса);
    вернути результат_виконання;
  }

  місцева дія предмет_дії_отримати_властивість(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, назва: адреса<Назва>): предмет_або_стан_падіння {
    якщо назва == М.БН.С.назва {
      якщо предмет_дії.назва == пусто {
        вернути пусто;
      }
      вернути виділити_предмет_з_назви(М, предмет_дії.назва);
    }
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, предмет_дії.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = предмет_дії.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія предмет_дії_змінити_властивість(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    якщо назва == М.БН.С.назва {
      вернути пусто;
    }
    якщо перевірити_чи_назва_чародія(М, назва) {
      вернути пусто;
    }
    змінити_в_реєстрі<адреса<Назва>, адреса<Предмет>>(М, предмет_дії.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія предмет_дії_видалити_властивість(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, назва: адреса<Назва>): предмет_або_стан_падіння {
    якщо видалити_з_реєстру<адреса<Назва>, адреса<Предмет>>(М, предмет_дії.властивості::адреса, назва) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_дії_виконати_властивість(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Предмет>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Предмет>>>): предмет_або_стан_падіння {
    ціль предмет_властивості = предмет_дії_отримати_властивість(предмет_дії, М, назва_властивості);
    якщо М.стан_падіння == позитивне(так) {
      вернути предмет_властивості;
    }
    вернути предмет_виконати(предмет_властивості, М, предмет_дії як адреса<Предмет>, аргументи, іменовані_аргументи);
  }

  місцева дія предмет_дії_отримати_елемент(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, ключ: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо отримати елемент з дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_змінити_елемент(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, ключ: адреса<Предмет>, значення: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо змінити елемент в дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_видалити_елемент(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, ключ: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо видалити елемент з дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_отримати_перебір(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо отримати перебір з дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_додати(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати додавання для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_відняти(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_помножити(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати множення для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_поділити(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати ділення для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_отримати_остачу_ділення(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_отримати_частку_ділення(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати отримання частки ділення для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_піднести_до_степеня(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_зсунути_вліво(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_зсунути_вправо(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_зсунути_вправо_зі_заповненням(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_двійкове_і(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_двійкове_або(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_двійкове_виключне_або(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_двійкове_не(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_більше(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_менше(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_рівно(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    якщо перевірити_чи_предмет_дії_рівно(предмет_дії, М, аргумент) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_дії_містить(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на місткість для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_є(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): предмет_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    якщо аргумент.тип != М.предмет_структури_Структура {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    якщо перевірити_чи_предмет_дії_є(предмет_дії, М, аргумент як адреса<ПредметСтруктури>) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_дії_відʼємне(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_числове(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати числове для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_заперечити(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>): предмет_або_стан_падіння {
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_дії_збільшити(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати збільшення для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_зменшити(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>): предмет_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_предмет_тексту_з_ю8(М, ю8"Неможливо виконати зменшення для дії") як адреса<Предмет>;
  }

  місцева дія предмет_дії_текст(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>): предмет_або_стан_падіння {
    вернути виділити_предмет_тексту_з_ю8(М, ю8"<дія>") як адреса<Предмет>;
  }

  місцева дія перевірити_чи_предмет_дії_рівно(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, аргумент: адреса<Предмет>): логічне {
    ціль предмет = предмет_дії як адреса<Предмет>;
    якщо предмет == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_предмет_дії_є(предмет_дії: адреса<ПредметДії>, М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>): логічне {
    якщо предмет_структури == М.предмет_структури_Дія {
      вернути так;
    }
    вернути ні;
  }
}