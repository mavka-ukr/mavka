взяти визначення МаМа;

секція МаМа {
  дія записати_параметр_структури_Структура_назва(М: адреса<Машина>) {
    ціль допустимі_структури_типу_параметра_назва = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_назва[0] = М.предмет_структури_текст;
    ціль тип_параметра_назва = створити_предмет_типу(М, так, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_назва });
    ціль параметр_назва = створити_предмет_параметра(М, назва(М, "назва"), тип_параметра_назва, пусто);
    М.предмет_структури_Структура.параметри.дані[0] = параметр_назва;
  }

  дія записати_параметр_структури_Структура_предок(М: адреса<Машина>) {
    ціль допустимі_структури_типу_параметра_предок = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_предок[0] = М.предмет_структури_Структура;
    ціль тип_параметра_предок = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_предок });
    ціль параметр_предок = створити_предмет_параметра(М, назва(М, "предок"), тип_параметра_предок, пусто);
    М.предмет_структури_Структура.параметри.дані[1] = параметр_предок;
  }

  дія записати_параметр_структури_Структура_параметри(М: адреса<Машина>) {
    ціль допустимі_структури_типу_параметра_параметри = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_параметри[0] = М.предмет_структури_список;
    ціль тип_параметра_параметри = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_параметри });
    ціль параметр_параметри = створити_предмет_параметра(М, назва(М, "параметри"), тип_параметра_параметри, пусто);
    М.предмет_структури_Структура.параметри.дані[2] = параметр_параметри;
  }

  дія рідна_дія_дізнатись(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль аргумент_значення: адреса<Предмет> = пусто;
    змінна ціль знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    якщо знайдено_аргумент_значення == ні {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Пропущено аргумент \"значення\"") як адреса<Предмет>);
    }
    якщо аргумент_значення == пусто {
      вернути пусто;
    }
    вернути аргумент_значення.тип як адреса<Предмет>;
  }

  дія записати_предмет_рідної_спец_дії_структури_Структура_дізнатись(М: адреса<Машина>) {
    ціль предмет_дії_дізнатись = створити_предмет_рідної_дії(М, назва(М, "дізнатись"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_дізнатись, пусто, пусто, пусто);
    предмет_структури_змінити_властивість(М, М.предмет_структури_Структура, назва(М, "дізнатись"), предмет_дії_дізнатись як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
    якщо М.стан_падіння == позитивне(так) {
      ПОМЕРТИ(М, "Не вдалось змінити властивість структури Структура \"дізнатись\"");
      вернути;
    }
  }

  зовнішня дія заповнити_предмет_структури_Структура(М: адреса<Машина>) {
    // параметри
    записати_параметр_структури_Структура_назва(М);
    записати_параметр_структури_Структура_предок(М);
    записати_параметр_структури_Структура_параметри(М);

    // спец дії
    записати_предмет_рідної_спец_дії_структури_Структура_дізнатись(М);
  }

  зовнішня дія створити_предмет_структури(М: адреса<Машина>, назва: адреса<ПредметТексту>, предок: адреса<ПредметСтруктури>, параметри: Послідовність<адреса<ПредметПараметра>>): адреса<ПредметСтруктури> {
    ціль предмет_структури = створити_предмет<ПредметСтруктури>(М, М.предмет_структури_Структура);
    предмет_структури.властивості = зробити_реєстр_з_даними<адреса<ПредметТексту>, адреса<Предмет>, Машина>(М, М, перевірити_чи_предмети_назви_рівні);
    предмет_структури.середовище_створення = пусто;
    предмет_структури.назва = назва;
    предмет_структури.предок = предок;
    якщо предок == пусто {
      предмет_структури.параметри = параметри;
    } інакше {
      змінна ціль нові_параметри = зробити_накопичувач<адреса<ПредметПараметра>>(М);
      змінна ціль п: позитивне = 0;
      поки п < предок.параметри.розмір {
        ціль параметр = предок.параметри.дані[п];
        покласти_в_накопичувач<адреса<ПредметПараметра>>(М, нові_параметри::адреса, параметр);
        п += 1;
      }
      п = 0;
      поки п < параметри.розмір {
        ціль параметр = параметри.дані[п];
        покласти_в_накопичувач<адреса<ПредметПараметра>>(М, нові_параметри::адреса, параметр);
        п += 1;
      }
      предмет_структури.параметри = Послідовність<адреса<ПредметПараметра>> { нові_параметри.розмір, нові_параметри.дані };
      звільнити_памʼять(М, параметри.дані);
    }
    предмет_структури.методи = зробити_реєстр_з_даними<адреса<ПредметТексту>, адреса<ПредметДії>, Машина>(М, М, перевірити_чи_предмети_назви_рівні);
    предмет_структури.власні_дії = зробити_реєстр_з_даними<адреса<ПредметТексту>, адреса<ПредметДії>, Машина>(М, М, перевірити_чи_предмети_назви_рівні);
    предмет_структури.заборонити_наслідування = позитивне(ні);
    вернути предмет_структури;
  }

  зовнішня дія предмет_структури_виконати(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_структури == М.предмет_структури_байти {
      вернути виконати_предмет_структури_байти(М, кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
    }
    якщо предмет_структури == М.предмет_структури_ДіапазонЧисел {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо створити предмет діапазону чисел") як адреса<Предмет>);
    }
    якщо предмет_структури == М.предмет_структури_Дія {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо створити предмет дії") як адреса<Предмет>);
    }
    якщо предмет_структури == М.предмет_структури_Код {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо створити предмет коду") як адреса<Предмет>);
    }
    якщо предмет_структури == М.предмет_структури_логічне {
      вернути виконати_предмет_структури_логічне(М, кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
    }
    ціль складений_предмет = створити_складений_предмет(М, предмет_структури);
    змінна ціль п: позитивне = 0;
    поки п < предмет_структури.параметри.розмір {
      ціль параметр = предмет_структури.параметри.дані[п];
      змінна ціль значення_аргумента: адреса<Предмет> = пусто;
      якщо знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, параметр.назва, значення_аргумента::адреса) {
      } інакше якщо кількість_аргументів > п {
        значення_аргумента = аргументи[п];
      } інакше {
        якщо параметр.код_значення == пусто {
          якщо параметр.тип_ != пусто {
            якщо параметр.тип_.може_бути_пусто == позитивне(ні) {
              вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Пропущено аргумент") як адреса<Предмет>);
            }
          }
        } інакше {
          ціль результат = виконати_код(М, параметр.код_значення, предмет_структури.середовище_створення);
          якщо М.стан_падіння == позитивне(так) {
            вернути результат;
          } інакше {
            значення_аргумента = результат;
          }
        }
      }
      якщо параметр.тип_ != пусто {
        якщо перевірити_тип(М, значення_аргумента, параметр.тип_) == ні {
          вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Невірний тип аргумента") як адреса<Предмет>);
        }
      }
      змінити_в_реєстрі<адреса<ПредметТексту>, адреса<Предмет>>(М, складений_предмет.властивості::адреса, параметр.назва, значення_аргумента);
      п += 1;
    }
    п = 0;
    поки п < предмет_структури.власні_дії.елементи.розмір {
      змінна ціль елемент = предмет_структури.власні_дії.елементи.дані[п];
      змінити_в_реєстрі<адреса<ПредметТексту>, адреса<Предмет>>(М, складений_предмет.властивості::адреса, елемент.ключ, привласнити_дію(М, елемент.значення, складений_предмет як адреса<Предмет>) як адреса<Предмет>);
      п += 1;
    }
    вернути складений_предмет як адреса<Предмет>;
  }

  зовнішня дія предмет_структури_отримати_властивість(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо перевірити_чи_предмети_назви_рівні(М, назва, МаМа::назва(М, "назва")) {
      вернути предмет_структури.назва як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, МаМа::назва(М, "предок")) {
      вернути предмет_структури.предок як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, МаМа::назва(М, "параметри")) {
      ціль предмет_списку_параметрів = створити_предмет_списку(М, предмет_структури.параметри.розмір);
      змінна ціль п: позитивне = 0;
      поки п < предмет_структури.параметри.розмір {
        покласти_в_накопичувач<адреса<Предмет>>(М, предмет_списку_параметрів.елементи::адреса, предмет_структури.параметри.дані[п] як адреса<Предмет>);
        п += 1;
      }
      вернути предмет_списку_параметрів як адреса<Предмет>;
    }
    ціль елемент_властивості = ЕлементРеєстру<адреса<ПредметТексту>, адреса<Предмет>> { пусто, пусто };
    якщо знайти_в_реєстрі<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_структури.властивості::адреса, назва, елемент_властивості::адреса) {
      вернути елемент_властивості.значення;
    }
    якщо предмет_структури.тип != пусто {
      змінна ціль метод: адреса<ПредметДії> = пусто;
      якщо знайти_метод_в_структурі(М, предмет_структури.тип, назва, метод::адреса) {
        вернути метод як адреса<Предмет>;
      }
    }
    вернути пусто;
  }

  зовнішня дія предмет_структури_змінити_властивість(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінити_в_реєстрі<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_структури.властивості::адреса, назва, значення);
  }

  зовнішня дія предмет_структури_видалити_властивість(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_виконати_властивість(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль предмет_властивості = предмет_структури_отримати_властивість(М, предмет_структури, назва, місцезнаходження);
    якщо М.стан_падіння == позитивне(так) {
      вернути предмет_властивості;
    }
    вернути предмет_виконати(М, предмет_властивості, предмет_структури як адреса<Предмет>, кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
  }

  зовнішня дія предмет_структури_додати(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_відняти(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_помножити(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_поділити(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_остача(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_частка(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_степінь(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_зсунути_вліво(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_зсунути_вправо(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_зсунути_вправо_зі_заповненням(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_двійкове_і(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_двійкове_або(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_двійкове_виключне_або(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_двійкове_заперечення(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_менше(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_більше(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_містить(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_записати_метод(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, метод: адреса<ПредметДії>): предмет_або_стан_падіння {
    змінити_в_реєстрі<адреса<ПредметТексту>, адреса<ПредметДії>>(М, предмет_структури.методи::адреса, назва, метод);
    вернути метод як адреса<Предмет>;
  }

  зовнішня дія предмет_структури_записати_власну_дію(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, метод: адреса<ПредметДії>): предмет_або_стан_падіння {
    змінити_в_реєстрі<адреса<ПредметТексту>, адреса<ПредметДії>>(М, предмет_структури.власні_дії::адреса, назва, метод);
    вернути метод як адреса<Предмет>;
  }

  зовнішня дія предмет_структури_мінусове(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_тексту(М, "<структура>") як адреса<Предмет>;
  }

  зовнішня дія предмет_структури_плюсове(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_тексту(М, "<структура>") як адреса<Предмет>;
  }

  зовнішня дія предмет_структури_збільшити(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_тексту(М, "<структура>") як адреса<Предмет>;
  }

  зовнішня дія предмет_структури_зменшити(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_тексту(М, "<структура>") як адреса<Предмет>;
  }

  зовнішня дія предмет_структури_текст(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_тексту(М, "<структура>") як адреса<Предмет>;
  }

  зовнішня дія предмет_структури_юнікод(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_юнікоду_з_ю8(М, ю8"<структура>") як адреса<Предмет>;
  }

  зовнішня дія предмет_структури_отримати_елемент(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_змінити_елемент(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, ключ: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_видалити_елемент(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_отримати_перебір(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }

  зовнішня дія предмет_структури_отримати_діапазон(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Не втілено") як адреса<Предмет>);
  }
}