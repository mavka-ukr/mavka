взяти визначення МаМа;

секція МаМа {
  дія предмет_списку_виконати_метод_чародія_містить(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль п: позитивне = 0;
    поки п < предмет_списку.елементи.розмір {
      якщо перевірити_чи_предмети_рівні(М, предмет_списку.елементи.дані[п], значення) {
        вернути М.предмет_логічного_так як адреса<Предмет>;
      }
      п += 1;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  дія предмет_списку_виконати_метод_чародія_текст(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_тексту(М, "<список>") як адреса<Предмет>;
  }

  дія предмет_списку_виконати_метод_чародія_юнікод(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_юнікоду_з_ю8(М, ю8"<список>") як адреса<Предмет>;
  }

  дія предмет_списку_виконати_метод_чародія_отримати_елемент(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, ключ: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль позиція = позитивне(ключ.значення);
    якщо предмет_списку.елементи.розмір > позиція {
      вернути предмет_списку.елементи.дані[позиція];
    }
    вернути пусто;
  }

  дія предмет_списку_виконати_метод_чародія_змінити_елемент(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, ключ: адреса<ПредметЧисла>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль позиція = позитивне(ключ.значення);
    якщо предмет_списку.елементи.розмір > позиція {
      предмет_списку.елементи.дані[позиція] = значення;
    } інакше {
      розширити_накопичувач<адреса<Предмет>>(М, предмет_списку.елементи::адреса, позиція + 1, пусто);
      предмет_списку.елементи.дані[позиція] = значення;
    }
    вернути пусто;
  }

  дія предмет_списку_виконати_метод_чародія_видалити_елемент(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, ключ: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль позиція = позитивне(ключ.значення);
    якщо видалити_з_накопичувача<адреса<Предмет>>(М, предмет_списку.елементи::адреса, позиція) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  дія предмет_списку_виконати_метод_чародія_перебір(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_перебору_списку(М, предмет_списку) як адреса<Предмет>;
  }
}

секція МаМа {
  дія предмет_списку_виконати_метод_додати(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, елемент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    покласти_в_накопичувач<адреса<Предмет>>(М, предмет_списку.елементи::адреса, елемент);
    вернути створити_предмет_числа(М, д64(предмет_списку.елементи.розмір)) як адреса<Предмет>;
  }
  
  дія предмет_списку_виконати_метод_забрати(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_списку.елементи.розмір > 0 {
      предмет_списку.елементи.розмір -= 1;
      вернути предмет_списку.елементи.дані[предмет_списку.елементи.розмір];
    }
    вернути пусто;
  }
  
  дія предмет_списку_виконати_метод_фільтрувати(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, перевіряч: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль притримувач = покласти_притримувач(М);
    ціль новий_список = створити_предмет_списку(М, 0);
    притримати(М, притримувач, новий_список як адреса<Предмет>);
    змінна ціль п: позитивне = 0;
    поки п < предмет_списку.елементи.розмір {
      ціль елемент = предмет_списку.елементи.дані[п];
      ціль аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
      аргументи[0] = елемент;
      аргументи[1] = предмет_списку як адреса<Предмет>;
      ціль результат = предмет_виконати(М, перевіряч, пусто, 2, аргументи, 0, пусто, місцезнаходження);
      звільнити_памʼять(М, аргументи);
      якщо М.стан_падіння == позитивне(так) {
        забрати_притримувач(М);
        вернути результат;
      }
      якщо перевірити_чи_предмет_виражається_логічним_так(М, результат) {
        покласти_в_накопичувач<адреса<Предмет>>(М, новий_список.елементи::адреса, елемент);
      }
      п += 1;
    }
    забрати_притримувач(М);
    вернути новий_список як адреса<Предмет>;
  }

  дія предмет_списку_виконати_метод_знайти(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, перевіряч: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль п: позитивне = 0;
    поки п < предмет_списку.елементи.розмір {
      ціль елемент = предмет_списку.елементи.дані[п];
      ціль аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
      аргументи[0] = елемент;
      аргументи[1] = предмет_списку як адреса<Предмет>;
      ціль результат = предмет_виконати(М, перевіряч, пусто, 2, аргументи, 0, пусто, місцезнаходження);
      звільнити_памʼять(М, аргументи);
      якщо М.стан_падіння == позитивне(так) {
        вернути результат;
      }
      якщо перевірити_чи_предмет_виражається_логічним_так(М, результат) {
        вернути елемент;
      }
      п += 1;
    }
    вернути пусто;
  }

  дія предмет_списку_виконати_метод_знайти_позицію(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, перевіряч: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль п: позитивне = 0;
    поки п < предмет_списку.елементи.розмір {
      ціль елемент = предмет_списку.елементи.дані[п];
      ціль аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
      аргументи[0] = елемент;
      аргументи[1] = предмет_списку як адреса<Предмет>;
      ціль результат = предмет_виконати(М, перевіряч, пусто, 2, аргументи, 0, пусто, місцезнаходження);
      звільнити_памʼять(М, аргументи);
      якщо М.стан_падіння == позитивне(так) {
        вернути результат;
      }
      якщо перевірити_чи_предмет_виражається_логічним_так(М, результат) {
        вернути створити_предмет_числа(М, д64(п)) як адреса<Предмет>;
      }
      п += 1;
    }
    вернути створити_предмет_числа(М, д64(0) - д64(1)) як адреса<Предмет>;
  }

  дія предмет_списку_виконати_метод_перетворити(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, перетворювач: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль притримувач = покласти_притримувач(М);
    ціль новий_список = створити_предмет_списку(М, 0);
    притримати(М, притримувач, новий_список як адреса<Предмет>);
    змінна ціль п: позитивне = 0;
    поки п < предмет_списку.елементи.розмір {
      ціль елемент = предмет_списку.елементи.дані[п];
      ціль аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
      аргументи[0] = елемент;
      аргументи[1] = предмет_списку як адреса<Предмет>;
      ціль результат = предмет_виконати(М, перетворювач, пусто, 2, аргументи, 0, пусто, місцезнаходження);
      звільнити_памʼять(М, аргументи);
      якщо М.стан_падіння == позитивне(так) {
        забрати_притримувач(М);
        вернути результат;
      }
      покласти_в_накопичувач<адреса<Предмет>>(М, новий_список.елементи::адреса, результат);
      п += 1;
    }
    забрати_притримувач(М);
    вернути новий_список як адреса<Предмет>;
  }

  дія предмет_списку_виконати_метод_обернути(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль притримувач = покласти_притримувач(М);
    ціль новий_список = створити_предмет_списку(М, 0);
    притримати(М, притримувач, новий_список як адреса<Предмет>);
    змінна ціль п: позитивне = предмет_списку.елементи.розмір;
    поки п > 0 {
      п -= 1;
      ціль елемент = предмет_списку.елементи.дані[п];
      покласти_в_накопичувач<адреса<Предмет>>(М, новий_список.елементи::адреса, елемент);
    }
    забрати_притримувач(М);
    вернути новий_список як адреса<Предмет>;
  }
}

секція МаМа {
  дія рідна_дія_метода_чародія_містить(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_містить\" не для списку") як адреса<Предмет>);
    }
    змінна ціль аргумент_значення: адреса<МаМа::Предмет> = пусто;
    змінна ціль знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = МаМа::знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, МаМа::назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_чародія_містить(М, предмет_списку, аргумент_значення, місцезнаходження);
  }

  дія записати_метод_структури_список_чародія_містить(М: адреса<Машина>) {
    ціль параметр_значення = МаМа::створити_предмет_параметра(М, МаМа::назва(М, "значення"), пусто, пусто);
    ціль дані_параметрів_дії_дізнатись_структуру = виділити_памʼять<адреса<МаМа::ПредметПараметра>>(М, 1);
    дані_параметрів_дії_дізнатись_структуру[0] = параметр_значення;
    ціль предмет_дії_метода_чародія_містить = створити_предмет_рідної_дії(М, назва(М, "чародія_містить"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_дії_дізнатись_структуру }, пусто, рідна_дія_метода_чародія_містить, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "чародія_містить"), предмет_дії_метода_чародія_містить);
  }

  дія рідна_дія_метода_чародія_отримати_елемент(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_отримати_елемент\" не для списку") як адреса<Предмет>);
    }
    змінна ціль аргумент_ключ: адреса<МаМа::Предмет> = пусто;
    змінна ціль знайдено_аргумент_ключ = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_ключ = МаМа::знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, МаМа::назва(М, "ключ"), аргумент_ключ::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_ключ == ні {
        аргумент_ключ = аргументи[0];
        знайдено_аргумент_ключ = так;
      }
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_чародія_отримати_елемент(М, предмет_списку, аргумент_ключ як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_список_чародія_отримати_елемент(М: адреса<Машина>) {
    ціль допустимі_структури_типу_параметра_ключ = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_ключ[0] = М.предмет_структури_число;
    ціль тип_параметра_ключ = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_ключ });
    ціль параметр_ключ = створити_предмет_параметра(М, назва(М, "ключ"), тип_параметра_ключ, пусто);
    ціль дані_параметрів_дії_дізнатись_структуру = виділити_памʼять<адреса<МаМа::ПредметПараметра>>(М, 1);
    дані_параметрів_дії_дізнатись_структуру[0] = параметр_ключ;
    ціль предмет_дії_метода_чародія_отримати_елемент = створити_предмет_рідної_дії(М, назва(М, "чародія_отримати_елемент"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_дії_дізнатись_структуру }, пусто, рідна_дія_метода_чародія_отримати_елемент, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "чародія_отримати_елемент"), предмет_дії_метода_чародія_отримати_елемент);
  }

  дія рідна_дія_метода_чародія_змінити_елемент(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_змінити_елемент\" не для списку") як адреса<Предмет>);
    }
    змінна ціль аргумент_ключ: адреса<МаМа::Предмет> = пусто;
    змінна ціль знайдено_аргумент_ключ = ні;
    змінна ціль аргумент_значення: адреса<МаМа::Предмет> = пусто;
    змінна ціль знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_ключ = МаМа::знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, МаМа::назва(М, "ключ"), аргумент_ключ::адреса);
      знайдено_аргумент_значення = МаМа::знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, МаМа::назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_ключ == ні {
        аргумент_ключ = аргументи[0];
        знайдено_аргумент_ключ = так;
      }
      якщо кількість_аргументів > 1 {
        якщо знайдено_аргумент_значення == ні {
          аргумент_значення = аргументи[1];
          знайдено_аргумент_значення = так;
        }

      }
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_чародія_змінити_елемент(М, предмет_списку, аргумент_ключ як адреса<ПредметЧисла>, аргумент_значення, місцезнаходження);
  }

  дія записати_метод_структури_список_чародія_змінити_елемент(М: адреса<Машина>) {
    ціль допустимі_структури_типу_параметра_ключ = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_ключ[0] = М.предмет_структури_число;
    ціль тип_параметра_ключ = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_ключ });
    ціль параметр_ключ = створити_предмет_параметра(М, назва(М, "ключ"), тип_параметра_ключ, пусто);
    ціль параметр_значення = МаМа::створити_предмет_параметра(М, МаМа::назва(М, "значення"), пусто, пусто);
    ціль дані_параметрів_дії_дізнатись_структуру = виділити_памʼять<адреса<МаМа::ПредметПараметра>>(М, 2);
    дані_параметрів_дії_дізнатись_структуру[0] = параметр_ключ;
    дані_параметрів_дії_дізнатись_структуру[1] = параметр_значення;
    ціль предмет_дії_метода_чародія_змінити_елемент = створити_предмет_рідної_дії(М, назва(М, "чародія_змінити_елемент"), Послідовність<адреса<ПредметПараметра>> { 2, дані_параметрів_дії_дізнатись_структуру }, пусто, рідна_дія_метода_чародія_змінити_елемент, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "чародія_змінити_елемент"), предмет_дії_метода_чародія_змінити_елемент);
  }

  дія рідна_дія_метода_чародія_видалити_елемент(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_видалити_елемент\" не для списку") як адреса<Предмет>);
    }
    змінна ціль аргумент_ключ: адреса<МаМа::Предмет> = пусто;
    змінна ціль знайдено_аргумент_ключ = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_ключ = МаМа::знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, МаМа::назва(М, "ключ"), аргумент_ключ::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_ключ == ні {
        аргумент_ключ = аргументи[0];
        знайдено_аргумент_ключ = так;
      }
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_чародія_видалити_елемент(М, предмет_списку, аргумент_ключ як адреса<ПредметЧисла>, місцезнаходження);
  }

  дія записати_метод_структури_список_чародія_видалити_елемент(М: адреса<Машина>) {
    ціль допустимі_структури_типу_параметра_ключ = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_ключ[0] = М.предмет_структури_число;
    ціль тип_параметра_ключ = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_ключ });
    ціль параметр_ключ = створити_предмет_параметра(М, назва(М, "ключ"), тип_параметра_ключ, пусто);
    ціль дані_параметрів_дії_дізнатись_структуру = виділити_памʼять<адреса<МаМа::ПредметПараметра>>(М, 1);
    дані_параметрів_дії_дізнатись_структуру[0] = параметр_ключ;
    ціль предмет_дії_метода_чародія_видалити_елемент = створити_предмет_рідної_дії(М, назва(М, "чародія_видалити_елемент"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_дії_дізнатись_структуру }, пусто, рідна_дія_метода_чародія_видалити_елемент, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "чародія_видалити_елемент"), предмет_дії_метода_чародія_видалити_елемент);
  }

  дія рідна_дія_метода_чародія_текст(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_текст\" не для списку") як адреса<Предмет>);
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_чародія_текст(М, предмет_списку, місцезнаходження);
  }

  дія записати_метод_структури_список_чародія_текст(М: адреса<Машина>) {
    ціль предмет_дії_метода_чародія_текст = створити_предмет_рідної_дії(М, назва(М, "чародія_текст"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_текст, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "чародія_текст"), предмет_дії_метода_чародія_текст);
  }

  дія рідна_дія_метода_чародія_юнікод(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_юнікод\" не для списку") як адреса<Предмет>);
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_чародія_юнікод(М, предмет_списку, місцезнаходження);
  }

  дія записати_метод_структури_список_чародія_юнікод(М: адреса<Машина>) {
    ціль предмет_дії_метода_чародія_юнікод = створити_предмет_рідної_дії(М, назва(М, "чародія_юнікод"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_юнікод, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "чародія_юнікод"), предмет_дії_метода_чародія_юнікод);
  }

  дія записати_параметр_структури_список_довжина(М: адреса<Машина>) {
    ціль допустимі_структури_типу_параметра_довжина = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_довжина[0] = М.предмет_структури_число;
    ціль тип_параметра_довжина = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_довжина });
    ціль параметр_довжина = створити_предмет_параметра(М, назва(М, "довжина"), тип_параметра_довжина, пусто);
    М.предмет_структури_список.параметри.дані[0] = параметр_довжина;
  }

  дія рідна_дія_метода_чародія_перебір(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_перебір\" не для списку") як адреса<Предмет>);
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_чародія_перебір(М, предмет_списку, місцезнаходження);
  }

  дія записати_метод_структури_список_чародія_перебір(М: адреса<Машина>) {
    ціль предмет_дії_метода_чародія_перебір = створити_предмет_рідної_дії(М, назва(М, "чародія_перебір"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_чародія_перебір, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "чародія_перебір"), предмет_дії_метода_чародія_перебір);
  }


  дія рідна_дія_метода_додати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль аргумент_значення: адреса<Предмет> = пусто;
    змінна ціль знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    якщо знайдено_аргумент_значення == ні {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Пропущено аргумент \"значення\"") як адреса<Предмет>);
    }
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"додати\" не для списку") як адреса<Предмет>);
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_додати(М, предмет_списку, аргумент_значення, місцезнаходження);
  }

  дія записати_метод_структури_список_додати(М: адреса<Машина>) {
    ціль параметр_значення = створити_предмет_параметра(М, назва(М, "значення"), пусто, пусто);
    ціль дані_параметрів_метода_додати = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_додати[0] = параметр_значення;
    ціль предмет_дії_метода_додати = створити_предмет_рідної_дії(М, назва(М, "додати"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_додати }, пусто, рідна_дія_метода_додати, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "додати"), предмет_дії_метода_додати);
  }

  дія рідна_дія_метода_забрати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"забрати\" не для списку") як адреса<Предмет>);
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_забрати(М, предмет_списку, місцезнаходження);
  }

  дія записати_метод_структури_список_забрати(М: адреса<Машина>) {
    ціль предмет_дії_метода_забрати = створити_предмет_рідної_дії(М, назва(М, "забрати"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_забрати, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "забрати"), предмет_дії_метода_забрати);
  }

  дія рідна_дія_метода_фільтрувати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль аргумент_перевіряч: адреса<Предмет> = пусто;
    змінна ціль знайдено_аргумент_перевіряч = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_перевіряч = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "перевіряч"), аргумент_перевіряч::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_перевіряч == ні {
        аргумент_перевіряч = аргументи[0];
        знайдено_аргумент_перевіряч = так;
      }
    }
    якщо знайдено_аргумент_перевіряч == ні {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Пропущено аргумент \"перевіряч\"") як адреса<Предмет>);
    }
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"фільтрувати\" не для списку") як адреса<Предмет>);
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_фільтрувати(М, предмет_списку, аргумент_перевіряч, місцезнаходження);
  }

  дія записати_метод_структури_список_фільтрувати(М: адреса<Машина>) {
    ціль параметр_перевіряч = створити_предмет_параметра(М, назва(М, "перевіряч"), пусто, пусто);
    ціль дані_параметрів_метода_фільтрувати = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_фільтрувати[0] = параметр_перевіряч;
    ціль предмет_дії_метода_фільтрувати = створити_предмет_рідної_дії(М, назва(М, "фільтрувати"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_фільтрувати }, пусто, рідна_дія_метода_фільтрувати, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "фільтрувати"), предмет_дії_метода_фільтрувати);
  }

  дія рідна_дія_метода_знайти(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль аргумент_перевіряч: адреса<Предмет> = пусто;
    змінна ціль знайдено_аргумент_перевіряч = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_перевіряч = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "перевіряч"), аргумент_перевіряч::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_перевіряч == ні {
        аргумент_перевіряч = аргументи[0];
        знайдено_аргумент_перевіряч = так;
      }
    }
    якщо знайдено_аргумент_перевіряч == ні {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Пропущено аргумент \"перевіряч\"") як адреса<Предмет>);
    }
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"знайти\" не для списку") як адреса<Предмет>);
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_знайти(М, предмет_списку, аргумент_перевіряч, місцезнаходження);
  }

  дія записати_метод_структури_список_знайти(М: адреса<Машина>) {
    ціль параметр_перевіряч = створити_предмет_параметра(М, назва(М, "перевіряч"), пусто, пусто);
    ціль дані_параметрів_метода_знайти = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_знайти[0] = параметр_перевіряч;
    ціль предмет_дії_метода_знайти = створити_предмет_рідної_дії(М, назва(М, "знайти"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_знайти }, пусто, рідна_дія_метода_знайти, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "знайти"), предмет_дії_метода_знайти);
  }

  дія рідна_дія_метода_знайти_позицію(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль аргумент_перевіряч: адреса<Предмет> = пусто;
    змінна ціль знайдено_аргумент_перевіряч = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_перевіряч = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "перевіряч"), аргумент_перевіряч::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_перевіряч == ні {
        аргумент_перевіряч = аргументи[0];
        знайдено_аргумент_перевіряч = так;
      }
    }
    якщо знайдено_аргумент_перевіряч == ні {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Пропущено аргумент \"перевіряч\"") як адреса<Предмет>);
    }
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"знайти_позицію\" не для списку") як адреса<Предмет>);
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_знайти_позицію(М, предмет_списку, аргумент_перевіряч, місцезнаходження);
  }

  дія записати_метод_структури_список_знайти_позицію(М: адреса<Машина>) {
    ціль параметр_перевіряч = створити_предмет_параметра(М, назва(М, "перевіряч"), пусто, пусто);
    ціль дані_параметрів_метода_знайти_позицію = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_знайти_позицію[0] = параметр_перевіряч;
    ціль предмет_дії_метода_знайти_позицію = створити_предмет_рідної_дії(М, назва(М, "знайти_позицію"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_знайти_позицію }, пусто, рідна_дія_метода_знайти_позицію, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "знайти_позицію"), предмет_дії_метода_знайти_позицію);
  }

  дія рідна_дія_метода_перетворити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль аргумент_перетворювач: адреса<Предмет> = пусто;
    змінна ціль знайдено_аргумент_перетворювач = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_перетворювач = знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, назва(М, "перетворювач"), аргумент_перетворювач::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_перетворювач == ні {
        аргумент_перетворювач = аргументи[0];
        знайдено_аргумент_перетворювач = так;
      }
    }
    якщо знайдено_аргумент_перетворювач == ні {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Пропущено аргумент \"перетворювач\"") як адреса<Предмет>);
    }
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"перетворити\" не для списку") як адреса<Предмет>);
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_перетворити(М, предмет_списку, аргумент_перетворювач, місцезнаходження);
  }

  дія записати_метод_структури_список_перетворити(М: адреса<Машина>) {
    ціль параметр_перетворювач = створити_предмет_параметра(М, назва(М, "перетворювач"), пусто, пусто);
    ціль дані_параметрів_метода_перетворити = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_перетворити[0] = параметр_перетворювач;
    ціль предмет_дії_метода_перетворити = створити_предмет_рідної_дії(М, назва(М, "перетворити"), Послідовність<адреса<ПредметПараметра>> { 1, дані_параметрів_метода_перетворити }, пусто, рідна_дія_метода_перетворити, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "перетворити"), предмет_дії_метода_перетворити);
  }

  дія рідна_дія_метода_обернути(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо предмет_я.тип != М.предмет_структури_список {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію \"обернути\" не для списку") як адреса<Предмет>);
    }
    ціль предмет_списку = предмет_я як адреса<ПредметСписку>;
    вернути предмет_списку_виконати_метод_обернути(М, предмет_списку, місцезнаходження);
  }

  дія записати_метод_структури_список_обернути(М: адреса<Машина>) {
    ціль предмет_дії_метода_обернути = створити_предмет_рідної_дії(М, назва(М, "обернути"), Послідовність<адреса<ПредметПараметра>> { 0, пусто }, пусто, рідна_дія_метода_обернути, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_список, назва(М, "обернути"), предмет_дії_метода_обернути);
  }

  зовнішня дія заповнити_предмет_структури_список(М: адреса<Машина>) {
    // параметри
    записати_параметр_структури_список_довжина(М);

    // методи
    записати_метод_структури_список_чародія_містить(М);
    записати_метод_структури_список_чародія_текст(М);
    записати_метод_структури_список_чародія_юнікод(М);
    записати_метод_структури_список_чародія_отримати_елемент(М);
    записати_метод_структури_список_чародія_змінити_елемент(М);
    записати_метод_структури_список_чародія_видалити_елемент(М);
    записати_метод_структури_список_чародія_перебір(М);
    записати_метод_структури_список_додати(М);
    записати_метод_структури_список_забрати(М);
    записати_метод_структури_список_фільтрувати(М);
    записати_метод_структури_список_знайти(М);
    записати_метод_структури_список_знайти_позицію(М);
    записати_метод_структури_список_перетворити(М);
    записати_метод_структури_список_обернути(М);
  }

  зовнішня дія створити_предмет_списку(М: адреса<Машина>, вмісткість: позитивне): адреса<ПредметСписку> {
    ціль предмет_списку = створити_предмет<ПредметСписку>(М, М.предмет_структури_список);
    предмет_списку.елементи = зробити_накопичувач<адреса<Предмет>>(М);
    вернути предмет_списку;
  }

  зовнішня дія створити_предмет_списку_1(М: адреса<Машина>, елементи: Послідовність<адреса<Предмет>>): адреса<ПредметСписку> {
    ціль предмет_списку = створити_предмет<ПредметСписку>(М, М.предмет_структури_список);
    предмет_списку.елементи = зробити_накопичувач<адреса<Предмет>>(М);
    змінна ціль п: позитивне = 0;
    поки п < елементи.розмір {
      покласти_в_накопичувач<адреса<Предмет>>(М, предмет_списку.елементи::адреса, елементи.дані[п]);
      п += 1;
    }
    вернути предмет_списку;
  }

  зовнішня дія предмет_списку_виконати(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_виконати"), кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
  }

  зовнішня дія предмет_списку_отримати_властивість(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо перевірити_чи_предмети_назви_рівні(М, назва, МаМа::назва(М, "довжина")) {
      вернути створити_предмет_числа(М, д64(предмет_списку.елементи.розмір)) як адреса<Предмет>;
    }
    змінна ціль метод: адреса<ПредметДії> = пусто;
    якщо знайти_метод_в_структурі(М, предмет_списку.тип, назва, метод::адреса) {
      вернути метод як адреса<Предмет>;
    }
    вернути пусто;
  }

  зовнішня дія предмет_списку_змінити_властивість(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, назва: адреса<ПредметТексту>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути пусто;
  }

  зовнішня дія предмет_списку_видалити_властивість(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  зовнішня дія предмет_списку_виконати_властивість(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, назва: адреса<ПредметТексту>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<ІменованийАргумент>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль предмет_властивості = предмет_списку_отримати_властивість(М, предмет_списку, назва, місцезнаходження);
    якщо М.стан_падіння == позитивне(так) {
      вернути предмет_властивості;
    }
    якщо предмет_властивості == пусто {
      змінна ціль накопичувач_т8_помилки = зробити_накопичувач<п8>(М);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "Неможливо виконати пусту властивість предмета списку \"");
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, назва.значення);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "\"");
      ціль предмет_помилки = створити_предмет_тексту(М, т8 { накопичувач_т8_помилки.розмір, накопичувач_т8_помилки.дані });
      звільнити_памʼять(М, накопичувач_т8_помилки.дані);
      вернути результат_стан_падіння(М, місцезнаходження, предмет_помилки як адреса<Предмет>);
    }
    вернути предмет_виконати(М, предмет_властивості, предмет_списку як адреса<Предмет>, кількість_аргументів, аргументи, кількість_іменованих_аргументів, іменовані_аргументи, місцезнаходження);
  }

  зовнішня дія предмет_списку_додати(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_додати"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_відняти(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_відняти"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_помножити(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_помножити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_поділити(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_поділити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_остача(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_остача"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_частка(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_частка"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_степінь(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_степінь"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_зсунути_вліво(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_зсунути_вліво"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_зсунути_вправо(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_зсунути_вправо"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_зсунути_вправо_зі_заповненням(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_беззнаковий_зсув_вправо"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_двійкове_і(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_двійкове_і"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_двійкове_або(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_двійкове_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_двійкове_виключне_або(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_двійкове_виключне_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_двійкове_заперечення(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_двійкове_заперечення"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_менше(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_менше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_більше(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_більше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_містить(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_метод_чародія_містить(М, предмет_списку, аргумент, місцезнаходження);
  }

  зовнішня дія предмет_списку_мінусове(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_мінусове"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_число(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_число"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_збільшити(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_збільшити"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_зменшити(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_зменшити"), 0, пусто, 0, пусто, місцезнаходження);
  }

  зовнішня дія предмет_списку_текст(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_метод_чародія_текст(М, предмет_списку, місцезнаходження);
  }

  зовнішня дія предмет_списку_юнікод(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути предмет_списку_виконати_метод_чародія_юнікод(М, предмет_списку, місцезнаходження);
  }

  зовнішня дія предмет_списку_отримати_елемент(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо ключ == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ отримання елемента зі списку має бути числом") як адреса<Предмет>);
    }
    якщо ключ.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ отримання елемента зі списку має бути числом") як адреса<Предмет>);
    }
    ціль предмет_числа = ключ як адреса<ПредметЧисла>;
    вернути предмет_списку_виконати_метод_чародія_отримати_елемент(М, предмет_списку, предмет_числа, місцезнаходження);
  }

  зовнішня дія предмет_списку_змінити_елемент(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, ключ: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо ключ == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ для зміни елемента списку має бути числом") як адреса<Предмет>);
    }
    якщо ключ.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ для зміни елемента списку має бути числом") як адреса<Предмет>);
    }
    ціль предмет_числа_ключа = ключ як адреса<ПредметЧисла>;
    вернути предмет_списку_виконати_метод_чародія_змінити_елемент(М, предмет_списку, предмет_числа_ключа, значення, місцезнаходження);
  }

  зовнішня дія предмет_списку_видалити_елемент(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    якщо ключ == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ видалення елемента зі списку має бути числом") як адреса<Предмет>);
    }
    якщо ключ.тип != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ видалення елемента зі списку має бути числом") як адреса<Предмет>);
    }
    ціль предмет_числа = ключ як адреса<ПредметЧисла>;
    вернути предмет_списку_виконати_метод_чародія_видалити_елемент(М, предмет_списку, предмет_числа, місцезнаходження);
  }

  зовнішня дія предмет_списку_отримати_перебір(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    вернути створити_предмет_перебору_списку(М, предмет_списку) як адреса<Предмет>;
  }

  зовнішня дія предмет_списку_отримати_діапазон(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
    якщо включно {
      аргументи[0] = М.предмет_логічного_так як адреса<Предмет>;
    } інакше {
      аргументи[0] = М.предмет_логічного_ні як адреса<Предмет>;
    }
    аргументи[1] = до;
    ціль результат = предмет_списку_виконати_властивість(М, предмет_списку, назва(М, "чародія_діапазон"), 2, аргументи, 0, пусто, місцезнаходження);
    звільнити_памʼять(М, аргументи);
    вернути результат;
  }
}