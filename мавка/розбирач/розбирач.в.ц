взяти визначення мавка;

секція мавка {
  секція розбирач {
    структура можливо<Т>;
    структура Система;

    структура можливо<Т> {
      заповнено: позитивне;
      значення: Т;
    }

    структура ПомилкаРозборуНаСлова {
      позиція_символа: позитивне;
      рядок: позитивне;
      стовпець: позитивне;
    }

    структура ПомилкаРозборуНаСполуки {
      позиція_слова: позитивне;
      рядок: позитивне;
      стовпець: позитивне;
    }

    стала ВидСловаАбо = 0;
    стала ВидСловаБільше = 1;
    стала ВидСловаВзяти = 2;
    стала ВидСловаВласна = 3;
    стала ВидСловаВпасти = 4;
    стала ВидСловаВидалити = 5;
    стала ВидСловаВнутрішня = 6;
    стала ВидСловаВластивість = 7;
    стала ВидСловаВернути = 8;
    стала ВидСловаДія = 9;
    стала ВидСловаДати = 10;
    стала ВидСловаЄ = 11;
    стала ВидСловаЗовнішня = 12;
    стала ВидСловаЗловити = 13;
    стала ВидСловаІ = 14;
    стала ВидСловаІнакше = 15;
    стала ВидСловаКомпозиція = 16;
    стала ВидСловаКінець = 17;
    стала ВидСловаМодуль = 18;
    стала ВидСловаМенше = 19;
    стала ВидСловаМістить = 20;
    стала ВидСловаМісцева = 21;
    стала ВидСловаНе = 22;
    стала ВидСловаПоки = 23;
    стала ВидСловаПерелік = 24;
    стала ВидСловаПеребрати = 26;
    стала ВидСловаРівно = 27;
    стала ВидСловаСтруктура = 28;
    стала ВидСловаСпробувати = 29;
    стала ВидСловаСпец = 30;
    стала ВидСловаТривала = 31;
    стала ВидСловаЦикл = 32;
    стала ВидСловаЦе = 33;
    стала ВидСловаЧекати = 34;
    стала ВидСловаЯк = 35;
    стала ВидСловаЯкщо = 36;

    стала ВидСловаСимволРівно = 37;
    стала ВидСловаСимволБільше = 38;
    стала ВидСловаСимволМенше = 39;
    стала ВидСловаСимволКрапка = 40;
    стала ВидСловаСимволПлюс = 41;
    стала ВидСловаСимволМінус = 42;
    стала ВидСловаСимволПомножити = 43;
    стала ВидСловаСимволПоділити = 44;
    стала ВидСловаСимволЗалишку = 45;
    стала ВидСловаСимволПірамідка = 46;
    стала ВидСловаСимволІ = 47;
    стала ВидСловаСимволАбо = 48;
    стала ВидСловаСимволВідкритаДужка = 49;
    стала ВидСловаСимволЗакритаДужка = 50;
    стала ВидСловаСимволКвадратнаВідкритаДужка = 51;
    стала ВидСловаСимволКвадратнаЗакритаДужка = 52;
    стала ВидСловаСимволЗнакПитання = 53;
    стала ВидСловаСимволДвокрапка = 54;
    стала ВидСловаСимволТильда = 55;
    стала ВидСловаСимволОднолапка = 56;
    стала ВидСловаСимволДволапка = 57;
    стала ВидСловаСимволЗнакОклику = 58;
    стала ВидСловаСимволКома = 59;
    стала ВидСловаСимволМіжряд = 60;

    стала ВидСловаЧисло = 61;
    стала ВидСловаСимвол = 63;
    стала ВидСловаТекст = 64;
    стала ВидСловаБагаторядковийТекст = 65;
    стала ВидСловаКоментар = 66;
    стала ВидСловаБагаторядковийКоментар = 67;
    стала ВидСловаІдентифікатор = 68;

    стала ВидСловаПочатокЗбитогоТексту = 69;
    стала ВидСловаРоздільникЗбитогоТексту = 70;
    стала ВидСловаКінецьЗбитогоТексту = 71;
    стала ВидСловаЧастинаЗбитогоТексту = 72;

    стала ВидСловаКІНЕЦЬСЛІВ = 100;

    стала ЮНІКОД_РОЗРИВ = 10;
    стала ЮНІКОД_ПРОПУСК = 32;
    стала ЮНІКОД_ДВОЛАПКА = 34;
    стала ЮНІКОД_ВІДСОТОК = 37;
    стала ЮНІКОД_ЛАПКА = 39;
    стала ЮНІКОД_ВІДКРИТА_ДУЖКА = 40;
    стала ЮНІКОД_ЗАКРИТА_ДУЖКА = 41;
    стала ЮНІКОД_КРАПКА = 46;
    стала ЮНІКОД_0 = 48;
    стала ЮНІКОД_1 = 49;
    стала ЮНІКОД_2 = 50;
    стала ЮНІКОД_3 = 51;
    стала ЮНІКОД_4 = 52;
    стала ЮНІКОД_5 = 53;
    стала ЮНІКОД_6 = 54;
    стала ЮНІКОД_7 = 55;
    стала ЮНІКОД_8 = 56;
    стала ЮНІКОД_9 = 57;
    стала ЮНІКОД_ОБЕРНЕНА_ПОХИЛА = 92;
    стала ЮНІКОД_англійська_ен = 110;

    структура ПозиціяСлова {
      позиція_символа: позитивне;
      рядок: позитивне;
      стовпець: позитивне;
    }

    структура Слово {
      вид: позитивне;
      позиція_початку: ПозиціяСлова;
      позиція_кінця: ПозиціяСлова;
      значення: ю8;
    }

    структура Слова {
      розмір: позитивне;
      дані: памʼять<Слово>;
    }

    стала ВидСполукиНіщо = 0;
    стала ВидСполукиВизначити = 1;
    стала ВидСполукиЗвернутись = 2;
    стала ВидСполукиОтримати = 3;
    стала ВидСполукиОтриматиЕлемент = 5;
    стала ВидСполукиЗмінити = 6;
    стала ВидСполукиЗмінитиЕлемент = 8;
    стала ВидСполукиВиконати = 9;
    стала ВидСполукиДія = 12;
    стала ВидСполукиСтруктура = 13;
    стала ВидСполукиЧисло = 18;
    стала ВидСполукиТекст = 19;
    стала ВидСполукиОперація = 21;
    стала ВидСполукиЯкщо = 22;
    стала ВидСполукиПоки = 23;
    стала ВидСполукиВернути = 24;
    стала ВидСполукиЗначенняЯкщо = 27;
    стала ВидСполукиСамоОперація = 29;
    стала ВидСполукиВзяти = 33;
    стала ВидСполукиСпробувати = 34;
    стала ВидСполукиВпасти = 35;
    стала ВидСполукиДати = 36;
    стала ВидСполукиМодуль = 37;
    стала ВидСполукиСписок = 38;
    стала ВидСполукиСловник = 39;
    стала ВидСполукиСимвол = 40;
    стала ВидСполукиПеребрати = 41;
    стала ВидСполукиЦикл = 42;
    стала ВидСполукиВизначитиЗзовні = 43;
    стала ВидСполукиВічнийЦикл = 45;
    стала ВидСполукиВидалити = 46;
    стала ВидСполукиВидалитиВластивість = 47;
    стала ВидСполукиВидалитиЕлемент = 48;
    стала ВидСполукиЧекати = 49;
    стала ВидСполукиДіапазон = 50;
    стала ВидСполукиЗбитийТекст = 51; // 51

    стала ВидОпераціїМноження = 1;
    стала ВидОпераціїДілення = 2;
    стала ВидОпераціїМодуль = 3;
    стала ВидОпераціїДодавання = 4;
    стала ВидОпераціїВіднімання = 5;
    стала ВидОпераціїЗсувВліво = 6;
    стала ВидОпераціїЗсувВправо = 7;
    стала ВидОпераціїЗсувВправоЗнаковий = 8;
    стала ВидОпераціїМенше = 9;
    стала ВидОпераціїБільше = 10;
    стала ВидОпераціїМеншеРівне = 11;
    стала ВидОпераціїБільшеРівне = 12;
    стала ВидОпераціїРівне = 13;
    стала ВидОпераціїНерівне = 14;
    стала ВидОпераціїДІ = 15;
    стала ВидОпераціїВАБО = 16;
    стала ВидОпераціїДАБО = 17;
    стала ВидОпераціїІ = 18;
    стала ВидОпераціїАБО = 19;
    стала ВидОпераціїДіленняНаціло = 20;
    стала ВидОпераціїПіднесенняДоСтепеня = 21;
    стала ВидОпераціїМістить = 22;
    стала ВидОпераціїНеМістить = 23;
    стала ВидОпераціїЄ = 24;
    стала ВидОпераціїНеЄ = 25;

    стала ВидСамоОпераціїЛогічнеНі = 1;
    стала ВидСамоОпераціїДвійковеНі = 2;
    стала ВидСамоОпераціїПлюс = 3;
    стала ВидСамоОпераціїМінус = 4;

    структура Місцезнаходження;
    структура Сполука;
    структура Сполуки;

    структура Ідентифікатор;
    структура Параметр;
    структура Аргумент;
    структура ЕлементДати;
    структура ЕлементВзяти;
    структура ЕлементСловника;

    структура ДаніСполукиВизначити;
    структура ДаніСполукиЗвернутись;
    структура ДаніСполукиОтримати;
    структура ДаніСполукиОтриматиЕлемент;
    структура ДаніСполукиЗмінити;
    структура ДаніСполукиЗмінитиЕлемент;
    структура ДаніСполукиВиконати;
    структура ДаніСполукиДія;
    структура ДаніСполукиСтруктура;
    структура ДаніСполукиЧисло;
    структура ДаніСполукиТекст;
    структура ДаніСполукиСимвол;
    структура ДаніСполукиОперація;
    структура ДаніСполукиЯкщо;
    структура ДаніСполукиПоки;
    структура ДаніСполукиПеребрати;
    структура ДаніСполукиЦикл;
    структура ДаніСполукиВічнийЦикл;
    структура ДаніСполукиВернути;
    структура ДаніСполукиЗначенняЯкщо;
    структура ДаніСполукиСамоОперація;
    структура ДаніСполукиВзяти;
    структура ДаніСполукиСпробувати;
    структура ДаніСполукиВпасти;
    структура ДаніСполукиДати;
    структура ДаніСполукиМодуль;
    структура ДаніСполукиСписок;
    структура ДаніСполукиСловник;
    структура ДаніСполукиВизначитиЗзовні;
    структура ДаніСполукиВидалити;
    структура ДаніСполукиВидалитиВластивість;
    структура ДаніСполукиВидалитиЕлемент;
    структура ДаніСполукиЧекати;
    структура ДаніСполукиДіапазон;
    структура ДаніСполукиЗбитийТекст;

    структура Сполуки {
      розмір: позитивне;
      дані: памʼять<адреса<Сполука>>;
    }

    структура Місцезнаходження {
      позиція_слова: позитивне;
    }

    структура Ідентифікатор {
      позиція_слова: позитивне;
    }

    структура Тип {
      кількість_гілок: позитивне;
      сполуки: памʼять<адреса<Сполука>>;
    }

    структура Параметр {
      ідентифікатор: Ідентифікатор;
      тип: можливо<Тип>;
      значення: адреса<Сполука>;
      місцезнаходження: Місцезнаходження;
    }

    структура Аргумент {
      ідентифікатор: можливо<Ідентифікатор>;
      значення: адреса<Сполука>;
      місцезнаходження: Місцезнаходження;
    }

    структура ЕлементДати {
      ідентифікатор: Ідентифікатор;
      ідентифікатор_як: можливо<Ідентифікатор>;
      місцезнаходження: Місцезнаходження;
    }

    структура ЕлементВзяти {
      ідентифікатор: Ідентифікатор;
      ідентифікатор_як: можливо<Ідентифікатор>;
      місцезнаходження: Місцезнаходження;
    }

    структура ЕлементСловника {
      ключ: адреса<Сполука>;
      значення: адреса<Сполука>;
      місцезнаходження: Місцезнаходження;
    }

    структура ДаніСполукиВизначити {
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиЗвернутись {
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиОтримати {
      предмет: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиОтриматиЕлемент {
      предмет: адреса<Сполука>;
      ключ: адреса<Сполука>;
    }

    структура ДаніСполукиЗмінити {
      предмет: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиЗмінитиЕлемент {
      предмет: адреса<Сполука>;
      ключ: адреса<Сполука>;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиВиконати {
      предмет: адреса<Сполука>;
      кількість_аргументів: позитивне;
      аргументи: памʼять<Аргумент>;
    }

    структура ДаніСполукиДія {
      тривала: позитивне;
      власна: позитивне;
      структура_: адреса<Сполука>;
      ідентифікатор: можливо<Ідентифікатор>;
      кількість_параметрів: позитивне;
      параметри: памʼять<Параметр>;
      тип_результату: можливо<Тип>;
      тіло: Сполуки;
    }

    структура ДаніСполукиСтруктура {
      ідентифікатор: можливо<Ідентифікатор>;
      предок: адреса<Сполука>;
      кількість_параметрів: позитивне;
      параметри: памʼять<Параметр>;
    }

    структура ДаніСполукиЧисло {
      позиція_слова: позитивне;
    }

    структура ДаніСполукиТекст {
      ідентифікатор: можливо<Ідентифікатор>;
      позиція_слова: позитивне;
    }

    структура ДаніСполукиСимвол {
      ідентифікатор: можливо<Ідентифікатор>;
      позиція_слова: позитивне;
    }

    структура ДаніСполукиОперація {
      ліво: адреса<Сполука>;
      операція: позитивне;
      право: адреса<Сполука>;
    }

    структура ДаніСполукиЯкщо {
      умова: адреса<Сполука>;
      тіло: Сполуки;
      тіло_інакше: Сполуки;
    }

    структура ДаніСполукиПоки {
      умова: адреса<Сполука>;
      тіло: Сполуки;
    }

    структура ДаніСполукиПеребрати {
      предмет: адреса<Сполука>;
      ідентифікатор: можливо<Ідентифікатор>;
      тіло: Сполуки;
    }

    структура ДаніСполукиЦикл {
      старт: Сполуки;
      умова: адреса<Сполука>;
      тіло: Сполуки;
      ітерація: Сполуки;
    }

    структура ДаніСполукиВічнийЦикл {
      тіло: Сполуки;
    }

    структура ДаніСполукиВернути {
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиЗначенняЯкщо {
      умова: адреса<Сполука>;
      значення_так: адреса<Сполука>;
      значення_ні: адреса<Сполука>;
    }

    структура ДаніСполукиСамоОперація {
      операція: позитивне;
      предмет: адреса<Сполука>;
    }

    структура ДаніСполукиВзяти {
      тип: можливо<Ідентифікатор>;
      довжина_шляху: позитивне;
      шлях: памʼять<Ідентифікатор>;
      ідентифікатор_як: можливо<Ідентифікатор>;
      кількість_елементів: позитивне;
      елементи: памʼять<ЕлементВзяти>;
    }

    структура ДаніСполукиСпробувати {
      тіло: Сполуки;
      ідентифікатор_зловити: можливо<Ідентифікатор>;
      тіло_зловити: Сполуки;
    }

    структура ДаніСполукиВпасти {
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиДати {
      кількість_елементів: позитивне;
      елементи: памʼять<ЕлементДати>;
    }

    структура ДаніСполукиМодуль {
      ідентифікатор: можливо<Ідентифікатор>;
      тіло: Сполуки;
    }

    структура ДаніСполукиСписок {
      кількість_елементів: позитивне;
      елементи: памʼять<адреса<Сполука>>;
    }

    структура ДаніСполукиСловник {
      кількість_елементів: позитивне;
      елементи: памʼять<ЕлементСловника>;
    }

    структура ДаніСполукиВизначитиЗзовні {
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиВидалити {
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиВидалитиВластивість {
      предмет: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиВидалитиЕлемент {
      предмет: адреса<Сполука>;
      ключ: адреса<Сполука>;
    }

    структура ДаніСполукиЧекати {
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиДіапазон {
      від: адреса<Сполука>;
      до: адреса<Сполука>;
      включно: позитивне;
    }

    структура ДаніСполукиЗбитийТекст {
      ідентифікатор: можливо<Ідентифікатор>;
      кількість_гілок: позитивне;
      сполуки: памʼять<адреса<Сполука>>;
    }

    структура Сполука {
      вид: позитивне;
      дані: ДаніСполукиВизначити | ДаніСполукиЗвернутись | ДаніСполукиОтримати | ДаніСполукиОтриматиЕлемент | ДаніСполукиЗмінити | ДаніСполукиЗмінитиЕлемент | ДаніСполукиВиконати | ДаніСполукиДія | ДаніСполукиСтруктура | ДаніСполукиЧисло | ДаніСполукиТекст | ДаніСполукиСимвол | ДаніСполукиОперація | ДаніСполукиЯкщо | ДаніСполукиПоки | ДаніСполукиПеребрати | ДаніСполукиЦикл | ДаніСполукиВічнийЦикл | ДаніСполукиВернути | ДаніСполукиЗначенняЯкщо | ДаніСполукиСамоОперація | ДаніСполукиВзяти | ДаніСполукиСпробувати | ДаніСполукиВпасти | ДаніСполукиДати | ДаніСполукиМодуль | ДаніСполукиСписок | ДаніСполукиСловник | ДаніСполукиВизначитиЗзовні | ДаніСполукиВидалити | ДаніСполукиВидалитиВластивість | ДаніСполукиВидалитиЕлемент | ДаніСполукиЧекати | ДаніСполукиДіапазон | ДаніСполукиЗбитийТекст;
      місцезнаходження: Місцезнаходження;
    }

    // потім:
    //   - обрахунок стовпця
    //   - виправити місцезнаходження гілок

    місцева дія визначити_розмір_символа_юнікоду(перший_байт: п8): п8;

    місцева дія розібрати_ю8_на_слова(М: адреса<Машина>, значення_ю8: ю8, вихід: адреса<Слова>, вихід_помилки: адреса<ПомилкаРозборуНаСлова>): логічне;
    місцева дія вивести_слово(М: адреса<Машина>, значення_ю8: ю8, слово: Слово);
    місцева дія вивести_слова(М: адреса<Машина>, значення_ю8: ю8, слова: Слова);
    місцева дія звільнити_слова(М: адреса<Машина>, слова: Слова);
    місцева дія звільнити_помилку_розбору_на_слова(М: адреса<Машина>, помилка: ПомилкаРозборуНаСлова);
    місцева дія отримати_ю8_помилки_розбору_на_слова(М: адреса<Машина>, помилка: ПомилкаРозборуНаСлова, вихід: адреса<ю8>): логічне;
    місцева дія отримати_рядок_помилки_розбору_на_слова(М: адреса<Машина>, помилка: ПомилкаРозборуНаСлова): позитивне;
    місцева дія отримати_стовпець_помилки_розбору_на_слова(М: адреса<Машина>, помилка: ПомилкаРозборуНаСлова): позитивне;

    місцева дія отримати_ю8_ідентифікатора(значення_ю8: ю8, слова: Слова, ідентифікатор: Ідентифікатор): ю8;
    місцева дія отримати_ю8_слова(значення_ю8: ю8, слова: Слова, слово: Слово): ю8;
    місцева дія отримати_ю8_тексту(значення_ю8: ю8, слова: Слова, сполука_тексту: адреса<Сполука>): ю8;
    місцева дія отримати_ю8_символу(значення_ю8: ю8, слова: Слова, сполука_символу: адреса<Сполука>): ю8;
    місцева дія отримати_рядок_з_місцезнаходження(значення_ю8: ю8, слова: Слова, місцезнаходження: Місцезнаходження): позитивне;
    місцева дія отримати_стовпець_з_місцезнаходження(значення_ю8: ю8, слова: Слова, місцезнаходження: Місцезнаходження): позитивне;

    місцева дія розібрати_слова_на_сполуки(М: адреса<Машина>, значення_ю8: ю8, слова: Слова, вихід: адреса<Сполуки>, вихід_помилки: адреса<ПомилкаРозборуНаСполуки>): логічне;
    місцева дія вивести_сполуку(М: адреса<Машина>, значення_ю8: ю8, слова: Слова, сполука: адреса<Сполука>);
    місцева дія вивести_сполуки(М: адреса<Машина>, значення_ю8: ю8, слова: Слова, сполуки: Сполуки);
    місцева дія звільнити_сполуки(М: адреса<Машина>, сполуки: Сполуки);
    місцева дія звільнити_помилку_розбору_на_сполуки(М: адреса<Машина>, помилка: ПомилкаРозборуНаСполуки);
    місцева дія отримати_ю8_помилки_розбору_на_сполуки(М: адреса<Машина>, помилка: ПомилкаРозборуНаСполуки, вихід: адреса<ю8>): логічне;
    місцева дія отримати_рядок_помилки_розбору_на_сполуки(М: адреса<Машина>, помилка: ПомилкаРозборуНаСполуки): позитивне;
    місцева дія отримати_стовпець_помилки_розбору_на_сполуки(М: адреса<Машина>, помилка: ПомилкаРозборуНаСполуки): позитивне;
  }
}