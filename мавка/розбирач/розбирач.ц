взяти визначення ./розбирач;

//зовнішня дія putchar(value: char): int;
//зовнішня дія print_long(value: long);
//
//дія вивести_ю8(значення_ю8: ю8) {
//  змінна ціль п: позитивне = 0;
//  поки п < значення_ю8.розмір {
//    putchar(char(значення_ю8.дані[п]));
//    п += 1;
//  }
//}
//
//дія надрукувати_ю8(значення_ю8: ю8) {
//  вивести_ю8(значення_ю8);
//  вивести_ю8(ю8"\n");
//}
//
//дія вивести_ц64(значення: ц64) {
//  print_long(значення);
//}
//
//дія надрукувати_ц64(значення: ц64) {
//  print_long(значення);
//  вивести_ю8(ю8"\n");
//}
//
//дія вивести_п64(значення: п64) {
//  print_long(ц64(значення));
//}
//
//дія надрукувати_п64(значення: п64) {
//  print_long(ц64(значення));
//  вивести_ю8(ю8"\n");
//}
//
//дія ЯТУТ() {
//  надрукувати_ю8(ю8"ЯТУТ!");
//}

секція мавка {
  секція розбирач {
    структура Накопичувач<Т> {
      розмір: позитивне;
      вмісткість: позитивне;
      дані: памʼять<Т>;
    }

    дія зробити_накопичувач<Т>(система: адреса<Система>): Накопичувач<Т> {
      вернути Накопичувач<Т> {
        розмір = 0,
        вмісткість = 0,
        дані = пусто
      };
    }

    дія покласти_в_накопичувач<Т>(система: адреса<Система>, накопичувач: адреса<Накопичувач<Т>>, дані: Т) {
      якщо накопичувач.розмір == накопичувач.вмісткість {
        накопичувач.вмісткість += 1;
        накопичувач.дані = перевиділити_памʼять<Т>(система, накопичувач.дані, накопичувач.вмісткість);
      }
      накопичувач.дані[накопичувач.розмір] = дані;
      накопичувач.розмір += 1;
    }

    дія звільнити_дані_накопичувача<Т>(система: адреса<Система>, накопичувач: Накопичувач<Т>) {
      звільнити_памʼять(система, накопичувач.дані);
    }

    дія дописати_ю8_у_вихідний_потік(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8) {
      вихідний_потік.дописати(система, вихідний_потік, значення_ю8.розмір, значення_ю8.дані);
    }
  }
}

секція мавка {
  секція розбирач {
    дія визначити_розмір_символа_юнікоду(перший_байт: п8): п8 {
      якщо (перший_байт & 128) == 0 {
        вернути 1;
      }
      якщо (перший_байт & 224) == 192 {
        вернути 2;
      }
      якщо (перший_байт & 240) == 224 {
        вернути 3;
      }
      якщо (перший_байт & 248) == 240 {
        вернути 4;
      }
      вернути 0;
    }

    дія виділити_копію_ю8(система: адреса<Система>, вхід: ю8, вихід: адреса<ю8>): логічне {
      ціль дані = виділити_памʼять<п8>(система, вхід.розмір);
      змінна ціль п: позитивне = 0;
      поки п < вхід.розмір {
        дані[п] = вхід.дані[п];
        п += 1;
      }
      вихід::вміст = ю8 { вхід.розмір, дані };
      вернути так;
    }
  }
}

секція мавка {
  секція розбирач {
    дія перевірити_чи_початок_ідентифікатора(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне;
    дія перевірити_чи_продовження_ідентифікатора(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне;
    дія перевірити_чи_має_ю8_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, значення: ю8, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне;
    дія перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, значення: ю8, вихід_позиції_кінця: адреса<ПозиціяСлова>, вихід_це_ідентифікатор: адреса<логічне>): логічне;
    дія перевірити_чи_число(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне;
    дія перевірити_чи_має_ідентифікатор_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне;

    дія перевірити_чи_початок_ідентифікатора(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне {
      якщо позиція_початку.позиція_символа >= значення_ю8.розмір {
        вернути ні;
      }
      якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"а", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"б", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"в", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"г", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"д", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"е", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"є", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ж", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"з", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"и", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"і", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ї", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"й", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"к", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"л", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"м", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"н", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"о", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"п", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"р", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"с", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"т", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"у", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ф", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"х", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ц", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ч", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ш", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"щ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ь", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ю", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"я", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ґ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"А", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Б", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"В", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Г", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Д", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Е", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Є", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ж", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"З", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"И", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"І", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ї", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Й", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"К", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Л", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"М", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Н", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"О", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"П", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Р", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"С", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Т", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"У", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ф", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Х", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ц", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ч", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ш", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Щ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ь", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ю", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Я", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ґ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"_", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ʼ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"a", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"b", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"c", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"d", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"e", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"f", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"g", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"h", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"i", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"j", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"k", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"l", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"m", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"n", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"o", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"p", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"q", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"r", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"s", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"t", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"u", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"v", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"w", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"x", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"y", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"z", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"A", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"B", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"C", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"D", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"E", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"F", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"G", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"H", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"I", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"J", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"K", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"L", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"M", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"N", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"O", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"P", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Q", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"R", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"S", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"T", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"U", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"V", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"W", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"X", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Y", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Z", вихід_позиції_кінця) {
      } інакше {
        вернути ні;
      }
      вернути так;
    }

    дія перевірити_чи_продовження_ідентифікатора(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне {
      якщо позиція_початку.позиція_символа >= значення_ю8.розмір {
        вернути ні;
      }
      якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"а", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"б", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"в", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"г", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"д", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"е", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"є", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ж", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"з", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"и", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"і", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ї", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"й", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"к", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"л", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"м", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"н", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"о", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"п", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"р", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"с", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"т", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"у", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ф", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"х", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ц", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ч", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ш", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"щ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ь", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ю", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"я", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ґ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"А", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Б", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"В", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Г", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Д", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Е", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Є", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ж", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"З", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"И", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"І", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ї", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Й", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"К", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Л", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"М", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Н", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"О", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"П", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Р", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"С", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Т", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"У", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ф", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Х", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ц", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ч", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ш", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Щ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ь", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ю", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Я", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ґ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"_", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ʼ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"0", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"1", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"2", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"3", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"4", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"5", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"6", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"7", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"8", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"9", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"a", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"b", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"c", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"d", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"e", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"f", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"g", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"h", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"i", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"j", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"k", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"l", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"m", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"n", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"o", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"p", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"q", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"r", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"s", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"t", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"u", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"v", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"w", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"x", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"y", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"z", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"A", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"B", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"C", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"D", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"E", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"F", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"G", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"H", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"I", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"J", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"K", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"L", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"M", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"N", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"O", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"P", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Q", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"R", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"S", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"T", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"U", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"V", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"W", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"X", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Y", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Z", вихід_позиції_кінця) {
      } інакше {
        вернути ні;
      }
      вернути так;
    }

    дія перевірити_чи_має_ю8_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, значення: ю8, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне {
      якщо позиція_початку.позиція_символа >= значення_ю8.розмір {
        вернути ні;
      }
      вихід_позиції_кінця::вміст = позиція_початку;
      змінна ціль п: позитивне = 0;
      поки п < значення.розмір {
        ціль розмір_символа = визначити_розмір_символа_юнікоду(значення.дані[п]);
        якщо розмір_символа == 1 {
          якщо (позиція_початку.позиція_символа + п) >= значення_ю8.розмір {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п] != значення.дані[п] {
            вернути ні;
          }
          якщо значення.дані[п] == UNICODE_NEWLINE {
            вихід_позиції_кінця.позиція_символа = позиція_початку.позиція_символа + п;
            вихід_позиції_кінця.рядок += 1;
          } інакше {
            вихід_позиції_кінця.позиція_символа = позиція_початку.позиція_символа + п;
            вихід_позиції_кінця.рядок = позиція_початку.рядок;
          }
          п += 1;
        } інакше якщо розмір_символа == 2 {
          якщо (позиція_початку.позиція_символа + п + 1) >= значення_ю8.розмір {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п] != значення.дані[п] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1] != значення.дані[п + 1] {
            вернути ні;
          }
          вихід_позиції_кінця.позиція_символа = позиція_початку.позиція_символа + п + 1;
          вихід_позиції_кінця.рядок = позиція_початку.рядок;
          п += 2;
        } інакше якщо розмір_символа == 3 {
          якщо (позиція_початку.позиція_символа + п + 1 + 1) >= значення_ю8.розмір {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п] != значення.дані[п] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1] != значення.дані[п + 1] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1 + 1] != значення.дані[п + 1 + 1] {
            вернути ні;
          }
          вихід_позиції_кінця.позиція_символа = позиція_початку.позиція_символа + п + 1 + 1;
          вихід_позиції_кінця.рядок = позиція_початку.рядок;
          п += 3;
        } інакше якщо розмір_символа == 4 {
          якщо (позиція_початку.позиція_символа + п + 1 + 1 + 1) >= значення_ю8.розмір {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п] != значення.дані[п] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1] != значення.дані[п + 1] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1 + 1] != значення.дані[п + 1 + 1] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1 + 1 + 1] != значення.дані[п + 1 + 1 + 1] {
            вернути ні;
          }
          вихід_позиції_кінця.позиція_символа = позиція_початку.позиція_символа + п + 1 + 1 + 1;
          вихід_позиції_кінця.рядок = позиція_початку.рядок;
          п += 4;
        } інакше {
          вернути ні;
        }
      }
      вернути так;
    }

    дія перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, значення: ю8, вихід_позиції_кінця: адреса<ПозиціяСлова>, вихід_це_ідентифікатор: адреса<логічне>): логічне {
      якщо позиція_початку.позиція_символа >= значення_ю8.розмір {
        вернути ні;
      }
      вихід_позиції_кінця::вміст = позиція_початку;
      змінна ціль п: позитивне = 0;
      поки п < значення.розмір {
        ціль розмір_символа = визначити_розмір_символа_юнікоду(значення.дані[п]);
        якщо розмір_символа == 1 {
          якщо (позиція_початку.позиція_символа + п) >= значення_ю8.розмір {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п] != значення.дані[п] {
            вернути ні;
          }
          вихід_позиції_кінця.позиція_символа = позиція_початку.позиція_символа + п;
          вихід_позиції_кінця.рядок = позиція_початку.рядок;
          п += 1;
        } інакше якщо розмір_символа == 2 {
          якщо (позиція_початку.позиція_символа + п + 1) >= значення_ю8.розмір {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п] != значення.дані[п] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1] != значення.дані[п + 1] {
            вернути ні;
          }
          вихід_позиції_кінця.позиція_символа = позиція_початку.позиція_символа + п + 1;
          вихід_позиції_кінця.рядок = позиція_початку.рядок;
          п += 2;
        } інакше якщо розмір_символа == 3 {
          якщо (позиція_початку.позиція_символа + п + 1 + 1) >= значення_ю8.розмір {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п] != значення.дані[п] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1] != значення.дані[п + 1] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1 + 1] != значення.дані[п + 1 + 1] {
            вернути ні;
          }
          вихід_позиції_кінця.позиція_символа = позиція_початку.позиція_символа + п + 1 + 1;
          вихід_позиції_кінця.рядок = позиція_початку.рядок;
          п += 3;
        } інакше якщо розмір_символа == 4 {
          якщо (позиція_початку.позиція_символа + п + 1 + 1 + 1) >= значення_ю8.розмір {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п] != значення.дані[п] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1] != значення.дані[п + 1] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1 + 1] != значення.дані[п + 1 + 1] {
            вернути ні;
          }
          якщо значення_ю8.дані[позиція_початку.позиція_символа + п + 1 + 1 + 1] != значення.дані[п + 1 + 1 + 1] {
            вернути ні;
          }
          вихід_позиції_кінця.позиція_символа = позиція_початку.позиція_символа + п + 1 + 1 + 1;
          вихід_позиції_кінця.рядок = позиція_початку.рядок;
          п += 4;
        } інакше {
          вернути ні;
        }
      }
      якщо (позиція_початку.позиція_символа + п) >= значення_ю8.розмір {
        вернути так;
      }
      змінна ціль пкп = ПозиціяСлова { 0, 0, 0 };
      якщо перевірити_чи_продовження_ідентифікатора(система, значення_ю8, ПозиціяСлова { позиція_початку.позиція_символа + п, вихід_позиції_кінця.рядок, вихід_позиції_кінця.стовпець }, пкп::адреса) {
        вихід_це_ідентифікатор::вміст = так;
        вернути ні;
      }
      вернути так;
    }

    дія перевірити_чи_продовження_0ш(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне {
      якщо позиція_початку.позиція_символа >= значення_ю8.розмір {
        вернути ні;
      }
      якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"а", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"б", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"в", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"г", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"д", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"е", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"А", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Б", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"В", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Г", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Д", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Е", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"0", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"1", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"2", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"3", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"4", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"5", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"6", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"7", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"8", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"9", вихід_позиції_кінця) {
      } інакше {
        вернути ні;
      }
      вернути так;
    }

    дія перевірити_чи_продовження_0д(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне {
      якщо позиція_початку.позиція_символа >= значення_ю8.розмір {
        вернути ні;
      }
      якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"0", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"1", вихід_позиції_кінця) {
      } інакше {
        вернути ні;
      }
      вернути так;
    }

    дія перевірити_чи_число(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне {
      змінна ціль має_крапку: логічне = ні;
      змінна ціль має_символ_після_крапки: логічне = ні;
      змінна ціль п = позиція_початку;
      якщо п.позиція_символа >= значення_ю8.розмір {
        вернути ні;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_0 {
        п.позиція_символа += 1;
        якщо п.позиція_символа >= значення_ю8.розмір {
          п.позиція_символа -= 1;
          вихід_позиції_кінця::вміст = п;
          вернути так;
        } інакше {
          якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"ш", п::адреса) {
            п.позиція_символа += 1;
            якщо перевірити_чи_продовження_0ш(система, значення_ю8, п, п::адреса) == ні {
              вернути ні;
            }
            п.позиція_символа += 1;
            поки перевірити_чи_продовження_0ш(система, значення_ю8, п, п::адреса) {
              п.позиція_символа += 1;
            }
            п.позиція_символа -= 1;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"Ш", п::адреса) {
            п.позиція_символа += 1;
            якщо перевірити_чи_продовження_0ш(система, значення_ю8, п, п::адреса) == ні {
              вернути ні;
            }
            п.позиція_символа += 1;
            поки перевірити_чи_продовження_0ш(система, значення_ю8, п, п::адреса) {
              п.позиція_символа += 1;
            }
            п.позиція_символа -= 1;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"д", п::адреса) {
            п.позиція_символа += 1;
            якщо перевірити_чи_продовження_0д(система, значення_ю8, п, п::адреса) == ні {
              вернути ні;
            }
            п.позиція_символа += 1;
            поки перевірити_чи_продовження_0д(система, значення_ю8, п, п::адреса) {
              п.позиція_символа += 1;
            }
            п.позиція_символа -= 1;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"Д", п::адреса) {
            п.позиція_символа += 1;
            якщо перевірити_чи_продовження_0д(система, значення_ю8, п, п::адреса) == ні {
              вернути ні;
            }
            п.позиція_символа += 1;
            поки перевірити_чи_продовження_0д(система, значення_ю8, п, п::адреса) {
              п.позиція_символа += 1;
            }
            п.позиція_символа -= 1;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          }
        }
      } інакше якщо значення_ю8.дані[п.позиція_символа] == UNICODE_1 {
        п.позиція_символа += 1;
      } інакше якщо значення_ю8.дані[п.позиція_символа] == UNICODE_2 {
        п.позиція_символа += 1;
      } інакше якщо значення_ю8.дані[п.позиція_символа] == UNICODE_3 {
        п.позиція_символа += 1;
      } інакше якщо значення_ю8.дані[п.позиція_символа] == UNICODE_4 {
        п.позиція_символа += 1;
      } інакше якщо значення_ю8.дані[п.позиція_символа] == UNICODE_5 {
        п.позиція_символа += 1;
      } інакше якщо значення_ю8.дані[п.позиція_символа] == UNICODE_6 {
        п.позиція_символа += 1;
      } інакше якщо значення_ю8.дані[п.позиція_символа] == UNICODE_7 {
        п.позиція_символа += 1;
      } інакше якщо значення_ю8.дані[п.позиція_символа] == UNICODE_8 {
        п.позиція_символа += 1;
      } інакше якщо значення_ю8.дані[п.позиція_символа] == UNICODE_9 {
        п.позиція_символа += 1;
      } інакше {
        вернути ні;
      }
      перевірка_продовження_числа:
      якщо п.позиція_символа >= значення_ю8.розмір {
        якщо має_крапку {
          якщо має_символ_після_крапки {
            п.позиція_символа -= 1;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше {
            вернути ні;
          }
        }
        п.позиція_символа -= 1;
        вихід_позиції_кінця::вміст = п;
        вернути так;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_DOT {
        якщо має_крапку {
          якщо має_символ_після_крапки {
            п.позиція_символа -= 1;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше {
            п.позиція_символа -= 2;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          }
        } інакше {
          має_крапку = так;
          п.позиція_символа += 1;
          стрибнути перевірка_продовження_числа;
        }
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_0 {
        якщо має_крапку { має_символ_після_крапки = так; }
        п.позиція_символа += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_1 {
        якщо має_крапку { має_символ_після_крапки = так; }
        п.позиція_символа += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_2 {
        якщо має_крапку { має_символ_після_крапки = так; }
        п.позиція_символа += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_3 {
        якщо має_крапку { має_символ_після_крапки = так; }
        п.позиція_символа += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_4 {
        якщо має_крапку { має_символ_після_крапки = так; }
        п.позиція_символа += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_5 {
        якщо має_крапку { має_символ_після_крапки = так; }
        п.позиція_символа += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_6 {
        якщо має_крапку { має_символ_після_крапки = так; }
        п.позиція_символа += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_7 {
        якщо має_крапку { має_символ_після_крапки = так; }
        п.позиція_символа += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_8 {
        якщо має_крапку { має_символ_після_крапки = так; }
        п.позиція_символа += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п.позиція_символа] == UNICODE_9 {
        якщо має_крапку { має_символ_після_крапки = так; }
        п.позиція_символа += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо має_крапку {
        якщо має_символ_після_крапки {
          п.позиція_символа -= 1;
          вихід_позиції_кінця::вміст = п;
          вернути так;
        } інакше {
          вернути ні;
        }
      }
      п.позиція_символа -= 1;
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія перевірити_чи_має_ідентифікатор_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, вихід_позиції_кінця: адреса<ПозиціяСлова>): логічне {
      якщо позиція_початку.позиція_символа >= значення_ю8.розмір {
        вернути ні;
      }
      змінна ціль п = позиція_початку;
      якщо перевірити_чи_початок_ідентифікатора(система, значення_ю8, п, п::адреса) {
      } інакше {
        вихід_позиції_кінця::вміст = п;
        вернути ні;
      }
      п.позиція_символа += 1;
      змінна ціль є_продовження: логічне = так;
      поки є_продовження {
        якщо перевірити_чи_продовження_ідентифікатора(система, значення_ю8, п, п::адреса) {
          п.позиція_символа += 1;
        } інакше {
          вихід_позиції_кінця::вміст = п;
          є_продовження = ні;
        }
      }
      п.позиція_символа -= 1;
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія розібрати_ю8_на_слова_0(система: адреса<Система>, значення_ю8: ю8, позиція_початку: ПозиціяСлова, до_закритої_дужки: логічне, вихід_позиції_кінця: адреса<ПозиціяСлова>, вихід: адреса<Слова>, вихід_помилки: адреса<ПомилкаРозборуНаСлова>): логічне {
      ціль накопичувач_слів = зробити_накопичувач<Слово>(система);

      змінна ціль п = позиція_початку;
      змінна ціль позиція_помилки = ПозиціяСлова { 0, 0, 0 };
      поки п.позиція_символа < значення_ю8.розмір {
        якщо значення_ю8.дані[п.позиція_символа] == UNICODE_SPACE {
          стрибнути далі;
        }
        змінна ціль позиція_кінця = ПозиціяСлова { 0, 1, 1 };
        змінна ціль це_ідентифікатор: логічне = ні;
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"кінець", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаКінець,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"дія", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаДія,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"структура", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСтруктура,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"перебрати", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаПеребрати,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"цикл", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЦикл,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"як", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЯк,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"якщо", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЯкщо,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"чекати", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЧекати,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"взяти", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВзяти,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"дати", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаДати,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"є", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЄ,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"спец", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСпец,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"вернути", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВернути,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"тривала", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаТривала,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"власна", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВласна,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"і", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаІ,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"інакше", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаІнакше,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"або", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаАбо,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"спробувати", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСпробувати,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"зловити", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЗловити,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"впасти", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВпасти,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"поки", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаПоки,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"модуль", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаМодуль,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"рівно", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаРівно,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"більше", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаБільше,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"менше", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаМенше,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"містить", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаМістить,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"не", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаНе,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"предок", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаПредок,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"це", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЦе,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"перелік", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаПерелік,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"композиція", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаКомпозиція,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"зовнішня", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЗовнішня,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"внутрішня", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВнутрішня,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"місцева", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаМісцева,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"властивість", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВластивість,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"видалити", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВидалити,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"=", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволРівно,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8">", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволБільше,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"<", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволМенше,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8".", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволКрапка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"+", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволПлюс,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"-", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволМінус,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"*", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволПомножити,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"/", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволПоділити,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"%", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволЗалишку,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"^", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволПірамідка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"&", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволІ,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"|", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволАбо,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"(", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволВідкритаДужка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8")", позиція_кінця::адреса) {
          якщо до_закритої_дужки {
            вихід::вміст = Слова {
              накопичувач_слів.розмір,
              накопичувач_слів.дані
            };
            вихід_позиції_кінця::вміст = позиція_кінця;
            вернути так;
          }
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволЗакритаДужка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"[", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволКвадратнаВідкритаДужка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"]", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволКвадратнаЗакритаДужка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"?", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволЗнакПитання,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8":", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволДвокрапка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"~", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволТильда,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"!", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволЗнакОклику,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8",", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволКома,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"\n", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволМіжряд,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { ... }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"'", позиція_кінця::адреса) {
          змінна ціль пп = позиція_кінця;
          пп.позиція_символа += 1;
          змінна ціль закінчено: логічне = ні;
          поки пп.позиція_символа < значення_ю8.розмір {
            якщо значення_ю8.дані[пп.позиція_символа] == UNICODE_BACKSLASH {
              пп.позиція_символа += 1;
              стрибнути далі3;
            }
            якщо значення_ю8.дані[пп.позиція_символа] == UNICODE_SINGLE_QUOTE {
              закінчено = так;
              стрибнути закінчити_перебір_символів;
            }
            якщо значення_ю8.дані[пп.позиція_символа] == UNICODE_NEWLINE {
              стрибнути закінчити_перебір_символів;
            }
            далі3:
            пп.позиція_символа += 1;
          }
          закінчити_перебір_символів:
          якщо закінчено {
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаСимвол,
              позиція_початку = п,
              позиція_кінця = пп,
              значення = ю8 { (пп.позиція_символа - п.позиція_символа) - 1, значення_ю8.дані[п.позиція_символа + 1]::адреса як памʼять<п8> }
            });
            п = пп;
            стрибнути далі;
          }
          стрибнути вийти_з_помилкою;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"\"\"\"", позиція_кінця::адреса) {
          змінна ціль пп = позиція_кінця;
          пп.позиція_символа += 1;
          змінна ціль закінчено: логічне = ні;
          поки пп.позиція_символа < значення_ю8.розмір {
            якщо значення_ю8.дані[пп.позиція_символа] == UNICODE_BACKSLASH {
              пп.позиція_символа += 1;
              стрибнути далі2;
            }
            якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, пп, ю8"\"\"\"", пп::адреса) {
              закінчено = так;
              стрибнути закінчити_перебір_багаторядкового_тексту;
            }
            далі2:
            пп.позиція_символа += 1;
          }
          закінчити_перебір_багаторядкового_тексту:
          якщо закінчено {
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаБагаторядковийТекст,
              позиція_початку = п,
              позиція_кінця = пп,
              значення = ю8 { ... }
            });
            п = пп;
            стрибнути далі;
          }
          стрибнути вийти_з_помилкою;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"\"", позиція_кінця::адреса) {
          змінна ціль пп = позиція_кінця;
          пп.позиція_символа += 1;
          змінна ціль закінчено = ні;
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаПочатокЗбитогоТексту,
            позиція_початку = п,
            позиція_кінця = пп,
            значення = ю8 { ... }
          });
          поки пп.позиція_символа < значення_ю8.розмір {
            якщо значення_ю8.дані[пп.позиція_символа] == UNICODE_BACKSLASH {
              пп.позиція_символа += 1;
              стрибнути далі1;
            }
            якщо значення_ю8.дані[пп.позиція_символа] == UNICODE_PERCENT {
              пп.позиція_символа += 1;
              якщо значення_ю8.дані[пп.позиція_символа] == UNICODE_OPENING_PAREN {
                покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
                  вид = ВидСловаТекст,
                  позиція_початку = п,
                  позиція_кінця = пп,
                  значення = ю8 { пп.позиція_символа - п.позиція_символа - 1 - 1, значення_ю8.дані[п.позиція_символа + 1]::адреса як памʼять<п8> }
                });
                покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
                  вид = ВидСловаРоздільникЗбитогоТексту,
                  позиція_початку = п,
                  позиція_кінця = пп,
                  значення = ю8 { ... }
                });
                п = пп;
                пп.позиція_символа += 1;
                ціль слова = Слова { 0, пусто };
                ціль помилка_розбору_на_слова = ПомилкаРозборуНаСлова { ... };
                якщо розібрати_ю8_на_слова_0(система, значення_ю8, пп, так, пп::адреса, слова::адреса, помилка_розбору_на_слова::адреса) {
                  змінна ціль ппп: позитивне = 0;
                  поки ппп < слова.розмір {
                    покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, слова.дані[ппп]);
                    ппп += 1;
                  }
                  звільнити_памʼять(система, слова.дані);
                  покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
                    вид = ВидСловаРоздільникЗбитогоТексту,
                    позиція_початку = п,
                    позиція_кінця = пп,
                    значення = ю8 { ... }
                  });
                  п = пп;
                  стрибнути далі1;
                } інакше {
                  вихід_помилки::вміст = помилка_розбору_на_слова;
                  вернути ні;
                }
              } інакше {
                пп.позиція_символа -= 1;
              }
            }
            якщо значення_ю8.дані[пп.позиція_символа] == UNICODE_DOUBLE_QUOTE {
              закінчено = так;
              стрибнути закінчити_перебір_тексту;
            }
            якщо значення_ю8.дані[пп.позиція_символа] == UNICODE_NEWLINE {
              стрибнути закінчити_перебір_тексту;
            }
            далі1:
            пп.позиція_символа += 1;
          }
          закінчити_перебір_тексту:
          якщо закінчено {
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаТекст,
              позиція_початку = п,
              позиція_кінця = пп,
              значення = ю8 { пп.позиція_символа - п.позиція_символа - 1, значення_ю8.дані[п.позиція_символа + 1]::адреса як памʼять<п8> }
            });
            п = пп;
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаКінецьЗбитогоТексту,
              позиція_початку = п,
              позиція_кінця = пп,
              значення = ю8 { ... }
            });
            стрибнути далі;
          }
          стрибнути вийти_з_помилкою;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8";;", позиція_кінця::адреса) {
          змінна ціль пп = позиція_кінця;
          пп.позиція_символа += 1;
          змінна ціль закінчено: логічне = ні;
          поки пп.позиція_символа < значення_ю8.розмір {
            якщо значення_ю8.дані[пп.позиція_символа] == UNICODE_NEWLINE {
              закінчено = так;
              стрибнути закінчити_перебір_коментаря;
            }
            пп.позиція_символа += 1;
          }
          закінчити_перебір_коментаря:
  //        покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
  //          вид = ВидСловаКоментар,
  //          позиція_початку = п,
  //          позиція_кінця = пп - 1
  //        });
          якщо закінчено {
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаСимволМіжряд,
              позиція_початку = пп,
              позиція_кінця = пп,
              значення = ю8 { ... }
            });
          }
          п = пп;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8";*", позиція_кінця::адреса) {
          змінна ціль пп = позиція_кінця;
          пп.позиція_символа += 1;
          змінна ціль закінчено: логічне = ні;
          поки пп.позиція_символа < значення_ю8.розмір {
            якщо перевірити_чи_має_ю8_за_позицією_початку(система, значення_ю8, пп, ю8"*;", пп::адреса) {
              закінчено = так;
              стрибнути закінчити_перебір_багаторядкового_коментаря;
            }
            пп.позиція_символа += 1;
          }
          закінчити_перебір_багаторядкового_коментаря:
          якщо закінчено {
  //          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
  //            вид = ВидСловаБагаторядковийКоментар,
  //            позиція_початку = п,
  //            позиція_кінця = пп
  //          });
            п = пп;
            стрибнути далі;
          }
          стрибнути вийти_з_помилкою;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        якщо перевірити_чи_число(система, значення_ю8, п, позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЧисло,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { (позиція_кінця.позиція_символа - п.позиція_символа) + 1, значення_ю8.дані[п.позиція_символа]::адреса як памʼять<п8> }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        перевірка_ідентифікатора:
        якщо перевірити_чи_має_ідентифікатор_за_позицією_початку(система, значення_ю8, п, позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаІдентифікатор,
            позиція_початку = п,
            позиція_кінця = позиція_кінця,
            значення = ю8 { (позиція_кінця.позиція_символа - п.позиція_символа) + 1, значення_ю8.дані[п.позиція_символа]::адреса як памʼять<п8> }
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо позиція_кінця.позиція_символа == 0 {
          позиція_кінця = п;
        }
        якщо позиція_кінця.позиція_символа > позиція_помилки.позиція_символа {
          позиція_помилки = позиція_кінця;
        }
        стрибнути вийти_з_помилкою;
        далі:
        п.позиція_символа += 1;
      }
      покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
        вид = ВидСловаКІНЕЦЬСЛІВ,
        позиція_початку = ПозиціяСлова { 0, 0, 0 },
        позиція_кінця = ПозиціяСлова { 0, 0, 0 },
        значення = ю8 { ... }
      });

      вихід::вміст = Слова {
        накопичувач_слів.розмір,
        накопичувач_слів.дані
      };
      вихід_позиції_кінця::вміст = п;
      вернути так;

      вийти_з_помилкою:
      звільнити_памʼять(система, накопичувач_слів.дані);
      вихід_помилки::вміст = ПомилкаРозборуНаСлова {
        позиція_символа = позиція_помилки.позиція_символа,
        рядок = позиція_помилки.рядок,
        стовпець = позиція_помилки.стовпець
      };
      вернути ні;
    }

    зовнішня дія розібрати_ю8_на_слова(система: адреса<Система>, значення_ю8: ю8, вихід: адреса<Слова>, вихід_помилки: адреса<ПомилкаРозборуНаСлова>): логічне {
      змінна ціль позиція_кінця = ПозиціяСлова { 0, 0, 0 };
      вернути розібрати_ю8_на_слова_0(система, значення_ю8, ПозиціяСлова { 0, 1, 1 }, ні, позиція_кінця::адреса, вихід, вихід_помилки);
    }

    зовнішня дія вивести_слово(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8, слово: Слово) {
      якщо слово.вид == ВидСловаАбо {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Або");
      } інакше якщо слово.вид == ВидСловаБільше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Більше");
      } інакше якщо слово.вид == ВидСловаВзяти {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Взяти");
      } інакше якщо слово.вид == ВидСловаВласна {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Власна");
      } інакше якщо слово.вид == ВидСловаВпасти {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Впасти");
      } інакше якщо слово.вид == ВидСловаВидалити {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Видалити");
      } інакше якщо слово.вид == ВидСловаВнутрішня {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Внутрішня");
      } інакше якщо слово.вид == ВидСловаВластивість {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Властивість");
      } інакше якщо слово.вид == ВидСловаВернути {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Вернути");
      } інакше якщо слово.вид == ВидСловаДія {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Дія");
      } інакше якщо слово.вид == ВидСловаДати {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Дати");
      } інакше якщо слово.вид == ВидСловаЄ {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Є");
      } інакше якщо слово.вид == ВидСловаЗовнішня {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Зовнішня");
      } інакше якщо слово.вид == ВидСловаЗловити {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Зловити");
      } інакше якщо слово.вид == ВидСловаІ {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"І");
      } інакше якщо слово.вид == ВидСловаІнакше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Інакше");
      } інакше якщо слово.вид == ВидСловаКомпозиція {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Композиція");
      } інакше якщо слово.вид == ВидСловаКінець {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Кінець");
      } інакше якщо слово.вид == ВидСловаМодуль {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Модуль");
      } інакше якщо слово.вид == ВидСловаМенше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Менше");
      } інакше якщо слово.вид == ВидСловаМістить {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Містить");
      } інакше якщо слово.вид == ВидСловаМісцева {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Місцева");
      } інакше якщо слово.вид == ВидСловаНе {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Не");
      } інакше якщо слово.вид == ВидСловаПоки {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Поки");
      } інакше якщо слово.вид == ВидСловаПерелік {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Перелік");
      } інакше якщо слово.вид == ВидСловаПредок {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Предок");
      } інакше якщо слово.вид == ВидСловаПеребрати {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Перебрати");
      } інакше якщо слово.вид == ВидСловаРівно {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Рівно");
      } інакше якщо слово.вид == ВидСловаСтруктура {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Структура");
      } інакше якщо слово.вид == ВидСловаСпробувати {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Спробувати");
      } інакше якщо слово.вид == ВидСловаСпец {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Спец");
      } інакше якщо слово.вид == ВидСловаТривала {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Тривала");
      } інакше якщо слово.вид == ВидСловаЦикл {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Цикл");
      } інакше якщо слово.вид == ВидСловаЦе {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Це");
      } інакше якщо слово.вид == ВидСловаЧекати {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Чекати");
      } інакше якщо слово.вид == ВидСловаЯк {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Як");
      } інакше якщо слово.вид == ВидСловаЯкщо {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Якщо");
      } інакше якщо слово.вид == ВидСловаСимволРівно {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволРівно");
      } інакше якщо слово.вид == ВидСловаСимволБільше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволБільше");
      } інакше якщо слово.вид == ВидСловаСимволМенше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволМенше");
      } інакше якщо слово.вид == ВидСловаСимволКрапка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволКрапка");
      } інакше якщо слово.вид == ВидСловаСимволПлюс {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволПлюс");
      } інакше якщо слово.вид == ВидСловаСимволМінус {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволМінус");
      } інакше якщо слово.вид == ВидСловаСимволПомножити {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволПомножити");
      } інакше якщо слово.вид == ВидСловаСимволПоділити {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволПоділити");
      } інакше якщо слово.вид == ВидСловаСимволЗалишку {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволЗалишку");
      } інакше якщо слово.вид == ВидСловаСимволПірамідка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволПірамідка");
      } інакше якщо слово.вид == ВидСловаСимволІ {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволІ");
      } інакше якщо слово.вид == ВидСловаСимволАбо {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволАбо");
      } інакше якщо слово.вид == ВидСловаСимволВідкритаДужка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволВідкритаДужка");
      } інакше якщо слово.вид == ВидСловаСимволЗакритаДужка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволЗакритаДужка");
      } інакше якщо слово.вид == ВидСловаСимволКвадратнаВідкритаДужка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволКвадратнаВідкритаДужка");
      } інакше якщо слово.вид == ВидСловаСимволКвадратнаЗакритаДужка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволКвадратнаЗакритаДужка");
      } інакше якщо слово.вид == ВидСловаСимволЗнакПитання {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволЗнакПитання");
      } інакше якщо слово.вид == ВидСловаСимволДвокрапка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволДвокрапка");
      } інакше якщо слово.вид == ВидСловаСимволТильда {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволТильда");
      } інакше якщо слово.вид == ВидСловаСимволОднолапка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволОднолапка");
      } інакше якщо слово.вид == ВидСловаСимволДволапка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволДволапка");
      } інакше якщо слово.вид == ВидСловаСимволЗнакОклику {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволЗнакОклику");
      } інакше якщо слово.вид == ВидСловаСимволКома {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволКома");
      } інакше якщо слово.вид == ВидСловаСимволМіжряд {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволМіжряд");
      } інакше якщо слово.вид == ВидСловаЧисло {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Число");
      } інакше якщо слово.вид == ВидСловаСимвол {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Символ");
      } інакше якщо слово.вид == ВидСловаТекст {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Текст");
      } інакше якщо слово.вид == ВидСловаБагаторядковийТекст {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"БагаторядковийТекст");
      } інакше якщо слово.вид == ВидСловаКоментар {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Коментар");
      } інакше якщо слово.вид == ВидСловаБагаторядковийКоментар {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"БагаторядковийКоментар");
      } інакше якщо слово.вид == ВидСловаІдентифікатор {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Ідентифікатор");
      } інакше якщо слово.вид == ВидСловаПочатокЗбитогоТексту {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ПочатокЗбитогоТексту");
      } інакше якщо слово.вид == ВидСловаРоздільникЗбитогоТексту {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ЗбитийТекст");
      } інакше якщо слово.вид == ВидСловаКінецьЗбитогоТексту {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"КінецьЗбитогоТексту");
      } інакше якщо слово.вид == ВидСловаКІНЕЦЬСЛІВ {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"КІНЕЦЬСЛІВ");
      } інакше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"!!! НЕВІДОМЕ СЛОВО !!!");
      }
    }

    зовнішня дія вивести_слова(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8, слова: Слова) {
      змінна ціль п: позитивне = 0;
      поки п < слова.розмір {
        вивести_слово(система, вихідний_потік, значення_ю8, слова.дані[п]);
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"\n");
        п += 1;
      }
    }

    зовнішня дія звільнити_слова(система: адреса<Система>, слова: Слова) {
      звільнити_памʼять(система, слова.дані);
    }

    зовнішня дія звільнити_помилку_розбору_на_слова(система: адреса<Система>, помилка: ПомилкаРозборуНаСлова) {
      // ...
    }

    зовнішня дія отримати_ю8_помилки_розбору_на_слова(система: адреса<Система>, помилка: ПомилкаРозборуНаСлова, вихід: адреса<ю8>): логічне {
      виділити_копію_ю8(система, ю8"Не вдалось розібрати на слова", вихід);
      вернути так;
    }

    зовнішня дія отримати_рядок_помилки_розбору_на_слова(система: адреса<Система>, помилка: ПомилкаРозборуНаСлова): позитивне {
      вернути помилка.рядок;
    }

    зовнішня дія отримати_стовпець_помилки_розбору_на_слова(система: адреса<Система>, помилка: ПомилкаРозборуНаСлова): позитивне {
      вернути помилка.стовпець;
    }

    зовнішня дія отримати_ю8_ідентифікатора(значення_ю8: ю8, слова: Слова, ідентифікатор: Ідентифікатор): ю8 {
      вернути слова.дані[ідентифікатор.позиція_слова].значення;
    }

    зовнішня дія отримати_ю8_слова(значення_ю8: ю8, слова: Слова, слово: Слово): ю8 {
      вернути слово.значення;
    }

    зовнішня дія отримати_ю8_тексту(значення_ю8: ю8, слова: Слова, гілка_тексту: адреса<Гілка>): ю8 {
      ціль дані = гілка_тексту.дані як ДаніГілкиТекст;
      ціль слово = слова.дані[дані.позиція_слова];
      вернути слово.значення;
    }

    зовнішня дія отримати_ю8_символу(значення_ю8: ю8, слова: Слова, гілка_символу: адреса<Гілка>): ю8 {
      ціль дані = гілка_символу.дані як ДаніГілкиСимвол;
      ціль слово = слова.дані[дані.позиція_слова];
      вернути слово.значення;
    }

    зовнішня дія отримати_рядок_з_місцезнаходження(значення_ю8: ю8, слова: Слова, місцезнаходження: Місцезнаходження): позитивне {
      вернути слова.дані[місцезнаходження.позиція_слова].позиція_початку.рядок;
    }

    зовнішня дія отримати_стовпець_з_місцезнаходження(значення_ю8: ю8, слова: Слова, місцезнаходження: Місцезнаходження): позитивне {
      вернути слова.дані[місцезнаходження.позиція_слова].позиція_початку.стовпець;
    }
  }
}

секція мавка {
  секція розбирач {
    дія зробити_повну_копію_гілки(система: адреса<Система>, гілка: адреса<Гілка>): адреса<Гілка>;
    дія зробити_повну_копію_тіла(система: адреса<Система>, тіло: Гілки): Гілки;
    дія зробити_повну_копію_типу(система: адреса<Система>, тип: Тип): Тип;
    дія зробити_повну_копію_можливо_типу(система: адреса<Система>, тип: можливо<Тип>): можливо<Тип>;
    дія зробити_повну_копію_параметра(система: адреса<Система>, параметр: Параметр): Параметр;
    дія зробити_повну_копію_параметрів(система: адреса<Система>, кількість_параметрів: позитивне, параметри: памʼять<Параметр>): памʼять<Параметр>;
    дія зробити_повну_копію_аргумента(система: адреса<Система>, аргумент: Аргумент): Аргумент;
    дія зробити_повну_копію_аргументів(система: адреса<Система>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): памʼять<Аргумент>;
    дія зробити_повну_копію_гілок(система: адреса<Система>, кількість_гілок: позитивне, гілки: памʼять<адреса<Гілка>>): памʼять<адреса<Гілка>>;
    дія зробити_повну_копію_елемента_словника(система: адреса<Система>, елемент: ЕлементСловника): ЕлементСловника;
    дія зробити_повну_копію_елементів_словника(система: адреса<Система>, кількість_елементів: позитивне, елементи: памʼять<ЕлементСловника>): памʼять<ЕлементСловника>;
    дія зробити_повну_копію_ідентифікаторів(система: адреса<Система>, кількість_ідентифікаторів: позитивне, ідентифікатори: памʼять<Ідентифікатор>): памʼять<Ідентифікатор>;
    дія зробити_повну_копію_елемента_взяти(система: адреса<Система>, елемент: ЕлементВзяти): ЕлементВзяти;
    дія зробити_повну_копію_елементів_взяти(система: адреса<Система>, кількість_елементів: позитивне, елементи: памʼять<ЕлементВзяти>): памʼять<ЕлементВзяти>;
    дія зробити_повну_копію_елемента_дати(система: адреса<Система>, елемент: ЕлементДати): ЕлементДати;
    дія зробити_повну_копію_елементів_дати(система: адреса<Система>, кількість_елементів: позитивне, елементи: памʼять<ЕлементДати>): памʼять<ЕлементДати>;
    дія звільнити_гілку(система: адреса<Система>, гілка: адреса<Гілка>);
    дія звільнити_тіло(система: адреса<Система>, тіло: Гілки);
    дія звільнити_тип(система: адреса<Система>, тип: Тип);
    дія звільнити_параметри(система: адреса<Система>, кількість_параметрів: позитивне, параметри: памʼять<Параметр>);
    дія звільнити_аргументи(система: адреса<Система>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>);
    дія звільнити_елементи_словника(система: адреса<Система>, кількість_елементів: позитивне, елементи: памʼять<ЕлементСловника>);

    дія зробити_повну_копію_гілки(система: адреса<Система>, гілка: адреса<Гілка>): адреса<Гілка> {
      якщо гілка == пусто {
        вернути пусто;
      }
      ціль копія = виділити<Гілка>(система);
      копія.вид = гілка.вид;
      якщо гілка.вид == ВидГілкиВизначити {
        ціль дані = гілка.дані як ДаніГілкиВизначити;
        копія.дані = ДаніГілкиВизначити {
          ідентифікатор = дані.ідентифікатор,
          значення = зробити_повну_копію_гілки(система, дані.значення)
        };
      } інакше якщо гілка.вид == ВидГілкиЗвернутись {
        ціль дані = гілка.дані як ДаніГілкиЗвернутись;
        копія.дані = ДаніГілкиЗвернутись {
          ідентифікатор = дані.ідентифікатор
        };
      } інакше якщо гілка.вид == ВидГілкиОтримати {
        ціль дані = гілка.дані як ДаніГілкиОтримати;
        копія.дані = ДаніГілкиОтримати {
          предмет = зробити_повну_копію_гілки(система, дані.предмет),
          ідентифікатор = дані.ідентифікатор
        };
      } інакше якщо гілка.вид == ВидГілкиОтриматиЕлемент {
        ціль дані = гілка.дані як ДаніГілкиОтриматиЕлемент;
        копія.дані = ДаніГілкиОтриматиЕлемент {
          предмет = зробити_повну_копію_гілки(система, дані.предмет),
          ключ = зробити_повну_копію_гілки(система, дані.ключ)
        };
      } інакше якщо гілка.вид == ВидГілкиЗмінити {
        ціль дані = гілка.дані як ДаніГілкиЗмінити;
        копія.дані = ДаніГілкиЗмінити {
          предмет = зробити_повну_копію_гілки(система, дані.предмет),
          ідентифікатор = дані.ідентифікатор,
          значення = зробити_повну_копію_гілки(система, дані.значення)
        };
      } інакше якщо гілка.вид == ВидГілкиЗмінитиЕлемент {
        ціль дані = гілка.дані як ДаніГілкиЗмінитиЕлемент;
        копія.дані = ДаніГілкиЗмінитиЕлемент {
          предмет = зробити_повну_копію_гілки(система, дані.предмет),
          ключ = зробити_повну_копію_гілки(система, дані.ключ),
          значення = зробити_повну_копію_гілки(система, дані.значення)
        };
      } інакше якщо гілка.вид == ВидГілкиВиконати {
        ціль дані = гілка.дані як ДаніГілкиВиконати;
        копія.дані = ДаніГілкиВиконати {
          предмет = зробити_повну_копію_гілки(система, дані.предмет),
          кількість_аргументів = дані.кількість_аргументів,
          аргументи = зробити_повну_копію_аргументів(система, дані.кількість_аргументів, дані.аргументи)
        };
      } інакше якщо гілка.вид == ВидГілкиДія {
        ціль дані = гілка.дані як ДаніГілкиДія;
        копія.дані = ДаніГілкиДія {
          тривала = дані.тривала,
          модифікатор = дані.модифікатор,
          структура_ = зробити_повну_копію_гілки(система, дані.структура_),
          ідентифікатор = дані.ідентифікатор,
          кількість_параметрів = дані.кількість_параметрів,
          параметри = зробити_повну_копію_параметрів(система, дані.кількість_параметрів, дані.параметри),
          тип_результату = зробити_повну_копію_можливо_типу(система, дані.тип_результату),
          тіло = зробити_повну_копію_тіла(система, дані.тіло)
        };
      } інакше якщо гілка.вид == ВидГілкиСтруктура {
        ціль дані = гілка.дані як ДаніГілкиСтруктура;
        копія.дані = ДаніГілкиСтруктура {
          ідентифікатор = дані.ідентифікатор,
          предок = зробити_повну_копію_гілки(система, дані.предок),
          кількість_параметрів = дані.кількість_параметрів,
          параметри = зробити_повну_копію_параметрів(система, дані.кількість_параметрів, дані.параметри)
        };
      } інакше якщо гілка.вид == ВидГілкиЧисло {
        ціль дані = гілка.дані як ДаніГілкиЧисло;
        копія.дані = ДаніГілкиЧисло {
          позиція_слова = дані.позиція_слова
        };
      } інакше якщо гілка.вид == ВидГілкиТекст {
        ціль дані = гілка.дані як ДаніГілкиТекст;
        копія.дані = ДаніГілкиТекст {
          ідентифікатор = дані.ідентифікатор,
          позиція_слова = дані.позиція_слова
        };
      } інакше якщо гілка.вид == ВидГілкиОперація {
        ціль дані = гілка.дані як ДаніГілкиОперація;
        копія.дані = ДаніГілкиОперація {
          ліво = зробити_повну_копію_гілки(система, дані.ліво),
          операція = дані.операція,
          право = зробити_повну_копію_гілки(система, дані.право)
        };
      } інакше якщо гілка.вид == ВидГілкиЯкщо {
        ціль дані = гілка.дані як ДаніГілкиЯкщо;
        копія.дані = ДаніГілкиЯкщо {
          умова = зробити_повну_копію_гілки(система, дані.умова),
          тіло = зробити_повну_копію_тіла(система, дані.тіло),
          тіло_інакше = зробити_повну_копію_тіла(система, дані.тіло_інакше)
        };
      } інакше якщо гілка.вид == ВидГілкиПоки {
        ціль дані = гілка.дані як ДаніГілкиПоки;
        копія.дані = ДаніГілкиПоки {
          умова = зробити_повну_копію_гілки(система, дані.умова),
          тіло = зробити_повну_копію_тіла(система, дані.тіло)
        };
      } інакше якщо гілка.вид == ВидГілкиВернути {
        ціль дані = гілка.дані як ДаніГілкиВернути;
        копія.дані = ДаніГілкиВернути {
          значення = зробити_повну_копію_гілки(система, дані.значення)
        };
      } інакше якщо гілка.вид == ВидГілкиЗначенняЯкщо {
        ціль дані = гілка.дані як ДаніГілкиЗначенняЯкщо;
        копія.дані = ДаніГілкиЗначенняЯкщо {
          умова = зробити_повну_копію_гілки(система, дані.умова),
          значення_так = зробити_повну_копію_гілки(система, дані.значення_так),
          значення_ні = зробити_повну_копію_гілки(система, дані.значення_ні)
        };
      } інакше якщо гілка.вид == ВидГілкиСамоОперація {
        ціль дані = гілка.дані як ДаніГілкиСамоОперація;
        копія.дані = ДаніГілкиСамоОперація {
          операція = дані.операція,
          предмет = зробити_повну_копію_гілки(система, дані.предмет)
        };
      } інакше якщо гілка.вид == ВидГілкиВзяти {
        ціль дані = гілка.дані як ДаніГілкиВзяти;
        копія.дані = ДаніГілкиВзяти {
          тип = дані.тип,
          довжина_шляху = дані.довжина_шляху,
          шлях = зробити_повну_копію_ідентифікаторів(система, дані.довжина_шляху, дані.шлях),
          ідентифікатор_як = дані.ідентифікатор_як,
          кількість_елементів = дані.кількість_елементів,
          елементи = зробити_повну_копію_елементів_взяти(система, дані.кількість_елементів, дані.елементи)
        };
      } інакше якщо гілка.вид == ВидГілкиСпробувати {
        ціль дані = гілка.дані як ДаніГілкиСпробувати;
        копія.дані = ДаніГілкиСпробувати {
          тіло = зробити_повну_копію_тіла(система, дані.тіло),
          ідентифікатор_зловити = дані.ідентифікатор_зловити,
          тіло_зловити = зробити_повну_копію_тіла(система, дані.тіло_зловити)
        };
      } інакше якщо гілка.вид == ВидГілкиВпасти {
        ціль дані = гілка.дані як ДаніГілкиВпасти;
        копія.дані = ДаніГілкиВпасти {
          значення = зробити_повну_копію_гілки(система, дані.значення)
        };
      } інакше якщо гілка.вид == ВидГілкиДати {
        ціль дані = гілка.дані як ДаніГілкиДати;
        копія.дані = ДаніГілкиДати {
          кількість_елементів = дані.кількість_елементів,
          елементи = зробити_повну_копію_елементів_дати(система, дані.кількість_елементів, дані.елементи)
        };
      } інакше якщо гілка.вид == ВидГілкиМодуль {
        ціль дані = гілка.дані як ДаніГілкиМодуль;
        копія.дані = ДаніГілкиМодуль {
          ідентифікатор = дані.ідентифікатор,
          тіло = зробити_повну_копію_тіла(система, дані.тіло)
        };
      } інакше якщо гілка.вид == ВидГілкиСписок {
        ціль дані = гілка.дані як ДаніГілкиСписок;
        копія.дані = ДаніГілкиСписок {
          кількість_елементів = дані.кількість_елементів,
          елементи = зробити_повну_копію_гілок(система, дані.кількість_елементів, дані.елементи)
        };
      } інакше якщо гілка.вид == ВидГілкиСловник {
        ціль дані = гілка.дані як ДаніГілкиСловник;
        копія.дані = ДаніГілкиСловник {
          кількість_елементів = дані.кількість_елементів,
          елементи = зробити_повну_копію_елементів_словника(система, дані.кількість_елементів, дані.елементи)
        };
      } інакше якщо гілка.вид == ВидГілкиСимвол {
        ціль дані = гілка.дані як ДаніГілкиСимвол;
        копія.дані = ДаніГілкиСимвол {
          ідентифікатор = дані.ідентифікатор,
          позиція_слова = дані.позиція_слова
        };
      } інакше якщо гілка.вид == ВидГілкиПеребрати {
        ціль дані = гілка.дані як ДаніГілкиПеребрати;
        копія.дані = ДаніГілкиПеребрати {
          предмет = зробити_повну_копію_гілки(система, дані.предмет),
          ідентифікатор = дані.ідентифікатор,
          тіло = зробити_повну_копію_тіла(система, дані.тіло)
        };
      } інакше якщо гілка.вид == ВидГілкиЦикл {
        ціль дані = гілка.дані як ДаніГілкиЦикл;
        копія.дані = ДаніГілкиЦикл {
          старт = зробити_повну_копію_тіла(система, дані.старт),
          умова = зробити_повну_копію_гілки(система, дані.умова),
          тіло = зробити_повну_копію_тіла(система, дані.тіло),
          ітерація = зробити_повну_копію_тіла(система, дані.ітерація)
        };
      } інакше якщо гілка.вид == ВидГілкиВизначитиЗзовні {
        ціль дані = гілка.дані як ДаніГілкиВизначитиЗзовні;
        копія.дані = ДаніГілкиВизначитиЗзовні {
          ідентифікатор = дані.ідентифікатор,
          значення = зробити_повну_копію_гілки(система, дані.значення)
        };
      } інакше якщо гілка.вид == ВидГілкиВічнийЦикл {
        ціль дані = гілка.дані як ДаніГілкиВічнийЦикл;
        копія.дані = ДаніГілкиВічнийЦикл {
          тіло = зробити_повну_копію_тіла(система, дані.тіло)
        };
      } інакше якщо гілка.вид == ВидГілкиВидалити {
        ціль дані = гілка.дані як ДаніГілкиВидалити;
        копія.дані = ДаніГілкиВидалити {
          ідентифікатор = дані.ідентифікатор
        };
      } інакше якщо гілка.вид == ВидГілкиВидалитиВластивість {
        ціль дані = гілка.дані як ДаніГілкиВидалитиВластивість;
        копія.дані = ДаніГілкиВидалитиВластивість {
          предмет = зробити_повну_копію_гілки(система, дані.предмет),
          ідентифікатор = дані.ідентифікатор
        };
      } інакше якщо гілка.вид == ВидГілкиВидалитиЕлемент {
        ціль дані = гілка.дані як ДаніГілкиВидалитиЕлемент;
        копія.дані = ДаніГілкиВидалитиЕлемент {
          предмет = зробити_повну_копію_гілки(система, дані.предмет),
          ключ = зробити_повну_копію_гілки(система, дані.ключ)
        };
      } інакше якщо гілка.вид == ВидГілкиЧекати {
        ціль дані = гілка.дані як ДаніГілкиЧекати;
        копія.дані = ДаніГілкиЧекати {
          значення = зробити_повну_копію_гілки(система, дані.значення)
        };
      } інакше якщо гілка.вид == ВидГілкиДіапазон {
        ціль дані = гілка.дані як ДаніГілкиДіапазон;
        копія.дані = ДаніГілкиДіапазон {
          від = зробити_повну_копію_гілки(система, дані.від),
          до = зробити_повну_копію_гілки(система, дані.до),
          включно = дані.включно
        };
      } інакше якщо гілка.вид == ВидГілкиЗбитийТекст {
        ціль дані = гілка.дані як ДаніГілкиЗбитийТекст;
        копія.дані = ДаніГілкиЗбитийТекст {
          ідентифікатор = дані.ідентифікатор,
          кількість_гілок = дані.кількість_гілок,
          гілки = зробити_повну_копію_гілок(система, дані.кількість_гілок, дані.гілки)
        };
      } інакше {
//        надрукувати_ю8(ю8"НЕВІДОМИЙ ВИД ГІЛКИ ДЛЯ КОПІЮВАННЯ");
      }
      копія.місцезнаходження = гілка.місцезнаходження;
      вернути копія;
    }
  
    дія зробити_повну_копію_тіла(система: адреса<Система>, тіло: Гілки): Гілки {
      вернути Гілки { тіло.розмір, зробити_повну_копію_гілок(система, тіло.розмір, тіло.дані) };
    }
  
    дія зробити_повну_копію_типу(система: адреса<Система>, тип: Тип): Тип {
      вернути Тип { тип.кількість_гілок, зробити_повну_копію_гілок(система, тип.кількість_гілок, тип.гілки) };
    }
  
    дія зробити_повну_копію_можливо_типу(система: адреса<Система>, тип: можливо<Тип>): можливо<Тип> {
      якщо тип.заповнено == позитивне(так) {
        вернути можливо<Тип> { позитивне(так), зробити_повну_копію_типу(система, тип.значення) };
      }
      вернути можливо<Тип> { позитивне(ні), ... };
    }
  
    дія зробити_повну_копію_параметра(система: адреса<Система>, параметр: Параметр): Параметр {
      вернути Параметр {
        ідентифікатор = параметр.ідентифікатор,
        тип = зробити_повну_копію_можливо_типу(система, параметр.тип),
        значення = зробити_повну_копію_гілки(система, параметр.значення),
        місцезнаходження = параметр.місцезнаходження
      };
    }
  
    дія зробити_повну_копію_параметрів(система: адреса<Система>, кількість_параметрів: позитивне, параметри: памʼять<Параметр>): памʼять<Параметр> {
      якщо кількість_параметрів == 0 {
        вернути пусто;
      }
      змінна ціль нові_параметри = виділити_памʼять<Параметр>(система, кількість_параметрів);
      змінна ціль п: позитивне = 0;
      поки п < кількість_параметрів {
        нові_параметри[п] = зробити_повну_копію_параметра(система, параметри[п]);
        п += 1;
      }
      вернути нові_параметри;
    }
  
    дія зробити_повну_копію_аргумента(система: адреса<Система>, аргумент: Аргумент): Аргумент {
      вернути Аргумент {
        ідентифікатор = аргумент.ідентифікатор,
        значення = зробити_повну_копію_гілки(система, аргумент.значення),
        місцезнаходження = аргумент.місцезнаходження
      };
    }
  
    дія зробити_повну_копію_аргументів(система: адреса<Система>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): памʼять<Аргумент> {
      якщо кількість_аргументів == 0 {
        вернути пусто;
      }
      змінна ціль нові_аргументи = виділити_памʼять<Аргумент>(система, кількість_аргументів);
      змінна ціль п: позитивне = 0;
      поки п < кількість_аргументів {
        нові_аргументи[п] = зробити_повну_копію_аргумента(система, аргументи[п]);
        п += 1;
      }
      вернути нові_аргументи;
    }
  
    дія зробити_повну_копію_гілок(система: адреса<Система>, кількість_гілок: позитивне, гілки: памʼять<адреса<Гілка>>): памʼять<адреса<Гілка>> {
      якщо кількість_гілок == 0 {
        вернути пусто;
      }
      змінна ціль нові_гілки = виділити_памʼять<адреса<Гілка>>(система, кількість_гілок);
      змінна ціль п: позитивне = 0;
      поки п < кількість_гілок {
        нові_гілки[п] = зробити_повну_копію_гілки(система, гілки[п]);
        п += 1;
      }
      вернути нові_гілки;
    }
  
    дія зробити_повну_копію_елемента_словника(система: адреса<Система>, елемент: ЕлементСловника): ЕлементСловника {
      вернути ЕлементСловника {
        ключ = зробити_повну_копію_гілки(система, елемент.ключ),
        значення = зробити_повну_копію_гілки(система, елемент.значення),
        місцезнаходження = елемент.місцезнаходження
      };
    }
  
    дія зробити_повну_копію_елементів_словника(система: адреса<Система>, кількість_елементів: позитивне, елементи: памʼять<ЕлементСловника>): памʼять<ЕлементСловника> {
      якщо кількість_елементів == 0 {
        вернути пусто;
      }
      змінна ціль нові_елементи = виділити_памʼять<ЕлементСловника>(система, кількість_елементів);
      змінна ціль п: позитивне = 0;
      поки п < кількість_елементів {
        нові_елементи[п] = зробити_повну_копію_елемента_словника(система, елементи[п]);
        п += 1;
      }
      вернути нові_елементи;
    }
  
    дія зробити_повну_копію_ідентифікаторів(система: адреса<Система>, кількість_ідентифікаторів: позитивне, ідентифікатори: памʼять<Ідентифікатор>): памʼять<Ідентифікатор> {
      якщо кількість_ідентифікаторів == 0 {
        вернути пусто;
      }
      змінна ціль нові_ідентифікатори = виділити_памʼять<Ідентифікатор>(система, кількість_ідентифікаторів);
      змінна ціль п: позитивне = 0;
      поки п < кількість_ідентифікаторів {
        нові_ідентифікатори[п] = ідентифікатори[п];
        п += 1;
      }
      вернути нові_ідентифікатори;
    }
  
    дія зробити_повну_копію_елемента_взяти(система: адреса<Система>, елемент: ЕлементВзяти): ЕлементВзяти {
      вернути елемент;
    }
  
    дія зробити_повну_копію_елементів_взяти(система: адреса<Система>, кількість_елементів: позитивне, елементи: памʼять<ЕлементВзяти>): памʼять<ЕлементВзяти> {
      якщо кількість_елементів == 0 {
        вернути пусто;
      }
      змінна ціль нові_елементи = виділити_памʼять<ЕлементВзяти>(система, кількість_елементів);
      змінна ціль п: позитивне = 0;
      поки п < кількість_елементів {
        нові_елементи[п] = зробити_повну_копію_елемента_взяти(система, елементи[п]);
        п += 1;
      }
      вернути нові_елементи;
    }
  
    дія зробити_повну_копію_елемента_дати(система: адреса<Система>, елемент: ЕлементДати): ЕлементДати {
      вернути елемент;
    }
  
    дія зробити_повну_копію_елементів_дати(система: адреса<Система>, кількість_елементів: позитивне, елементи: памʼять<ЕлементДати>): памʼять<ЕлементДати> {
      якщо кількість_елементів == 0 {
        вернути пусто;
      }
      змінна ціль нові_елементи = виділити_памʼять<ЕлементДати>(система, кількість_елементів);
      змінна ціль п: позитивне = 0;
      поки п < кількість_елементів {
        нові_елементи[п] = зробити_повну_копію_елемента_дати(система, елементи[п]);
        п += 1;
      }
      вернути нові_елементи;
    }
  
    дія звільнити_гілку(система: адреса<Система>, гілка: адреса<Гілка>) {
      якщо гілка != пусто {
        якщо гілка.вид == ВидГілкиВизначити {
          ціль дані = гілка.дані як ДаніГілкиВизначити;
          звільнити_гілку(система, дані.значення);
        } інакше якщо гілка.вид == ВидГілкиОтримати {
          ціль дані = гілка.дані як ДаніГілкиОтримати;
          звільнити_гілку(система, дані.предмет);
        } інакше якщо гілка.вид == ВидГілкиОтриматиЕлемент {
          ціль дані = гілка.дані як ДаніГілкиОтриматиЕлемент;
          звільнити_гілку(система, дані.предмет);
          звільнити_гілку(система, дані.ключ);
        } інакше якщо гілка.вид == ВидГілкиЗмінити {
          ціль дані = гілка.дані як ДаніГілкиЗмінити;
          звільнити_гілку(система, дані.предмет);
          звільнити_гілку(система, дані.значення);
        } інакше якщо гілка.вид == ВидГілкиЗмінитиЕлемент {
          ціль дані = гілка.дані як ДаніГілкиЗмінитиЕлемент;
          звільнити_гілку(система, дані.предмет);
          звільнити_гілку(система, дані.ключ);
          звільнити_гілку(система, дані.значення);
        } інакше якщо гілка.вид == ВидГілкиВиконати {
          ціль дані = гілка.дані як ДаніГілкиВиконати;
          звільнити_гілку(система, дані.предмет);
          звільнити_аргументи(система, дані.кількість_аргументів, дані.аргументи);
        } інакше якщо гілка.вид == ВидГілкиДія {
          ціль дані = гілка.дані як ДаніГілкиДія;
          звільнити_гілку(система, дані.структура_);
          звільнити_параметри(система, дані.кількість_параметрів, дані.параметри);
          якщо дані.тип_результату.заповнено == позитивне(так) {
            звільнити_тип(система, дані.тип_результату.значення);
          }
          звільнити_тіло(система, дані.тіло);
        } інакше якщо гілка.вид == ВидГілкиСтруктура {
          ціль дані = гілка.дані як ДаніГілкиСтруктура;
          звільнити_гілку(система, дані.предок);
          звільнити_параметри(система, дані.кількість_параметрів, дані.параметри);
        } інакше якщо гілка.вид == ВидГілкиОперація {
          ціль дані = гілка.дані як ДаніГілкиОперація;
          звільнити_гілку(система, дані.ліво);
          звільнити_гілку(система, дані.право);
        } інакше якщо гілка.вид == ВидГілкиЯкщо {
          ціль дані = гілка.дані як ДаніГілкиЯкщо;
          звільнити_гілку(система, дані.умова);
          звільнити_тіло(система, дані.тіло);
          звільнити_тіло(система, дані.тіло_інакше);
        } інакше якщо гілка.вид == ВидГілкиПоки {
          ціль дані = гілка.дані як ДаніГілкиПоки;
          звільнити_гілку(система, дані.умова);
          звільнити_тіло(система, дані.тіло);
        } інакше якщо гілка.вид == ВидГілкиВернути {
          ціль дані = гілка.дані як ДаніГілкиВернути;
          звільнити_гілку(система, дані.значення);
        } інакше якщо гілка.вид == ВидГілкиЗначенняЯкщо {
          ціль дані = гілка.дані як ДаніГілкиЗначенняЯкщо;
          звільнити_гілку(система, дані.умова);
          звільнити_гілку(система, дані.значення_так);
          звільнити_гілку(система, дані.значення_ні);
        } інакше якщо гілка.вид == ВидГілкиСамоОперація {
          ціль дані = гілка.дані як ДаніГілкиСамоОперація;
          звільнити_гілку(система, дані.предмет);
        } інакше якщо гілка.вид == ВидГілкиВзяти {
          ціль дані = гілка.дані як ДаніГілкиВзяти;
          звільнити_памʼять(система, дані.шлях);
          звільнити_памʼять(система, дані.елементи);
        } інакше якщо гілка.вид == ВидГілкиСпробувати {
          ціль дані = гілка.дані як ДаніГілкиСпробувати;
          звільнити_тіло(система, дані.тіло);
          звільнити_тіло(система, дані.тіло_зловити);
        } інакше якщо гілка.вид == ВидГілкиВпасти {
          ціль дані = гілка.дані як ДаніГілкиВпасти;
          звільнити_гілку(система, дані.значення);
        } інакше якщо гілка.вид == ВидГілкиДати {
          ціль дані = гілка.дані як ДаніГілкиДати;
          звільнити_памʼять(система, дані.елементи);
        } інакше якщо гілка.вид == ВидГілкиМодуль {
          ціль дані = гілка.дані як ДаніГілкиМодуль;
          звільнити_тіло(система, дані.тіло);
        } інакше якщо гілка.вид == ВидГілкиСписок {
          ціль дані = гілка.дані як ДаніГілкиСписок;
          звільнити_гілки(система, Гілки { дані.кількість_елементів, дані.елементи });
        } інакше якщо гілка.вид == ВидГілкиСловник {
          ціль дані = гілка.дані як ДаніГілкиСловник;
          звільнити_елементи_словника(система, дані.кількість_елементів, дані.елементи);
        } інакше якщо гілка.вид == ВидГілкиПеребрати {
          ціль дані = гілка.дані як ДаніГілкиПеребрати;
          звільнити_гілку(система, дані.предмет);
          звільнити_тіло(система, дані.тіло);
        } інакше якщо гілка.вид == ВидГілкиЦикл {
          ціль дані = гілка.дані як ДаніГілкиЦикл;
          звільнити_тіло(система, дані.старт);
          звільнити_гілку(система, дані.умова);
          звільнити_тіло(система, дані.тіло);
          звільнити_тіло(система, дані.ітерація);
        } інакше якщо гілка.вид == ВидГілкиВизначитиЗзовні {
          ціль дані = гілка.дані як ДаніГілкиВизначитиЗзовні;
          звільнити_гілку(система, дані.значення);
        } інакше якщо гілка.вид == ВидГілкиВічнийЦикл {
          ціль дані = гілка.дані як ДаніГілкиВічнийЦикл;
          звільнити_тіло(система, дані.тіло);
        } інакше якщо гілка.вид == ВидГілкиВидалитиВластивість {
          ціль дані = гілка.дані як ДаніГілкиВидалитиВластивість;
          звільнити_гілку(система, дані.предмет);
        } інакше якщо гілка.вид == ВидГілкиВидалитиЕлемент {
          ціль дані = гілка.дані як ДаніГілкиВидалитиЕлемент;
          звільнити_гілку(система, дані.предмет);
          звільнити_гілку(система, дані.ключ);
        } інакше якщо гілка.вид == ВидГілкиЧекати {
          ціль дані = гілка.дані як ДаніГілкиЧекати;
          звільнити_гілку(система, дані.значення);
        } інакше якщо гілка.вид == ВидГілкиДіапазон {
          ціль дані = гілка.дані як ДаніГілкиДіапазон;
          звільнити_гілку(система, дані.від);
          звільнити_гілку(система, дані.до);
        } інакше якщо гілка.вид == ВидГілкиЗбитийТекст {
          ціль дані = гілка.дані як ДаніГілкиЗбитийТекст;
          звільнити_гілки(система, Гілки { дані.кількість_гілок, дані.гілки });
        }
        звільнити(система, гілка);
      }
    }
  
    дія звільнити_тіло(система: адреса<Система>, тіло: Гілки) {
      змінна ціль п: позитивне = 0;
      поки п < тіло.розмір {
        звільнити_гілку(система, тіло.дані[п]);
        п += 1;
      }
      звільнити_памʼять(система, тіло.дані);
    }
  
    дія звільнити_тип(система: адреса<Система>, тип: Тип) {
      змінна ціль п: позитивне = 0;
      поки п < тип.кількість_гілок {
        звільнити_гілку(система, тип.гілки[п]);
        п += 1;
      }
      звільнити_памʼять(система, тип.гілки);
    }
  
    дія звільнити_параметри(система: адреса<Система>, кількість_параметрів: позитивне, параметри: памʼять<Параметр>) {
      змінна ціль п: позитивне = 0;
      поки п < кількість_параметрів {
        якщо параметри[п].тип.заповнено == позитивне(так) {
          звільнити_тип(система, параметри[п].тип.значення);
        }
        звільнити_гілку(система, параметри[п].значення);
        п += 1;
      }
      звільнити_памʼять(система, параметри);
    }
  
    дія звільнити_аргументи(система: адреса<Система>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>) {
      змінна ціль п: позитивне = 0;
      поки п < кількість_аргументів {
        звільнити_гілку(система, аргументи[п].значення);
        п += 1;
      }
      звільнити_памʼять(система, аргументи);
    }
  
    дія звільнити_елементи_словника(система: адреса<Система>, кількість_елементів: позитивне, елементи: памʼять<ЕлементСловника>) {
      змінна ціль п: позитивне = 0;
      поки п < кількість_елементів {
        звільнити_гілку(система, елементи[п].ключ);
        звільнити_гілку(система, елементи[п].значення);
        п += 1;
      }
      звільнити_памʼять(система, елементи);
    }

    дія зʼїсти_міжрядки(слова: Слова, позиція_початку: позитивне, вихід_позиції_кінця: адреса<позитивне>): логічне;
    дія спробувати_розібрати_заперечення(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_двійкове_заперечення(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_префікс_плюс(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_префікс_мінус(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_видалити(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_чекати(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_частинку(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_атом(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_аргумент(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<Аргумент>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_молекулу(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_молекулу__хвіст(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, гілка_атома: адреса<Гілка>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_мікрооперацію(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_операцію(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, в_гнізді: логічне, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_операцію_1(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, гілка_ліво: адреса<Гілка>, мін: позитивне, в_гнізді: логічне, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_значення(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, в_гнізді: логічне, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_вернути(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_впасти(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_елемент_взяти(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<ЕлементВзяти>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_взяти(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_елемент_дати(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<ЕлементДати>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_дати(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_елемент_тіла(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_тіло(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<Гілки>, вихід_позиції_кінця: адреса<позитивне>, вид_слова_закінчення: позитивне, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_тип(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<Тип>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_параметр(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<Параметр>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_дію(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_структуру(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_модуль(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_якщо(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_поки(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_цикл(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_перебрати(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;
    дія спробувати_розібрати_спробувати(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне;

    дія зʼїсти_міжрядки(слова: Слова, позиція_початку: позитивне, вихід_позиції_кінця: адреса<позитивне>): логічне {
      якщо слова.дані[позиція_початку].вид != ВидСловаСимволМіжряд {
        вернути ні;
      }
      змінна ціль п = позиція_початку;
      поки слова.дані[п].вид == ВидСловаСимволМіжряд {
        п += 1;
      }
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_заперечення(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид != ВидСловаСимволЗнакОклику {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
      якщо спробувати_розібрати_мікрооперацію(система, слова, п, гілка_значення::адреса, п::адреса, позиція_помилки_гілки_значення::адреса) {
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення;
        вернути ні;
      }
      ціль гілка_самооперація = виділити<Гілка>(система);
      гілка_самооперація.вид = ВидГілкиСамоОперація;
      гілка_самооперація.дані = ДаніГілкиСамоОперація {
        операція = ВидСамоОпераціїЛогічнеНі,
        предмет = гілка_значення
      };
      гілка_самооперація.місцезнаходження = Місцезнаходження { позиція_початку };
      вихід::вміст = гілка_самооперація;
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_двійкове_заперечення(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид != ВидСловаСимволТильда {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
      якщо спробувати_розібрати_мікрооперацію(система, слова, п, гілка_значення::адреса, п::адреса, позиція_помилки_гілки_значення::адреса) {
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення;
        вернути ні;
      }
      ціль гілка_самооперація = виділити<Гілка>(система);
      гілка_самооперація.вид = ВидГілкиСамоОперація;
      гілка_самооперація.дані = ДаніГілкиСамоОперація {
        операція = ВидСамоОпераціїДвійковеНі,
        предмет = гілка_значення
      };
      гілка_самооперація.місцезнаходження = Місцезнаходження { позиція_початку };
      вихід::вміст = гілка_самооперація;
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_префікс_плюс(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид != ВидСловаСимволПлюс {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
      якщо спробувати_розібрати_мікрооперацію(система, слова, п, гілка_значення::адреса, п::адреса, позиція_помилки_гілки_значення::адреса) {
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення;
        вернути ні;
      }
      ціль гілка_самооперація = виділити<Гілка>(система);
      гілка_самооперація.вид = ВидГілкиСамоОперація;
      гілка_самооперація.дані = ДаніГілкиСамоОперація {
        операція = ВидСамоОпераціїПлюс,
        предмет = гілка_значення
      };
      гілка_самооперація.місцезнаходження = Місцезнаходження { позиція_початку };
      вихід::вміст = гілка_самооперація;
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_префікс_мінус(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид != ВидСловаСимволМінус {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
      якщо спробувати_розібрати_мікрооперацію(система, слова, п, гілка_значення::адреса, п::адреса, позиція_помилки_гілки_значення::адреса) {
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення;
        вернути ні;
      }
      ціль гілка_самооперація = виділити<Гілка>(система);
      гілка_самооперація.вид = ВидГілкиСамоОперація;
      гілка_самооперація.дані = ДаніГілкиСамоОперація {
        операція = ВидСамоОпераціїМінус,
        предмет = гілка_значення
      };
      гілка_самооперація.місцезнаходження = Місцезнаходження { позиція_початку };
      вихід::вміст = гілка_самооперація;
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_видалити(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид != ВидСловаВидалити {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
      якщо спробувати_розібрати_молекулу(система, слова, п, гілка_значення::адреса, п::адреса, позиція_помилки_гілки_значення::адреса) {
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення;
        вернути ні;
      }
      якщо гілка_значення.вид == ВидГілкиЗвернутись {
        ціль дані = гілка_значення.дані як ДаніГілкиЗвернутись;
        ціль гілка_видалити = виділити<Гілка>(система);
        гілка_видалити.вид = ВидГілкиВидалити;
        гілка_видалити.дані = ДаніГілкиВидалити {
          ідентифікатор = дані.ідентифікатор
        };
        гілка_видалити.місцезнаходження = Місцезнаходження { позиція_початку };
        вихід::вміст = гілка_видалити;
        вихід_позиції_кінця::вміст = п;
        звільнити(система, гілка_значення);
        вернути так;
      }
      якщо гілка_значення.вид == ВидГілкиОтримати {
        ціль дані = гілка_значення.дані як ДаніГілкиОтримати;
        ціль гілка_видалити_властивість = виділити<Гілка>(система);
        гілка_видалити_властивість.вид = ВидГілкиВидалитиВластивість;
        гілка_видалити_властивість.дані = ДаніГілкиВидалитиВластивість {
          предмет = дані.предмет,
          ідентифікатор = дані.ідентифікатор
        };
        гілка_видалити_властивість.місцезнаходження = Місцезнаходження { позиція_початку };
        вихід::вміст = гілка_видалити_властивість;
        вихід_позиції_кінця::вміст = п;
        звільнити(система, гілка_значення);
        вернути так;
      }
      якщо гілка_значення.вид == ВидГілкиОтриматиЕлемент {
        ціль дані = гілка_значення.дані як ДаніГілкиОтриматиЕлемент;
        ціль гілка_видалити_елемент = виділити<Гілка>(система);
        гілка_видалити_елемент.вид = ВидГілкиВидалитиЕлемент;
        гілка_видалити_елемент.дані = ДаніГілкиВидалитиЕлемент {
          предмет = дані.предмет,
          ключ = дані.ключ
        };
        гілка_видалити_елемент.місцезнаходження = Місцезнаходження { позиція_початку };
        вихід::вміст = гілка_видалити_елемент;
        вихід_позиції_кінця::вміст = п;
        звільнити(система, гілка_значення);
        вернути так;
      }
      вихід_позиції_помилки::вміст = п;
      вернути ні;
    }

    дія спробувати_розібрати_чекати(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид != ВидСловаЧекати {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
      якщо спробувати_розібрати_мікрооперацію(система, слова, п, гілка_значення::адреса, п::адреса, позиція_помилки_гілки_значення::адреса) {
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення;
        вернути ні;
      }
      ціль гілка_чекати = виділити<Гілка>(система);
      гілка_чекати.вид = ВидГілкиЧекати;
      гілка_чекати.дані = ДаніГілкиЧекати {
        значення = гілка_значення
      };
      гілка_чекати.місцезнаходження = Місцезнаходження { позиція_початку };
      вихід::вміст = гілка_чекати;
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_частинку(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид == ВидСловаСимволВідкритаДужка {
        п += 1;
        зʼїсти_міжрядки(слова, п, п::адреса);
        змінна ціль гілка_гнізда: адреса<Гілка> = пусто;
        змінна ціль позиція_помилки_гілки_гнізда: позитивне = 0;
        якщо спробувати_розібрати_значення(система, слова, п, гілка_гнізда::адреса, п::адреса, так, позиція_помилки_гілки_гнізда::адреса) {
          п += 1;
          зʼїсти_міжрядки(слова, п, п::адреса);
          якщо слова.дані[п].вид == ВидСловаСимволЗакритаДужка {
            вихід::вміст = гілка_гнізда;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше {
            позиція_помилки_гілки_гнізда = п;
            звільнити_гілку(система, гілка_гнізда);
          }
        }
        вихід_позиції_помилки::вміст = позиція_помилки_гілки_гнізда;
        вернути ні;
      }
      п = позиція_початку;
      якщо слова.дані[п].вид == ВидСловаІдентифікатор {
        ціль позиція_ідентифікатора = п;
        п += 1;
        якщо слова.дані[п].вид == ВидСловаТекст {
          змінна ціль гілка_тексту = виділити<Гілка>(система);
          гілка_тексту.вид = ВидГілкиТекст;
          гілка_тексту.дані = ДаніГілкиТекст {
            ідентифікатор = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { позиція_ідентифікатора } },
            позиція_слова = п
          };
          гілка_тексту.місцезнаходження = Місцезнаходження { позиція_ідентифікатора };
          вихід::вміст = гілка_тексту;
          вихід_позиції_кінця::вміст = п;
          вернути так;
        } інакше якщо слова.дані[п].вид == ВидСловаБагаторядковийТекст {
          змінна ціль гілка_тексту = виділити<Гілка>(система);
          гілка_тексту.вид = ВидГілкиТекст;
          гілка_тексту.дані = ДаніГілкиТекст {
            ідентифікатор = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { позиція_ідентифікатора } },
            позиція_слова = п
          };
          гілка_тексту.місцезнаходження = Місцезнаходження { позиція_ідентифікатора };
          вихід::вміст = гілка_тексту;
          вихід_позиції_кінця::вміст = п;
          вернути так;
        } інакше якщо слова.дані[п].вид == ВидСловаСимвол {
          змінна ціль гілка_символа = виділити<Гілка>(система);
          гілка_символа.вид = ВидГілкиСимвол;
          гілка_символа.дані = ДаніГілкиСимвол {
            ідентифікатор = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { позиція_ідентифікатора } },
            позиція_слова = п
          };
          гілка_символа.місцезнаходження = Місцезнаходження { позиція_ідентифікатора };
          вихід::вміст = гілка_символа;
          вихід_позиції_кінця::вміст = п;
          вернути так;
        } інакше якщо слова.дані[п].вид == ВидСловаПочатокЗбитогоТексту {
          змінна ціль гілка_збитого_тексту = виділити<Гілка>(система);
          змінна ціль позиція_помилки_гілки_збитого_тексту: позитивне = 0;
          якщо спробувати_розібрати_частинку(система, слова, п, гілка_збитого_тексту::адреса, п::адреса, позиція_помилки_гілки_збитого_тексту::адреса) {
            ціль дані = гілка_збитого_тексту.дані як ДаніГілкиЗбитийТекст;
            дані.ідентифікатор = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { позиція_ідентифікатора } };
            гілка_збитого_тексту.дані = дані;
            гілка_збитого_тексту.місцезнаходження = Місцезнаходження { позиція_ідентифікатора };
            вихід::вміст = гілка_збитого_тексту;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше {
            вихід_позиції_помилки::вміст = позиція_помилки_гілки_збитого_тексту;
            вернути ні;
          }
        } інакше {
          п -= 1;
        }
        змінна ціль гілка_звернення = виділити<Гілка>(система);
        гілка_звернення.вид = ВидГілкиЗвернутись;
        гілка_звернення.дані = ДаніГілкиЗвернутись {
          ідентифікатор = Ідентифікатор { п }
        };
        гілка_звернення.місцезнаходження = Місцезнаходження { п };
        вихід::вміст = гілка_звернення;
        вихід_позиції_кінця::вміст = п;
        вернути так;
      }
      якщо слова.дані[п].вид == ВидСловаЧисло {
        змінна ціль гілка_звернення = виділити<Гілка>(система);
        гілка_звернення.вид = ВидГілкиЧисло;
        гілка_звернення.дані = ДаніГілкиЧисло {
          позиція_слова = п
        };
        гілка_звернення.місцезнаходження = Місцезнаходження { п };
        вихід::вміст = гілка_звернення;
        вихід_позиції_кінця::вміст = п;
        вернути так;
      }
      якщо слова.дані[п].вид == ВидСловаТекст {
        змінна ціль гілка_тексту = виділити<Гілка>(система);
        гілка_тексту.вид = ВидГілкиТекст;
        гілка_тексту.дані = ДаніГілкиТекст {
          ідентифікатор = можливо<Ідентифікатор> { позитивне(ні), ... },
          позиція_слова = п
        };
        гілка_тексту.місцезнаходження = Місцезнаходження { п };
        вихід::вміст = гілка_тексту;
        вихід_позиції_кінця::вміст = п;
        вернути так;
      }
      якщо слова.дані[п].вид == ВидСловаБагаторядковийТекст {
        змінна ціль гілка_тексту = виділити<Гілка>(система);
        гілка_тексту.вид = ВидГілкиТекст;
        гілка_тексту.дані = ДаніГілкиТекст {
          ідентифікатор = можливо<Ідентифікатор> { позитивне(ні), ... },
          позиція_слова = п
        };
        гілка_тексту.місцезнаходження = Місцезнаходження { п };
        вихід::вміст = гілка_тексту;
        вихід_позиції_кінця::вміст = п;
        вернути так;
      }
      якщо слова.дані[п].вид == ВидСловаСимвол {
        ціль гілка_символа = виділити<Гілка>(система);
        гілка_символа.вид = ВидГілкиСимвол;
        гілка_символа.дані = ДаніГілкиСимвол {
          ідентифікатор = можливо<Ідентифікатор> { позитивне(ні), ... },
          позиція_слова = п
        };
        гілка_символа.місцезнаходження = Місцезнаходження { п };
        вихід::вміст = гілка_символа;
        вихід_позиції_кінця::вміст = п;
        вернути так;
      }
      якщо слова.дані[п].вид == ВидСловаПочатокЗбитогоТексту {
        п += 1;
        змінна ціль накопичувач_гілок = зробити_накопичувач<адреса<Гілка>>(система);
        поки п < слова.розмір {
          змінна ціль гілка_значення: адреса<Гілка> = пусто;
          змінна ціль позиція_помилки_збитого_тексту: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_значення::адреса, п::адреса, ні, позиція_помилки_збитого_тексту::адреса) {
            покласти_в_накопичувач<адреса<Гілка>>(система, накопичувач_гілок::адреса, гілка_значення);
            п += 1;
          } інакше {
            вихід_позиції_помилки::вміст = позиція_помилки_збитого_тексту;
            звільнити_гілки(система, Гілки { накопичувач_гілок.розмір, накопичувач_гілок.дані });
            вернути ні;
          }
          якщо слова.дані[п].вид == ВидСловаРоздільникЗбитогоТексту {
            п += 1;
          } інакше якщо слова.дані[п].вид == ВидСловаКінецьЗбитогоТексту {
            стрибнути вихід_збитого_тексту;
          } інакше {
            вихід_позиції_помилки::вміст = п;
            звільнити_гілки(система, Гілки { накопичувач_гілок.розмір, накопичувач_гілок.дані });
            вернути ні;
          }
        }
        вихід_збитого_тексту:
        якщо накопичувач_гілок.розмір == 1 {
          ціль гілка = накопичувач_гілок.дані[0];
          звільнити_памʼять(система, накопичувач_гілок.дані);
          вихід::вміст = гілка;
          вихід_позиції_кінця::вміст = п;
          вернути так;
        } інакше {
          ціль гілка_збитого_тексту = виділити<Гілка>(система);
          гілка_збитого_тексту.вид = ВидГілкиЗбитийТекст;
          гілка_збитого_тексту.дані = ДаніГілкиЗбитийТекст {
            ідентифікатор = можливо<Ідентифікатор> { позитивне(ні), ... },
            кількість_гілок = накопичувач_гілок.розмір,
            гілки = накопичувач_гілок.дані,
          };
          гілка_збитого_тексту.місцезнаходження = Місцезнаходження { п };
          вихід::вміст = гілка_збитого_тексту;
          вихід_позиції_кінця::вміст = п;
          вернути так;
        }
      }
      вихід_позиції_помилки::вміст = п;
      вернути ні;
    }

    дія спробувати_розібрати_атом(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид == ВидСловаСимволКвадратнаВідкритаДужка {
        ціль позиція_початку_списку = п;
        п += 1;
        зʼїсти_міжрядки(слова, п, п::адреса);
        якщо слова.дані[п].вид == ВидСловаСимволКвадратнаЗакритаДужка {
          ціль гілка_списку = виділити<Гілка>(система);
          гілка_списку.вид = ВидГілкиСписок;
          гілка_списку.дані = ДаніГілкиСписок {
            кількість_елементів = 0,
            елементи = пусто
          };
          гілка_списку.місцезнаходження = Місцезнаходження { позиція_початку_списку };
          вихід::вміст = гілка_списку;
          вихід_позиції_кінця::вміст = п;
          вернути так;
        }
        якщо слова.дані[п].вид == ВидСловаСимволРівно {
          п += 1;
          зʼїсти_міжрядки(слова, п, п::адреса);
          якщо слова.дані[п].вид == ВидСловаСимволКвадратнаЗакритаДужка {
            ціль гілка_словника = виділити<Гілка>(система);
            гілка_словника.вид = ВидГілкиСловник;
            гілка_словника.дані = ДаніГілкиСловник {
              кількість_елементів = 0,
              елементи = пусто
            };
            гілка_словника.місцезнаходження = Місцезнаходження { позиція_початку_списку };
            вихід::вміст = гілка_словника;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          }
          вихід_позиції_помилки::вміст = п;
          вернути ні;
        }
        ціль елементи_списку = зробити_накопичувач<адреса<Гілка>>(система);
        ціль елементи_словника = зробити_накопичувач<ЕлементСловника>(система);
        поки п < слова.розмір {
          змінна ціль гілка_ключа_елемента: адреса<Гілка> = пусто;
          змінна ціль гілка_значення_елемента: адреса<Гілка> = пусто;
          змінна ціль позиція_помилки_елемента: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_ключа_елемента::адреса, п::адреса, ні, позиція_помилки_елемента::адреса) {
            п += 1;
            зʼїсти_міжрядки(слова, п, п::адреса);
            якщо слова.дані[п].вид == ВидСловаСимволРівно {
              п += 1;
              зʼїсти_міжрядки(слова, п, п::адреса);
              якщо спробувати_розібрати_значення(система, слова, п, гілка_значення_елемента::адреса, п::адреса, ні, позиція_помилки_елемента::адреса) {
                п += 1;
              } інакше {
                звільнити_гілку(система, гілка_ключа_елемента);
                звільнити_гілки(система, Гілки { елементи_списку.розмір, елементи_списку.дані });
                звільнити_елементи_словника(система, елементи_словника.розмір, елементи_словника.дані);
                вихід_позиції_помилки::вміст = позиція_помилки_елемента;
                вернути ні;
              }
            } інакше {
              гілка_значення_елемента = гілка_ключа_елемента;
              гілка_ключа_елемента = пусто;
            }


          } інакше {
            звільнити_гілки(система, Гілки { елементи_списку.розмір, елементи_списку.дані });
            звільнити_елементи_словника(система, елементи_словника.розмір, елементи_словника.дані);
            вихід_позиції_помилки::вміст = позиція_помилки_елемента;
            вернути ні;
          }
          якщо гілка_ключа_елемента == пусто {
            якщо елементи_словника.розмір != 0 {
              звільнити_гілку(система, гілка_ключа_елемента);
              звільнити_гілку(система, гілка_значення_елемента);
              звільнити_гілки(система, Гілки { елементи_списку.розмір, елементи_списку.дані });
              звільнити_елементи_словника(система, елементи_словника.розмір, елементи_словника.дані);
              вихід_позиції_помилки::вміст = позиція_помилки_елемента;
              вернути ні;
            }
            покласти_в_накопичувач<адреса<Гілка>>(система, елементи_списку::адреса, гілка_значення_елемента);
          } інакше {
            якщо елементи_списку.розмір != 0 {
              звільнити_гілку(система, гілка_ключа_елемента);
              звільнити_гілку(система, гілка_значення_елемента);
              звільнити_гілки(система, Гілки { елементи_списку.розмір, елементи_списку.дані });
              звільнити_елементи_словника(система, елементи_словника.розмір, елементи_словника.дані);
              вихід_позиції_помилки::вміст = позиція_помилки_елемента;
              вернути ні;
            }
            покласти_в_накопичувач<ЕлементСловника>(система, елементи_словника::адреса, ЕлементСловника {
              ключ = гілка_ключа_елемента,
              значення = гілка_значення_елемента,
              місцезнаходження = Місцезнаходження { позиція_початку }
            });
          }
          зʼїсти_міжрядки(слова, п, п::адреса);
          якщо слова.дані[п].вид == ВидСловаСимволКома {
            п += 1;
            зʼїсти_міжрядки(слова, п, п::адреса);
          } інакше якщо слова.дані[п].вид == ВидСловаСимволКвадратнаЗакритаДужка {
            якщо елементи_словника.розмір != 0 {
              ціль гілка_словника = виділити<Гілка>(система);
              гілка_словника.вид = ВидГілкиСловник;
              гілка_словника.дані = ДаніГілкиСловник {
                кількість_елементів = елементи_словника.розмір,
                елементи = елементи_словника.дані
              };
              гілка_словника.місцезнаходження = Місцезнаходження { позиція_початку_списку };
              вихід::вміст = гілка_словника;
              вихід_позиції_кінця::вміст = п;
              вернути так;
            } інакше {
              ціль гілка_списку = виділити<Гілка>(система);
              гілка_списку.вид = ВидГілкиСписок;
              гілка_списку.дані = ДаніГілкиСписок {
                кількість_елементів = елементи_списку.розмір,
                елементи = елементи_списку.дані
              };
              гілка_списку.місцезнаходження = Місцезнаходження { позиція_початку_списку };
              вихід::вміст = гілка_списку;
              вихід_позиції_кінця::вміст = п;
              вернути так;
            }
          } інакше {
            звільнити_гілки(система, Гілки { елементи_списку.розмір, елементи_списку.дані });
            звільнити_елементи_словника(система, елементи_словника.розмір, елементи_словника.дані);
          }
        }
        звільнити_гілки(система, Гілки { елементи_списку.розмір, елементи_списку.дані });
        звільнити_елементи_словника(система, елементи_словника.розмір, елементи_словника.дані);
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п = позиція_початку;
      якщо спробувати_розібрати_частинку(система, слова, п, вихід, вихід_позиції_кінця, вихід_позиції_помилки) {
        вернути так;
      }
      вернути ні;
    }

    дія спробувати_розібрати_аргумент(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<Аргумент>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      змінна ціль має_ідентифікатор = ні;
      ціль позиція_ідентифікатора = п;
      якщо слова.дані[п].вид == ВидСловаІдентифікатор {
        має_ідентифікатор = так;
        п += 1;
        зʼїсти_міжрядки(слова, п, п::адреса);
        якщо слова.дані[п].вид == ВидСловаСимволРівно {
          п += 1;
          зʼїсти_міжрядки(слова, п, п::адреса);
        } інакше {
          має_ідентифікатор = ні;
          п = позиція_ідентифікатора;
        }
      }
      змінна ціль гілка_значення_аргумента: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_аргумента: позитивне = 0;
      якщо спробувати_розібрати_значення(система, слова, п, гілка_значення_аргумента::адреса, п::адреса, ні, позиція_помилки_аргумента::адреса) {
        якщо має_ідентифікатор {
          вихід::вміст = Аргумент {
            ідентифікатор = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { позиція_ідентифікатора } },
            значення = гілка_значення_аргумента,
            місцезнаходження = Місцезнаходження { позиція_початку }
          };
        } інакше {
          вихід::вміст = Аргумент {
            ідентифікатор = можливо<Ідентифікатор> { позитивне(ні), ... },
            значення = гілка_значення_аргумента,
            місцезнаходження = Місцезнаходження { позиція_початку }
          };
        }
        вихід_позиції_кінця::вміст = п;
        вернути так;
      }
      вихід_позиції_помилки::вміст = позиція_помилки_аргумента;
      вернути ні;
    }

    //
    // --- з рекурсією ---
    // молекула = (молекула ('.' ідентифікатор)) | атом;
    //
    // --- без рекурсії ---
    // молекула = атом хвіст_молекули;
    // хвіст_молекули = ('.' ідентифікатор хвіст_молекули) | ;
    //
    дія спробувати_розібрати_молекулу(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      змінна ціль гілка_атома: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_атома: позитивне = 0;
      якщо спробувати_розібрати_атом(система, слова, п, гілка_атома::адреса, п::адреса, позиція_помилки_атома::адреса) {
        п += 1;
        змінна ціль гілка_хвоста: адреса<Гілка> = пусто;
        змінна ціль позиція_помилки_хвоста: позитивне = 0;
        якщо спробувати_розібрати_молекулу__хвіст(система, слова, п, гілка_хвоста::адреса, п::адреса, гілка_атома, позиція_помилки_хвоста::адреса) {
          вихід::вміст = гілка_хвоста;
          вихід_позиції_кінця::вміст = п;
          вернути так;
        } інакше {
          п -= 1;
        }
        вихід::вміст = гілка_атома;
        вихід_позиції_кінця::вміст = п;
        вернути так;
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_атома;
        стрибнути звільнити_і_вийти;
      }
      звільнити_і_вийти:
      вернути ні;
    }

    дія спробувати_розібрати_молекулу__хвіст(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, гілка_атома: адреса<Гілка>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      змінна ціль п_перед_зʼїданням = п;
      якщо зʼїсти_міжрядки(слова, п, п::адреса) {
        якщо слова.дані[п].вид == ВидСловаСимволКрапка {
          стрибнути отримання_властивості;
        } інакше {
          п = п_перед_зʼїданням;
        }
      }
      якщо слова.дані[п].вид == ВидСловаСимволКрапка { // отримати властивість
        отримання_властивості:
        п += 1;
        зʼїсти_міжрядки(слова, п, п::адреса);
        якщо слова.дані[п].вид == ВидСловаІдентифікатор {
          ціль гілка_отримати_властивість = виділити<Гілка>(система);
          гілка_отримати_властивість.вид = ВидГілкиОтримати;
          гілка_отримати_властивість.дані = ДаніГілкиОтримати {
            предмет = гілка_атома,
            ідентифікатор = Ідентифікатор { п }
          };
          гілка_отримати_властивість.місцезнаходження = Місцезнаходження { 0 };
          п += 1;
          змінна ціль позиція_помилки_молекули_хвоста: позитивне = 0;
          якщо спробувати_розібрати_молекулу__хвіст(система, слова, п, вихід, вихід_позиції_кінця, гілка_отримати_властивість, позиція_помилки_молекули_хвоста::адреса) {
            вернути так;
          } інакше {
            звільнити(система, гілка_отримати_властивість);
            вихід_позиції_помилки::вміст = позиція_помилки_молекули_хвоста;
            вернути ні;
          }
        }
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      } інакше якщо слова.дані[п].вид == ВидСловаСимволКвадратнаВідкритаДужка { // отримати елемент
        п += 1;
        зʼїсти_міжрядки(слова, п, п::адреса);
        змінна ціль гілка_ключа: адреса<Гілка> = пусто;
        змінна ціль позиція_помилки_ключа: позитивне = 0;
        якщо спробувати_розібрати_молекулу(система, слова, п, гілка_ключа::адреса, п::адреса, позиція_помилки_ключа::адреса) {
          п += 1;
        } інакше {
          вихід_позиції_помилки::вміст = позиція_помилки_ключа;
          вернути ні;
        }
        ціль гілка_отримати_елемент = виділити<Гілка>(система);
        гілка_отримати_елемент.вид = ВидГілкиОтриматиЕлемент;
        гілка_отримати_елемент.дані = ДаніГілкиОтриматиЕлемент {
          предмет = гілка_атома,
          ключ = гілка_ключа
        };
        гілка_отримати_елемент.місцезнаходження = Місцезнаходження { 0 };
        зʼїсти_міжрядки(слова, п, п::адреса);
        якщо слова.дані[п].вид == ВидСловаСимволКвадратнаЗакритаДужка {
          п += 1;
          змінна ціль позиція_помилки_молекули_хвоста: позитивне = 0;
          якщо спробувати_розібрати_молекулу__хвіст(система, слова, п, вихід, вихід_позиції_кінця, гілка_отримати_елемент, позиція_помилки_молекули_хвоста::адреса) {
            вернути так;
          } інакше {
            звільнити(система, гілка_ключа);
            звільнити(система, гілка_отримати_елемент);
            вихід_позиції_помилки::вміст = позиція_помилки_молекули_хвоста;
            вернути ні;
          }
        }
        звільнити(система, гілка_ключа);
        звільнити(система, гілка_отримати_елемент);
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      } інакше якщо слова.дані[п].вид == ВидСловаСимволВідкритаДужка { // виконати дію
        п += 1;
        зʼїсти_міжрядки(слова, п, п::адреса);
        ціль аргументи = зробити_накопичувач<Аргумент>(система);
        якщо слова.дані[п].вид == ВидСловаСимволЗакритаДужка {
          п += 1;
          стрибнути виклик__хвіст;
        }
        поки п < слова.розмір {
          змінна ціль аргумент = Аргумент { ... };
          змінна ціль позиція_помилки_аргумента: позитивне = 0;
          якщо спробувати_розібрати_аргумент(система, слова, п, аргумент::адреса, п::адреса, позиція_помилки_аргумента::адреса) {
            покласти_в_накопичувач<Аргумент>(система, аргументи::адреса, аргумент);
            п += 1;
            зʼїсти_міжрядки(слова, п, п::адреса);
            якщо слова.дані[п].вид == ВидСловаСимволЗакритаДужка {
              п += 1;
              стрибнути виклик__хвіст;
            } інакше якщо слова.дані[п].вид == ВидСловаСимволКома {
              п += 1;
              зʼїсти_міжрядки(слова, п, п::адреса);
            } інакше {
              звільнити_аргументи(система, аргументи.розмір, аргументи.дані);
              вихід_позиції_помилки::вміст = п;
              вернути ні;
            }
          } інакше {
            звільнити_аргументи(система, аргументи.розмір, аргументи.дані);
            вихід_позиції_помилки::вміст = позиція_помилки_аргумента;
            вернути ні;
          }
        }
        якщо слова.дані[п].вид == ВидСловаСимволЗакритаДужка {
          п += 1;
          виклик__хвіст:
          ціль гілка_виконати = виділити<Гілка>(система);
          гілка_виконати.вид = ВидГілкиВиконати;
          гілка_виконати.дані = ДаніГілкиВиконати {
            предмет = гілка_атома,
            кількість_аргументів = аргументи.розмір,
            аргументи = аргументи.дані,
          };
          гілка_виконати.місцезнаходження = Місцезнаходження { 0 };
          змінна ціль позиція_помилки_молекули_хвоста: позитивне = 0;
          якщо спробувати_розібрати_молекулу__хвіст(система, слова, п, вихід, вихід_позиції_кінця, гілка_виконати, позиція_помилки_молекули_хвоста::адреса) {
            вернути так;
          } інакше {
            звільнити_аргументи(система, аргументи.розмір, аргументи.дані);
            вихід_позиції_помилки::вміст = позиція_помилки_молекули_хвоста;
            вернути ні;
          }
        }
        звільнити_аргументи(система, аргументи.розмір, аргументи.дані);
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      вихід::вміст = гілка_атома;
      вихід_позиції_кінця::вміст = п - 1;
      вернути так;
    }

    дія спробувати_розібрати_мікрооперацію(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      змінна ціль гілка_молекули: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_молекули: позитивне = 0;
      якщо спробувати_розібрати_молекулу(система, слова, п, гілка_молекули::адреса, п::адреса, позиція_помилки_молекули::адреса) {
        п += 1;
        якщо слова.дані[п].вид == ВидСловаСимволКрапка {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволКрапка {
            п += 1;
            змінна ціль включно = ні;
            якщо слова.дані[п].вид == ВидСловаСимволРівно {
              включно = так;
              п += 1;
            }
            змінна ціль гілка_молекули_право: адреса<Гілка> = пусто;
            змінна ціль позиція_помилки_молекули_право: позитивне = 0;
            якщо спробувати_розібрати_молекулу(система, слова, п, гілка_молекули_право::адреса, п::адреса, позиція_помилки_молекули_право::адреса) {
              ціль гілка_діапазон = виділити<Гілка>(система);
              гілка_діапазон.вид = ВидГілкиДіапазон;
              гілка_діапазон.дані = ДаніГілкиДіапазон {
                від = гілка_молекули,
                до = гілка_молекули_право,
                включно = позитивне(включно)
              };
              гілка_діапазон.місцезнаходження = Місцезнаходження { позиція_початку };
              вихід::вміст = гілка_діапазон;
              вихід_позиції_кінця::вміст = п;
              вернути так;
            } інакше {
              вихід_позиції_помилки::вміст = позиція_помилки_молекули_право;
              вернути ні;
            }
          } інакше {
            вихід::вміст = гілка_молекули;
            вихід_позиції_кінця::вміст = п - 2;
            вернути так;
          }
        } інакше {
          вихід::вміст = гілка_молекули;
          вихід_позиції_кінця::вміст = п - 1;
          вернути так;
        }
      }
      змінна ціль позиція_помилки: позитивне = позиція_помилки_молекули;
      змінна ціль найдовша_позиція_помилки: позитивне = позиція_помилки;
      якщо спробувати_розібрати_заперечення(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_двійкове_заперечення(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_префікс_плюс(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_префікс_мінус(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_видалити(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_чекати(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      вихід_позиції_помилки::вміст = найдовша_позиція_помилки;
      вернути ні;
    }

    дія спробувати_розібрати_операцію(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, в_гнізді: логічне, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      змінна ціль гілка_ліво: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_ліво: позитивне = 0;
      якщо спробувати_розібрати_мікрооперацію(система, слова, п, гілка_ліво::адреса, п::адреса, позиція_помилки_ліво::адреса) {
        п += 1;
        змінна ціль гілка_результату: адреса<Гілка> = пусто;
        змінна ціль позиція_помилки_гілки_результату: позитивне = 0;
        якщо спробувати_розібрати_операцію_1(система, слова, п, гілка_результату::адреса, п::адреса, гілка_ліво, 0, в_гнізді, позиція_помилки_гілки_результату::адреса) {
          вихід::вміст = гілка_результату;
          вихід_позиції_кінця::вміст = п;
          вернути так;
        } інакше {
          вихід::вміст = гілка_ліво;
          вихід_позиції_кінця::вміст = п - 1;
          вернути так;
        }
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_ліво;
        стрибнути звільнити_і_вийти;
      }
      звільнити_і_вийти:
      звільнити_гілку(система, гілка_ліво);
      вернути ні;
    }

    структура ІнформаціяОперації {
      вид_операції: позитивне;
      кількість_слів: позитивне;
      пріоритет: позитивне;
    }
  
    дія дізнатись_інформацію_операції(слова: Слова, позиція: позитивне): ІнформаціяОперації {
      якщо слова.дані[позиція].вид == ВидСловаКІНЕЦЬСЛІВ {
        вернути ІнформаціяОперації { 0, 0, 0 };
      }
      ціль вид = слова.дані[позиція].вид;
      ціль вид_далі = слова.дані[позиція + 1].вид;
      якщо вид == ВидСловаСимволПлюс {
        вернути ІнформаціяОперації { ВидОпераціїДодавання, 1, 97 };
      }
      якщо вид == ВидСловаСимволМінус {
        вернути ІнформаціяОперації { ВидОпераціїВіднімання, 1, 97 };
      }
      якщо вид == ВидСловаСимволПомножити {
        якщо вид_далі == ВидСловаСимволПомножити {
          вернути ІнформаціяОперації { ВидОпераціїПіднесенняДоСтепеня, 2, 100 };
        }
        вернути ІнформаціяОперації { ВидОпераціїМноження, 1, 98 };
      }
      якщо вид == ВидСловаСимволПоділити {
        якщо вид_далі == ВидСловаСимволПоділити {
          вернути ІнформаціяОперації { ВидОпераціїДіленняНаціло, 2, 99 };
        }
        вернути ІнформаціяОперації { ВидОпераціїДілення, 1, 98 };
      }
      якщо вид == ВидСловаСимволЗалишку {
        вернути ІнформаціяОперації { ВидОпераціїМодуль, 1, 98 };
      }
      якщо вид == ВидСловаСимволБільше {
        якщо вид_далі == ВидСловаСимволБільше {
          якщо слова.дані[позиція + 2].вид == ВидСловаСимволБільше {
            вернути ІнформаціяОперації { ВидОпераціїЗсувВправоЗнаковий, 3, 96 };
          }
          вернути ІнформаціяОперації { ВидОпераціїЗсувВправо, 2, 96 };
        }
        вернути ІнформаціяОперації { ВидОпераціїБільше, 1, 95 };
      }
      якщо вид == ВидСловаСимволМенше {
        якщо вид_далі == ВидСловаСимволМенше {
          вернути ІнформаціяОперації { ВидОпераціїЗсувВліво, 2, 96 };
        }
        вернути ІнформаціяОперації { ВидОпераціїМенше, 1, 95 };
      }
      якщо вид == ВидСловаБільше {
        вернути ІнформаціяОперації { ВидОпераціїБільше, 1, 95 };
      }
      якщо вид == ВидСловаМенше {
        вернути ІнформаціяОперації { ВидОпераціїМенше, 1, 95 };
      }
      якщо вид == ВидСловаМістить {
        вернути ІнформаціяОперації { ВидОпераціїМістить, 1, 93 };
      }
      якщо вид == ВидСловаЄ {
        вернути ІнформаціяОперації { ВидОпераціїЄ, 1, 93 };
      }
      якщо вид == ВидСловаНе {
        якщо вид_далі == ВидСловаБільше {
          вернути ІнформаціяОперації { ВидОпераціїМеншеРівне, 2, 95 };
        }
        якщо вид_далі == ВидСловаМенше {
          вернути ІнформаціяОперації { ВидОпераціїБільшеРівне, 2, 95 };
        }
        якщо вид_далі == ВидСловаРівно {
          вернути ІнформаціяОперації { ВидОпераціїНерівне, 2, 94 };
        }
        якщо вид_далі == ВидСловаМістить {
          вернути ІнформаціяОперації { ВидОпераціїНеМістить, 2, 93 };
        }
        якщо вид_далі == ВидСловаЄ {
          вернути ІнформаціяОперації { ВидОпераціїНеЄ, 2, 93 };
        }
      }
      якщо вид == ВидСловаСимволЗнакОклику {
        якщо вид_далі == ВидСловаСимволРівно {
          вернути ІнформаціяОперації { ВидОпераціїНерівне, 2, 94 };
        }
      }
      якщо вид == ВидСловаСимволРівно {
        якщо вид_далі == ВидСловаСимволРівно {
          вернути ІнформаціяОперації { ВидОпераціїРівне, 2, 94 };
        }
      }
      якщо вид == ВидСловаРівно {
        вернути ІнформаціяОперації { ВидОпераціїРівне, 1, 94 };
      }
      якщо вид == ВидСловаСимволІ {
        якщо вид_далі == ВидСловаСимволІ {
          вернути ІнформаціяОперації { ВидОпераціїІ, 2, 89 };
        }
        вернути ІнформаціяОперації { ВидОпераціїДІ, 1, 92 };
      }
      якщо вид == ВидСловаІ {
        вернути ІнформаціяОперації { ВидОпераціїІ, 1, 89 };
      }
      якщо вид == ВидСловаСимволПірамідка {
        вернути ІнформаціяОперації { ВидОпераціїВАБО, 1, 91 };
      }
      якщо вид == ВидСловаСимволАбо {
        якщо вид_далі == ВидСловаСимволАбо {
          вернути ІнформаціяОперації { ВидОпераціїАБО, 2, 88 };
        }
        вернути ІнформаціяОперації { ВидОпераціїДАБО, 1, 90 };
      }
      якщо вид == ВидСловаАбо {
        вернути ІнформаціяОперації { ВидОпераціїАБО, 1, 88 };
      }
      вернути ІнформаціяОперації { 0, 0, 0 };
    }
  
    дія перевірити_оп1(інформація_операції: ІнформаціяОперації, мін: позитивне): логічне {
      якщо інформація_операції.вид_операції == 0 {
        вернути ні;
      }
      якщо інформація_операції.пріоритет >= мін {
        вернути так;
      }
      вернути ні;
    }
  
    дія перевірити_оп2(інформація_операції: ІнформаціяОперації, збережена_інформація_операції: ІнформаціяОперації): логічне {
      якщо інформація_операції.вид_операції == 0 {
        вернути ні;
      }
      якщо інформація_операції.пріоритет > збережена_інформація_операції.пріоритет {
        вернути так;
      }
      якщо інформація_операції.вид_операції == ВидОпераціїПіднесенняДоСтепеня {
        вернути інформація_операції.пріоритет == збережена_інформація_операції.пріоритет;
      }
      вернути ні;
    }

    дія спробувати_розібрати_операцію_1(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, гілка_ліво: адреса<Гілка>, мін: позитивне, в_гнізді: логічне, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      змінна ціль має_міжряд = ні;
      якщо в_гнізді == так {
        якщо слова.дані[п].вид == ВидСловаСимволМіжряд {
          має_міжряд = так;
          п += 1;
        }
      }
      змінна ціль інформація_операції = дізнатись_інформацію_операції(слова, п);
      поки перевірити_оп1(інформація_операції, мін) {
        має_міжряд = ні;
        ціль збережена_інформація_операції = інформація_операції;
        п += інформація_операції.кількість_слів;
        якщо в_гнізді == так {
          зʼїсти_міжрядки(слова, п, п::адреса);
        }
        змінна ціль гілка_право: адреса<Гілка> = пусто;
        змінна ціль позиція_помилки_право: позитивне = 0;
        якщо спробувати_розібрати_мікрооперацію(система, слова, п, гілка_право::адреса, п::адреса, позиція_помилки_право::адреса) {
          п += 1;
          якщо в_гнізді == так {
            зʼїсти_міжрядки(слова, п, п::адреса);
          }
          інформація_операції = дізнатись_інформацію_операції(слова, п);
          поки перевірити_оп2(інформація_операції, збережена_інформація_операції) {
            змінна ціль рсп = ні;
            змінна ціль позиція_помилки_рсп: позитивне = 0;
            якщо інформація_операції.пріоритет > збережена_інформація_операції.пріоритет {
              рсп = спробувати_розібрати_операцію_1(система, слова, п, гілка_право::адреса, п::адреса, гілка_право, збережена_інформація_операції.пріоритет + 1, в_гнізді, позиція_помилки_рсп::адреса);
            } інакше {
              рсп = спробувати_розібрати_операцію_1(система, слова, п, гілка_право::адреса, п::адреса, гілка_право, збережена_інформація_операції.пріоритет, в_гнізді, позиція_помилки_рсп::адреса);
            }
            якщо рсп {
              п += 1;
            } інакше {
              звільнити_гілку(система, гілка_право);
              вихід_позиції_помилки::вміст = позиція_помилки_рсп;
              вернути ні;
            }
            інформація_операції = дізнатись_інформацію_операції(слова, п);
          }
          ціль нова_гілка_ліво = виділити<Гілка>(система);
          нова_гілка_ліво.вид = ВидГілкиОперація;
          нова_гілка_ліво.дані = ДаніГілкиОперація {
            ліво = гілка_ліво,
            операція = збережена_інформація_операції.вид_операції,
            право = гілка_право,
          };
          нова_гілка_ліво.місцезнаходження = Місцезнаходження { позиція_початку };
          гілка_ліво = нова_гілка_ліво;
          якщо в_гнізді == так {
            якщо слова.дані[п].вид == ВидСловаСимволМіжряд {
              має_міжряд = так;
              п += 1;
            }
          }
          інформація_операції = дізнатись_інформацію_операції(слова, п);
        } інакше {
          вихід_позиції_помилки::вміст = позиція_помилки_право;
          вернути ні;
        }
      }
      вихід::вміст = гілка_ліво;
      якщо має_міжряд {
        вихід_позиції_кінця::вміст = п - 2;
      } інакше {
        вихід_позиції_кінця::вміст = п - 1;
      }
      вернути так;
    }

    дія спробувати_розібрати_значення(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, в_гнізді: логічне, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль найдовша_позиція_помилки: позитивне = 0;
      змінна ціль позиція_помилки: позитивне = 0;
      якщо спробувати_розібрати_дію(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_структуру(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_модуль(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_операцію(система, слова, позиція_початку, вихід, вихід_позиції_кінця, в_гнізді, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      вихід_позиції_помилки::вміст = найдовша_позиція_помилки;
      вернути ні;
    }

    дія спробувати_розібрати_вернути(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид != ВидСловаВернути {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
      якщо спробувати_розібрати_значення(система, слова, п, гілка_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення::адреса) {
      } інакше {
        п -= 1;
      }
      ціль гілка_вернути = виділити<Гілка>(система);
      гілка_вернути.вид = ВидГілкиВернути;
      гілка_вернути.дані = ДаніГілкиВернути {
        значення = гілка_значення
      };
      гілка_вернути.місцезнаходження = Місцезнаходження { позиція_початку };
      вихід::вміст = гілка_вернути;
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_впасти(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид != ВидСловаВпасти {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
      якщо спробувати_розібрати_значення(система, слова, п, гілка_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення::адреса) {
      } інакше {
        п -= 1;
      }
      ціль гілка_впасти = виділити<Гілка>(система);
      гілка_впасти.вид = ВидГілкиВпасти;
      гілка_впасти.дані = ДаніГілкиВпасти {
        значення = гілка_значення
      };
      гілка_впасти.місцезнаходження = Місцезнаходження { позиція_початку };
      вихід::вміст = гілка_впасти;
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_елемент_взяти(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<ЕлементВзяти>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      ціль позиція_ідентифікатора = п;
      якщо слова.дані[п].вид != ВидСловаІдентифікатор {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      змінна ціль має_ідентифікатор_як = ні;
      змінна ціль позиція_ідентифікатора_як = п + 1;
      якщо слова.дані[п].вид == ВидСловаЯк {
        п += 1;
        якщо слова.дані[п].вид != ВидСловаІдентифікатор {
          вихід_позиції_помилки::вміст = п;
          вернути ні;
        }
        має_ідентифікатор_як = так;
        позиція_ідентифікатора_як = п;
      } інакше {
        п -= 1;
      }
      вихід::вміст = ЕлементВзяти {
        ідентифікатор = Ідентифікатор { позиція_ідентифікатора },
        ідентифікатор_як = можливо<Ідентифікатор> { позитивне(має_ідентифікатор_як), Ідентифікатор { позиція_ідентифікатора_як } },
        місцезнаходження = Місцезнаходження { позиція_початку }
      };
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_взяти(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      ціль шлях = зробити_накопичувач<Ідентифікатор>(система);
      якщо слова.дані[п].вид != ВидСловаВзяти {
        звільнити_дані_накопичувача<Ідентифікатор>(система, шлях);
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      ціль позиція_виду_взяти = п;
      якщо слова.дані[п].вид == ВидСловаМодуль {
        п += 1;
      } інакше якщо слова.дані[п].вид == ВидСловаІдентифікатор {
        п += 1;
      } інакше {
        звільнити_дані_накопичувача<Ідентифікатор>(система, шлях);
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      поки п < слова.розмір {
        якщо слова.дані[п].вид == ВидСловаІдентифікатор {
          покласти_в_накопичувач<Ідентифікатор>(система, шлях::адреса, Ідентифікатор { п });
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволКрапка {
            п += 1;
          } інакше {
            стрибнути після_шляху;
          }
        } інакше {
          звільнити_дані_накопичувача<Ідентифікатор>(система, шлях);
        вихід_позиції_помилки::вміст = п;
          вернути ні;
        }
      }
      після_шляху:
      якщо слова.дані[п].вид == ВидСловаЯк {
        п += 1;
        ціль ідентифікатор_як = п;
        якщо слова.дані[п].вид != ВидСловаІдентифікатор {
          звільнити_дані_накопичувача<Ідентифікатор>(система, шлях);
          вихід_позиції_помилки::вміст = п;
          вернути ні;
        }
        ціль гілка_взяти = виділити<Гілка>(система);
        гілка_взяти.вид = ВидГілкиВзяти;
        гілка_взяти.дані = ДаніГілкиВзяти {
          тип = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { позиція_виду_взяти } },
          довжина_шляху = шлях.розмір,
          шлях = шлях.дані,
          ідентифікатор_як = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { ідентифікатор_як } },
          кількість_елементів = 0,
          елементи = пусто
        };
        гілка_взяти.місцезнаходження = Місцезнаходження { позиція_початку };
        вихід::вміст = гілка_взяти;
        вихід_позиції_кінця::вміст = п;
        вернути так;
      } інакше якщо слова.дані[п].вид == ВидСловаСимволКвадратнаВідкритаДужка {
        п += 1;
        ціль елементи = зробити_накопичувач<ЕлементВзяти>(система);
        поки п < слова.розмір {
          змінна ціль елемент_взяти = ЕлементВзяти { ... };
          змінна ціль позиція_помилки_елемента_взяти: позитивне = 0;
          якщо спробувати_розібрати_елемент_взяти(система, слова, п, елемент_взяти::адреса, п::адреса, позиція_помилки_елемента_взяти::адреса) {
            покласти_в_накопичувач<ЕлементВзяти>(система, елементи::адреса, елемент_взяти);
            п += 1;
            якщо слова.дані[п].вид == ВидСловаСимволКома {
              п += 1;
            } інакше якщо слова.дані[п].вид == ВидСловаСимволКвадратнаЗакритаДужка {
              ціль гілка_взяти = виділити<Гілка>(система);
              гілка_взяти.вид = ВидГілкиВзяти;
              гілка_взяти.дані = ДаніГілкиВзяти {
                тип = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { позиція_виду_взяти } },
                довжина_шляху = шлях.розмір,
                шлях = шлях.дані,
                ідентифікатор_як = можливо<Ідентифікатор> { позитивне(ні), ... },
                кількість_елементів = елементи.розмір,
                елементи = елементи.дані
              };
              гілка_взяти.місцезнаходження = Місцезнаходження { позиція_початку };
              вихід::вміст = гілка_взяти;
              вихід_позиції_кінця::вміст = п;
              вернути так;
            } інакше {
              звільнити_дані_накопичувача<Ідентифікатор>(система, шлях);
              звільнити_дані_накопичувача<ЕлементВзяти>(система, елементи);
              вихід_позиції_помилки::вміст = п;
              вернути ні;
            }
          } інакше {
            звільнити_дані_накопичувача<Ідентифікатор>(система, шлях);
            звільнити_дані_накопичувача<ЕлементВзяти>(система, елементи);
            вихід_позиції_помилки::вміст = позиція_помилки_елемента_взяти;
            вернути ні;
          }
        }
        звільнити_дані_накопичувача<Ідентифікатор>(система, шлях);
        звільнити_дані_накопичувача<ЕлементВзяти>(система, елементи);
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      } інакше {
        ціль гілка_взяти = виділити<Гілка>(система);
        гілка_взяти.вид = ВидГілкиВзяти;
        гілка_взяти.дані = ДаніГілкиВзяти {
          тип = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { позиція_виду_взяти } },
          довжина_шляху = шлях.розмір,
          шлях = шлях.дані,
          ідентифікатор_як = можливо<Ідентифікатор> { позитивне(ні), ... },
          кількість_елементів = 0,
          елементи = пусто
        };
        гілка_взяти.місцезнаходження = Місцезнаходження { позиція_початку };
        вихід::вміст = гілка_взяти;
        вихід_позиції_кінця::вміст = п - 1;
        вернути так;
      }
      звільнити_дані_накопичувача<Ідентифікатор>(система, шлях);
      вихід_позиції_помилки::вміст = п;
      вернути ні;
    }

    дія спробувати_розібрати_елемент_дати(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<ЕлементДати>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      ціль позиція_ідентифікатора = п;
      якщо слова.дані[п].вид != ВидСловаІдентифікатор {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      змінна ціль має_ідентифікатор_як = ні;
      змінна ціль позиція_ідентифікатора_як = п + 1;
      якщо слова.дані[п].вид == ВидСловаЯк {
        п += 1;
        якщо слова.дані[п].вид != ВидСловаІдентифікатор {
          вихід_позиції_помилки::вміст = п;
          вернути ні;
        }
        має_ідентифікатор_як = так;
        позиція_ідентифікатора_як = п;
      } інакше {
        п -= 1;
      }
      вихід::вміст = ЕлементДати {
        ідентифікатор = Ідентифікатор { позиція_ідентифікатора },
        ідентифікатор_як = можливо<Ідентифікатор> { позитивне(має_ідентифікатор_як), Ідентифікатор { позиція_ідентифікатора_як } },
        місцезнаходження = Місцезнаходження { позиція_початку }
      };
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_дати(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      якщо слова.дані[п].вид != ВидСловаДати {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      ціль елементи = зробити_накопичувач<ЕлементДати>(система);
      поки п < слова.розмір {
        змінна ціль елемент_дати = ЕлементДати { ... };
        змінна ціль позиція_помилки_елемента_дати: позитивне = 0;
        якщо спробувати_розібрати_елемент_дати(система, слова, п, елемент_дати::адреса, п::адреса, позиція_помилки_елемента_дати::адреса) {
          покласти_в_накопичувач<ЕлементДати>(система, елементи::адреса, елемент_дати);
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволКома {
            п += 1;
          } інакше {
            п -= 1;
            стрибнути завершення;
          }
        } інакше {
          звільнити_дані_накопичувача<ЕлементДати>(система, елементи);
          вихід_позиції_помилки::вміст = позиція_помилки_елемента_дати;
          вернути ні;
        }
      }
      завершення:
      ціль гілка_дати = виділити<Гілка>(система);
      гілка_дати.вид = ВидГілкиДати;
      гілка_дати.дані = ДаніГілкиДати {
        кількість_елементів = елементи.розмір,
        елементи = елементи.дані
      };
      гілка_дати.місцезнаходження = Місцезнаходження { позиція_початку };
      вихід::вміст = гілка_дати;
      вихід_позиції_кінця::вміст = п;
      вернути так;
    }

    дія спробувати_розібрати_елемент_тіла(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль позиція_помилки: позитивне = 0;
      змінна ціль найдовша_позиція_помилки: позитивне = 0;
      якщо спробувати_розібрати_вернути(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_впасти(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_взяти(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_дати(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_якщо(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_поки(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_цикл(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_перебрати(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      якщо спробувати_розібрати_спробувати(система, слова, позиція_початку, вихід, вихід_позиції_кінця, позиція_помилки::адреса) {
        вернути так;
      }
      якщо позиція_помилки > найдовша_позиція_помилки {
        найдовша_позиція_помилки = позиція_помилки;
      }
      змінна ціль п = позиція_початку;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
      якщо спробувати_розібрати_значення(система, слова, п, гілка_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення::адреса) {
        п += 1;
        змінна ціль вид_операції: позитивне = 0;
        якщо слова.дані[п].вид == ВидСловаСимволПлюс {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволРівно {
            вид_операції = ВидОпераціїДодавання;
            стрибнути спроба2;
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
        } інакше якщо слова.дані[п].вид == ВидСловаСимволМінус {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволРівно {
            вид_операції = ВидОпераціїВіднімання;
            стрибнути спроба2;
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
        } інакше якщо слова.дані[п].вид == ВидСловаСимволПомножити {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволПомножити {
            п += 1;
            якщо слова.дані[п].вид == ВидСловаСимволРівно {
              вид_операції = ВидОпераціїПіднесенняДоСтепеня;
              стрибнути спроба2;
            } інакше {
              п -= 3;
              стрибнути вихід;
            }
          } інакше якщо слова.дані[п].вид == ВидСловаСимволРівно {
            вид_операції = ВидОпераціїМноження;
            стрибнути спроба2;
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
        } інакше якщо слова.дані[п].вид == ВидСловаСимволПоділити {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволПоділити {
            п += 1;
            якщо слова.дані[п].вид == ВидСловаСимволРівно {
              вид_операції = ВидОпераціїДіленняНаціло;
              стрибнути спроба2;
            } інакше {
              п -= 3;
              стрибнути вихід;
            }
          } інакше якщо слова.дані[п].вид == ВидСловаСимволРівно {
            вид_операції = ВидОпераціїДілення;
            стрибнути спроба2;
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
        } інакше якщо слова.дані[п].вид == ВидСловаСимволЗалишку {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволРівно {
            вид_операції = ВидОпераціїМодуль;
            стрибнути спроба2;
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
        } інакше якщо слова.дані[п].вид == ВидСловаСимволІ {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволРівно {
            вид_операції = ВидОпераціїДІ;
            стрибнути спроба2;
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
        } інакше якщо слова.дані[п].вид == ВидСловаСимволАбо {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволРівно {
            вид_операції = ВидОпераціїДАБО;
            стрибнути спроба2;
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
        } інакше якщо слова.дані[п].вид == ВидСловаСимволПірамідка {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволРівно {
            вид_операції = ВидОпераціїВАБО;
            стрибнути спроба2;
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
        } інакше якщо слова.дані[п].вид == ВидСловаСимволБільше {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволБільше {
            п += 1;
            якщо слова.дані[п].вид == ВидСловаСимволБільше {
              п += 1;
              якщо слова.дані[п].вид == ВидСловаСимволРівно {
                вид_операції = ВидОпераціїЗсувВправоЗнаковий;
                стрибнути спроба2;
              } інакше {
                п -= 4;
                стрибнути вихід;
              }
            } інакше якщо слова.дані[п].вид == ВидСловаСимволРівно {
              вид_операції = ВидОпераціїЗсувВправо;
              стрибнути спроба2;
            } інакше {
              п -= 3;
              стрибнути вихід;
            }
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
        } інакше якщо слова.дані[п].вид == ВидСловаСимволМенше {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволМенше {
            п += 1;
            якщо слова.дані[п].вид == ВидСловаСимволРівно {
              вид_операції = ВидОпераціїЗсувВліво;
              стрибнути спроба2;
            } інакше {
              п -= 3;
              стрибнути вихід;
            }
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
        } інакше якщо слова.дані[п].вид == ВидСловаСимволРівно {
          стрибнути спроба;
        } інакше якщо слова.дані[п].вид == ВидСловаСимволДвокрапка {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаСимволРівно {
            стрибнути спроба_ззовні;
          } інакше {
            п -= 2;
            стрибнути вихід;
          }
          стрибнути спроба;
        } інакше {
          п -= 1;
          стрибнути вихід;
        }
        спроба:
        якщо гілка_значення.вид == ВидГілкиЗвернутись {
          ціль дані = гілка_значення.дані як ДаніГілкиЗвернутись;
          ціль ідентифікатор = дані.ідентифікатор;
          п += 1;
          змінна ціль гілка_значення_значення: адреса<Гілка> = пусто;
          змінна ціль позиція_помилки_гілки_значення_значення: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_значення_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення_значення::адреса) {
            ціль гілка_визначити = виділити<Гілка>(система);
            гілка_визначити.вид = ВидГілкиВизначити;
            гілка_визначити.дані = ДаніГілкиВизначити {
              ідентифікатор = ідентифікатор,
              значення = гілка_значення_значення
            };
            гілка_визначити.місцезнаходження = Місцезнаходження { 0 };
            вихід::вміст = гілка_визначити;
            вихід_позиції_кінця::вміст = п;
            звільнити(система, гілка_значення);
            вернути так;
          } інакше {
            звільнити_гілку(система, гілка_значення);
            вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення_значення;
            вернути ні;
          }
        } інакше якщо гілка_значення.вид == ВидГілкиОтримати {
          ціль дані = гілка_значення.дані як ДаніГілкиОтримати;
          ціль предмет = дані.предмет;
          ціль ідентифікатор = дані.ідентифікатор;
          п += 1;
          змінна ціль гілка_значення_значення: адреса<Гілка> = пусто;
          змінна ціль позиція_помилки_гілки_значення_значення: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_значення_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення_значення::адреса) {
            ціль гілка_змінити_властивість = виділити<Гілка>(система);
            гілка_змінити_властивість.вид = ВидГілкиЗмінити;
            гілка_змінити_властивість.дані = ДаніГілкиЗмінити {
              предмет = предмет,
              ідентифікатор = ідентифікатор,
              значення = гілка_значення_значення
            };
            гілка_змінити_властивість.місцезнаходження = Місцезнаходження { 0 };
            вихід::вміст = гілка_змінити_властивість;
            вихід_позиції_кінця::вміст = п;
            звільнити(система, гілка_значення);
            вернути так;
          } інакше {
            звільнити_гілку(система, гілка_значення);
            вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення_значення;
            вернути ні;
          }
        } інакше якщо гілка_значення.вид == ВидГілкиОтриматиЕлемент {
          ціль дані = гілка_значення.дані як ДаніГілкиОтриматиЕлемент;
          ціль предмет = дані.предмет;
          ціль ключ = дані.ключ;
          п += 1;
          змінна ціль гілка_значення_значення: адреса<Гілка> = пусто;
          змінна ціль позиція_помилки_гілки_значення_значення: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_значення_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення_значення::адреса) {
            ціль гілка_змінити_елемент = виділити<Гілка>(система);
            гілка_змінити_елемент.вид = ВидГілкиЗмінитиЕлемент;
            гілка_змінити_елемент.дані = ДаніГілкиЗмінитиЕлемент {
              предмет = предмет,
              ключ = ключ,
              значення = гілка_значення_значення
            };
            гілка_змінити_елемент.місцезнаходження = Місцезнаходження { 0 };
            вихід::вміст = гілка_змінити_елемент;
            вихід_позиції_кінця::вміст = п;
            звільнити(система, гілка_значення);
            вернути так;
          } інакше {
            звільнити_гілку(система, гілка_значення);
            вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення_значення;
            вернути ні;
          }
        } інакше {
          вихід_позиції_помилки::вміст = п;
          вернути ні;
        }
        спроба_ззовні:
        якщо гілка_значення.вид == ВидГілкиЗвернутись {
          ціль дані = гілка_значення.дані як ДаніГілкиЗвернутись;
          ціль ідентифікатор = дані.ідентифікатор;
          п += 1;
          змінна ціль гілка_значення_значення: адреса<Гілка> = пусто;
          змінна ціль позиція_помилки_гілки_значення_значення: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_значення_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення_значення::адреса) {
            ціль гілка_визначити_ззовні = виділити<Гілка>(система);
            гілка_визначити_ззовні.вид = ВидГілкиВизначитиЗзовні;
            гілка_визначити_ззовні.дані = ДаніГілкиВизначитиЗзовні {
              ідентифікатор = ідентифікатор,
              значення = гілка_значення_значення
            };
            гілка_визначити_ззовні.місцезнаходження = Місцезнаходження { 0 };
            вихід::вміст = гілка_визначити_ззовні;
            вихід_позиції_кінця::вміст = п;
            звільнити(система, гілка_значення);
            вернути так;
          } інакше {
            звільнити_гілку(система, гілка_значення);
            вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення_значення;
            вернути ні;
          }
        } інакше {
          вихід_позиції_помилки::вміст = п;
          вернути ні;
        }
        спроба2:
        якщо гілка_значення.вид == ВидГілкиЗвернутись {
          ціль дані = гілка_значення.дані як ДаніГілкиЗвернутись;
          ціль ідентифікатор = дані.ідентифікатор;
          п += 1;
          змінна ціль гілка_значення_значення: адреса<Гілка> = пусто;
          змінна ціль позиція_помилки_гілки_значення_значення: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_значення_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення_значення::адреса) {
            ціль гілка_операція = виділити<Гілка>(система);
            гілка_операція.вид = ВидГілкиОперація;
            гілка_операція.дані = ДаніГілкиОперація {
              ліво = гілка_значення,
              операція = вид_операції,
              право = гілка_значення_значення
            };
            гілка_операція.місцезнаходження = Місцезнаходження { 0 };
            ціль гілка_визначити = виділити<Гілка>(система);
            гілка_визначити.вид = ВидГілкиВизначити;
            гілка_визначити.дані = ДаніГілкиВизначити {
              ідентифікатор = ідентифікатор,
              значення = гілка_операція
            };
            гілка_визначити.місцезнаходження = Місцезнаходження { 0 };
            вихід::вміст = гілка_визначити;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше {
            звільнити_гілку(система, гілка_значення);
            вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення_значення;
            вернути ні;
          }
        } інакше якщо гілка_значення.вид == ВидГілкиОтримати {
          ціль дані = гілка_значення.дані як ДаніГілкиОтримати;
          ціль предмет = дані.предмет;
          ціль ідентифікатор = дані.ідентифікатор;
          п += 1;
          змінна ціль гілка_значення_значення: адреса<Гілка> = пусто;
          змінна ціль позиція_помилки_гілки_значення_значення: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_значення_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення_значення::адреса) {
            ціль гілка_операція = виділити<Гілка>(система);
            гілка_операція.вид = ВидГілкиОперація;
            гілка_операція.дані = ДаніГілкиОперація {
              ліво = гілка_значення,
              операція = вид_операції,
              право = гілка_значення_значення
            };
            гілка_операція.місцезнаходження = Місцезнаходження { 0 };
            ціль гілка_змінити_властивість = виділити<Гілка>(система);
            гілка_змінити_властивість.вид = ВидГілкиЗмінити;
            гілка_змінити_властивість.дані = ДаніГілкиЗмінити {
              предмет = зробити_повну_копію_гілки(система, предмет),
              ідентифікатор = ідентифікатор,
              значення = гілка_операція
            };
            гілка_змінити_властивість.місцезнаходження = Місцезнаходження { 0 };
            вихід::вміст = гілка_змінити_властивість;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше {
            звільнити_гілку(система, гілка_значення);
            вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення_значення;
            вернути ні;
          }
        } інакше якщо гілка_значення.вид == ВидГілкиОтриматиЕлемент {
          ціль дані = гілка_значення.дані як ДаніГілкиОтриматиЕлемент;
          ціль предмет = дані.предмет;
          ціль ключ = дані.ключ;
          п += 1;
          змінна ціль гілка_значення_значення: адреса<Гілка> = пусто;
          змінна ціль позиція_помилки_гілки_значення_значення: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_значення_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення_значення::адреса) {
            ціль гілка_операція = виділити<Гілка>(система);
            гілка_операція.вид = ВидГілкиОперація;
            гілка_операція.дані = ДаніГілкиОперація {
              ліво = гілка_значення,
              операція = вид_операції,
              право = гілка_значення_значення
            };
            гілка_операція.місцезнаходження = Місцезнаходження { 0 };
            ціль гілка_змінити_елемент = виділити<Гілка>(система);
            гілка_змінити_елемент.вид = ВидГілкиЗмінитиЕлемент;
            гілка_змінити_елемент.дані = ДаніГілкиЗмінитиЕлемент {
              предмет = зробити_повну_копію_гілки(система, предмет),
              ключ = зробити_повну_копію_гілки(система, ключ),
              значення = гілка_операція
            };
            гілка_змінити_елемент.місцезнаходження = Місцезнаходження { 0 };
            вихід::вміст = гілка_змінити_елемент;
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше {
            звільнити_гілку(система, гілка_значення);
            вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення_значення;
            вернути ні;
          }
        } інакше {
          вихід_позиції_помилки::вміст = п;
          вернути ні;
        }
        вихід:
        вихід::вміст = гілка_значення;
        вихід_позиції_кінця::вміст = п;
        вернути так;
      }
      вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення;
      вернути ні;
    }

    дія спробувати_розібрати_тіло(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<Гілки>, вихід_позиції_кінця: адреса<позитивне>, вид_слова_закінчення: позитивне, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      зʼїсти_міжрядки(слова, п, п::адреса);
      змінна ціль елементи = зробити_накопичувач<адреса<Гілка>>(система);
      поки п < слова.розмір {
        якщо слова.дані[п].вид == вид_слова_закінчення {
          вихід::вміст = Гілки { елементи.розмір, елементи.дані };
          вихід_позиції_кінця::вміст = п;
          вернути так;
        }
        змінна ціль гілка_елемента_тіла: адреса<Гілка> = пусто;
        змінна ціль позиція_помилки_елемента_тіла: позитивне = 0;
        якщо спробувати_розібрати_елемент_тіла(система, слова, п, гілка_елемента_тіла::адреса, п::адреса, позиція_помилки_елемента_тіла::адреса) {
          покласти_в_накопичувач<адреса<Гілка>>(система, елементи::адреса, гілка_елемента_тіла);
          п += 1;
          якщо зʼїсти_міжрядки(слова, п, п::адреса) {
          } інакше якщо слова.дані[п].вид == вид_слова_закінчення {
            вихід::вміст = Гілки { елементи.розмір, елементи.дані };
            вихід_позиції_кінця::вміст = п;
            вернути так;
          } інакше {
            звільнити_гілки(система, Гілки { елементи.розмір, елементи.дані });
            вихід_позиції_помилки::вміст = п;
            вернути ні;
          }
        } інакше {
          звільнити_гілки(система, Гілки { елементи.розмір, елементи.дані });
          вихід_позиції_помилки::вміст = позиція_помилки_елемента_тіла;
          вернути ні;
        }
      }
      звільнити_гілки(система, Гілки { елементи.розмір, елементи.дані });
      вихід_позиції_помилки::вміст = п;
      вернути ні;
    }

    дія спробувати_розібрати_тип(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<Тип>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      змінна ціль типи = зробити_накопичувач<адреса<Гілка>>(система);
      поки п < слова.розмір {
        змінна ціль гілка_типу: адреса<Гілка> = пусто;
        змінна ціль позиція_помилки_молекули: позитивне = 0;
        якщо спробувати_розібрати_молекулу(система, слова, п, гілка_типу::адреса, п::адреса, позиція_помилки_молекули::адреса) {
          покласти_в_накопичувач<адреса<Гілка>>(система, типи::адреса, гілка_типу);
          п += 1;
          якщо слова.дані[п].вид == ВидСловаАбо {
            п += 1;
          } інакше {
            вихід::вміст = Тип {
              кількість_гілок = типи.розмір,
              гілки = типи.дані,
            };
            вихід_позиції_кінця::вміст = п - 1;
            вернути так;
          }
        } інакше {
          звільнити_гілки(система, Гілки { типи.розмір, типи.дані });
          вихід_позиції_помилки::вміст = позиція_помилки_молекули;
          вернути ні;
        }
      }
      звільнити_гілки(система, Гілки { типи.розмір, типи.дані });
      вихід_позиції_помилки::вміст = п;
      вернути ні;
    }

    дія спробувати_розібрати_параметр(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<Параметр>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      змінна ціль п = позиція_початку;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      // ідентифікатор параметра
      ціль позиція_ідентифікатора = п;
      якщо слова.дані[п].вид != ВидСловаІдентифікатор {
        вихід_позиції_помилки::вміст = п;
        вернути ні;
      }
      п += 1;
      // тип параметра
      змінна ціль тип = Тип { ... };
      змінна ціль позиція_помилки_типу: позитивне = 0;
      якщо спробувати_розібрати_тип(система, слова, п, тип::адреса, п::адреса, позиція_помилки_типу::адреса) {
        п += 1;
        якщо слова.дані[п].вид == ВидСловаСимволРівно {
          п += 1;
          змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення::адреса) {
          } інакше {
            звільнити_тип(система, тип);
            вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення;
            вернути ні;
          }
        } інакше {
          п -= 1;
        }
        вихід::вміст = Параметр {
          ідентифікатор = Ідентифікатор { позиція_ідентифікатора },
          тип = можливо<Тип> { позитивне(так), тип },
          значення = гілка_значення,
          місцезнаходження = Місцезнаходження { позиція_початку }
        };
        вихід_позиції_кінця::вміст = п;
      } інакше {
        якщо слова.дані[п].вид == ВидСловаСимволРівно {
          п += 1;
          змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
          якщо спробувати_розібрати_значення(система, слова, п, гілка_значення::адреса, п::адреса, ні, позиція_помилки_гілки_значення::адреса) {
          } інакше {
            звільнити_гілку(система, гілка_значення);
            вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення;
            вернути ні;
          }
        } інакше {
          п -= 1;
        }
        вихід::вміст = Параметр {
          ідентифікатор = Ідентифікатор { позиція_ідентифікатора },
          тип = можливо<Тип> { позитивне(ні), ... },
          значення = гілка_значення,
          місцезнаходження = Місцезнаходження { позиція_початку }
        };
        вихід_позиції_кінця::вміст = п;
      }
      вернути так;
    }

    дія спробувати_розібрати_дію(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      ціль дані_гілки_дія = ДаніГілкиДія {
        тривала = позитивне(ні),
        модифікатор = позитивне(0),
        структура_ = пусто,
        ідентифікатор = можливо<Ідентифікатор> { позитивне(ні), ... },
        кількість_параметрів = 0,
        параметри = пусто,
        тип_результату = можливо<Тип> { позитивне(ні), ... },
        тіло = Гілки { 0, пусто }
      };
      змінна ціль п = позиція_початку;
      // дія власна?
      якщо слова.дані[п].вид == ВидСловаВласна {
        п += 1;
      }
      // дія спец?
      якщо слова.дані[п].вид == ВидСловаСпец {
        п += 1;
      }
      // дія тривала?
      якщо слова.дані[п].вид == ВидСловаТривала {
        дані_гілки_дія.тривала = позитивне(так);
        п += 1;
      }
      // дія?
      якщо слова.дані[п].вид != ВидСловаДія {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // структура та/або ідентифікатор дії
      якщо слова.дані[п].вид == ВидСловаІдентифікатор {
        дані_гілки_дія.ідентифікатор = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { п } };
        п += 1;
        якщо слова.дані[п].вид == ВидСловаСимволКрапка {
          п += 1;
          якщо слова.дані[п].вид == ВидСловаІдентифікатор {
            змінна ціль гілка_звернення = виділити<Гілка>(система);
            гілка_звернення.вид = ВидГілкиЗвернутись;
            гілка_звернення.дані = ДаніГілкиЗвернутись {
              ідентифікатор = дані_гілки_дія.ідентифікатор.значення
            };
            гілка_звернення.місцезнаходження = Місцезнаходження { п };
            дані_гілки_дія.структура_ = гілка_звернення;
            дані_гілки_дія.ідентифікатор = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { п } };
            п += 1;
          } інакше {
            вихід_позиції_помилки::вміст = п;
            стрибнути звільнити_і_вийти;
          }
        }
      }
      якщо слова.дані[п].вид != ВидСловаСимволВідкритаДужка {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      зʼїсти_міжрядки(слова, п, п::адреса);
      // параметри дії
      ціль параметри = зробити_накопичувач<Параметр>(система);
      поки п < слова.розмір {
        якщо слова.дані[п].вид == ВидСловаСимволЗакритаДужка {
          п += 1;
          стрибнути після_параметрів;
        }
        змінна ціль параметр = Параметр { ... };
        змінна ціль позиція_помилки_параметра: позитивне = 0;
        якщо спробувати_розібрати_параметр(система, слова, п, параметр::адреса, п::адреса, позиція_помилки_параметра::адреса) {
          покласти_в_накопичувач<Параметр>(система, параметри::адреса, параметр);
          п += 1;
        } інакше {
          вихід_позиції_помилки::вміст = позиція_помилки_параметра;
          стрибнути звільнити_і_вийти;
        }
        зʼїсти_міжрядки(слова, п, п::адреса);
        якщо слова.дані[п].вид == ВидСловаСимволКома {
          п += 1;
          зʼїсти_міжрядки(слова, п, п::адреса);
        } інакше якщо слова.дані[п].вид == ВидСловаСимволЗакритаДужка {
          п += 1;
          стрибнути після_параметрів;
        } інакше {
          звільнити_параметри(система, параметри.розмір, параметри.дані);
          вихід_позиції_помилки::вміст = п;
          стрибнути звільнити_і_вийти;
        }
      }
      після_параметрів:
      дані_гілки_дія.кількість_параметрів = параметри.розмір;
      дані_гілки_дія.параметри = параметри.дані;
      // тип результату дії
      якщо слова.дані[п].вид == ВидСловаСимволМіжряд {
        стрибнути розбір_тіла;
      } інакше якщо слова.дані[п].вид == ВидСловаСимволДвокрапка {
        стрибнути розбір_короткого_тіла;
      } інакше {
        змінна ціль позиція_помилки_типу_результату: позитивне = 0;
        якщо спробувати_розібрати_тип(система, слова, п, дані_гілки_дія.тип_результату.значення::адреса, п::адреса, позиція_помилки_типу_результату::адреса) {
          дані_гілки_дія.тип_результату.заповнено = позитивне(так);
          п += 1;
        } інакше {
          вихід_позиції_помилки::вміст = позиція_помилки_типу_результату;
          стрибнути звільнити_і_вийти;
        }
      }
      якщо слова.дані[п].вид == ВидСловаСимволМіжряд {
        стрибнути розбір_тіла;
      } інакше якщо слова.дані[п].вид == ВидСловаСимволМіжряд {
        стрибнути розбір_короткого_тіла;
      } інакше {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      // тіло дії
      розбір_короткого_тіла:
      п += 1;
      змінна ціль гілка_значення: адреса<Гілка> = пусто;
      змінна ціль позиція_помилки_гілки_значення: позитивне = 0;
      якщо спробувати_розібрати_елемент_тіла(система, слова, п, гілка_значення::адреса, п::адреса, позиція_помилки_гілки_значення::адреса) == ні {
        вихід_позиції_помилки::вміст = позиція_помилки_гілки_значення;
        стрибнути звільнити_і_вийти;
      }
      дані_гілки_дія.тіло.дані = перевиділити_памʼять<адреса<Гілка>>(система, дані_гілки_дія.тіло.дані, 1);
      дані_гілки_дія.тіло.дані[0] = гілка_значення;
      дані_гілки_дія.тіло.розмір = 1;
      стрибнути після_тіла;
      розбір_тіла:
      п += 1;
      змінна ціль позиція_помилки_тіла: позитивне = 0;
      якщо спробувати_розібрати_тіло(система, слова, п, дані_гілки_дія.тіло::адреса, п::адреса, ВидСловаКінець, позиція_помилки_тіла::адреса) == ні {
        вихід_позиції_помилки::вміст = позиція_помилки_тіла;
        стрибнути звільнити_і_вийти;
      }
      після_тіла:
      ціль гілка_дія = виділити<Гілка>(система);
      гілка_дія.вид = ВидГілкиДія;
      гілка_дія.дані = дані_гілки_дія;
      гілка_дія.місцезнаходження = Місцезнаходження {
        позиція_початку
      };
      вихід::вміст = гілка_дія;
      вихід_позиції_кінця::вміст = п;
      вернути так;
      звільнити_і_вийти:
      звільнити_параметри(система, дані_гілки_дія.кількість_параметрів, дані_гілки_дія.параметри);
      якщо дані_гілки_дія.тип_результату.заповнено == позитивне(так) {
        звільнити_тип(система, дані_гілки_дія.тип_результату.значення);
      }
      звільнити_тіло(система, дані_гілки_дія.тіло);
      вернути ні;
    }

    дія спробувати_розібрати_структуру(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      ціль дані_гілки_структура = ДаніГілкиСтруктура {
        ідентифікатор = можливо<Ідентифікатор> { позитивне(ні), ... },
        предок = пусто,
        кількість_параметрів = 0,
        параметри = пусто
      };
      змінна ціль п = позиція_початку;
      // структура?
      якщо слова.дані[п].вид != ВидСловаСтруктура {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // ідентифікатор структури
      якщо слова.дані[п].вид == ВидСловаІдентифікатор {
        дані_гілки_структура.ідентифікатор = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { п } };
        п += 1;
      }
      // предок структури
      якщо слова.дані[п].вид == ВидСловаЄ {
        п += 1;
        змінна ціль позиція_помилки_молекули: позитивне = 0;
        якщо спробувати_розібрати_молекулу(система, слова, п, дані_гілки_структура.предок::адреса, п::адреса, позиція_помилки_молекули::адреса) {
          п += 1;
        } інакше {
          вихід_позиції_помилки::вміст = позиція_помилки_молекули;
          стрибнути звільнити_і_вийти;
        }
      }
      якщо слова.дані[п].вид != ВидСловаСимволМіжряд {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      зʼїсти_міжрядки(слова, п, п::адреса);
      // параметри структури
      ціль параметри = зробити_накопичувач<Параметр>(система);
      поки п < слова.розмір {
        якщо слова.дані[п].вид == ВидСловаКінець {
          стрибнути після_параметрів;
        }
        змінна ціль параметр = Параметр { ... };
        змінна ціль позиція_помилки_параметра: позитивне = 0;
        якщо спробувати_розібрати_параметр(система, слова, п, параметр::адреса, п::адреса, позиція_помилки_параметра::адреса) {
          покласти_в_накопичувач<Параметр>(система, параметри::адреса, параметр);
          п += 1;
        } інакше {
          вихід_позиції_помилки::вміст = позиція_помилки_параметра;
          стрибнути звільнити_і_вийти;
        }
        якщо зʼїсти_міжрядки(слова, п, п::адреса) {
        } інакше якщо слова.дані[п].вид == ВидСловаКінець {
          стрибнути після_параметрів;
        } інакше {
          звільнити_параметри(система, параметри.розмір, параметри.дані);
          вихід_позиції_помилки::вміст = п;
          стрибнути звільнити_і_вийти;
        }
      }
      після_параметрів:
      дані_гілки_структура.кількість_параметрів = параметри.розмір;
      дані_гілки_структура.параметри = параметри.дані;
      ціль гілка_структура = виділити<Гілка>(система);
      гілка_структура.вид = ВидГілкиСтруктура;
      гілка_структура.дані = дані_гілки_структура;
      гілка_структура.місцезнаходження = Місцезнаходження {
        позиція_початку
      };
      вихід::вміст = гілка_структура;
      вихід_позиції_кінця::вміст = п;
      вернути так;
      звільнити_і_вийти:
      звільнити_гілку(система, дані_гілки_структура.предок);
      звільнити_параметри(система, дані_гілки_структура.кількість_параметрів, дані_гілки_структура.параметри);
      вернути ні;
    }

    дія спробувати_розібрати_модуль(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      ціль дані_гілки_модуль = ДаніГілкиМодуль {
        ідентифікатор = можливо<Ідентифікатор> { позитивне(ні), ... },
        тіло = Гілки { 0, пусто }
      };
      змінна ціль п = позиція_початку;
      // модуль?
      якщо слова.дані[п].вид != ВидСловаМодуль {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // ідентифікатор модуля
      якщо слова.дані[п].вид == ВидСловаІдентифікатор {
        дані_гілки_модуль.ідентифікатор = можливо<Ідентифікатор> { позитивне(так), Ідентифікатор { п } };
        п += 1;
      }
      якщо слова.дані[п].вид != ВидСловаСимволМіжряд {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // тіло модуля
      змінна ціль позиція_помилки_тіла: позитивне = 0;
      якщо спробувати_розібрати_тіло(система, слова, п, дані_гілки_модуль.тіло::адреса, п::адреса, ВидСловаКінець, позиція_помилки_тіла::адреса) == ні {
        вихід_позиції_помилки::вміст = позиція_помилки_тіла;
        стрибнути звільнити_і_вийти;
      }
      ціль гілка_модуль = виділити<Гілка>(система);
      гілка_модуль.вид = ВидГілкиМодуль;
      гілка_модуль.дані = дані_гілки_модуль;
      гілка_модуль.місцезнаходження = Місцезнаходження {
        позиція_початку
      };
      вихід::вміст = гілка_модуль;
      вихід_позиції_кінця::вміст = п;
      вернути так;
      звільнити_і_вийти:
      звільнити_тіло(система, дані_гілки_модуль.тіло);
      вернути ні;
    }

    дія спробувати_розібрати_якщо(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      ціль дані_гілки_якщо = ДаніГілкиЯкщо {
        умова = пусто,
        тіло = Гілки { 0, пусто },
        тіло_інакше = Гілки { 0, пусто }
      };
      змінна ціль п = позиція_початку;
      // якщо?
      якщо слова.дані[п].вид != ВидСловаЯкщо {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // умова якщо
      змінна ціль позиція_помилки_умови: позитивне = 0;
      якщо спробувати_розібрати_операцію(система, слова, п, дані_гілки_якщо.умова::адреса, п::адреса, ні, позиція_помилки_умови::адреса) {
        п += 1;
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_умови;
        стрибнути звільнити_і_вийти;
      }
      якщо слова.дані[п].вид != ВидСловаСимволМіжряд {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // тіло якщо
      змінна ціль тіло = зробити_накопичувач<адреса<Гілка>>(система);
      поки п < слова.розмір {
        якщо слова.дані[п].вид == ВидСловаКінець {
          дані_гілки_якщо.тіло.розмір = тіло.розмір;
          дані_гілки_якщо.тіло.дані = тіло.дані;
          стрибнути після_тіла;
        }
        якщо слова.дані[п].вид == ВидСловаІнакше {
          дані_гілки_якщо.тіло.розмір = тіло.розмір;
          дані_гілки_якщо.тіло.дані = тіло.дані;
          стрибнути розбір_інакше;
        }
        зʼїсти_міжрядки(слова, п, п::адреса);
        змінна ціль гілка_елемента_тіла: адреса<Гілка> = пусто;
        змінна ціль позиція_помилки_елемента_тіла: позитивне = 0;
        якщо спробувати_розібрати_елемент_тіла(система, слова, п, гілка_елемента_тіла::адреса, п::адреса, позиція_помилки_елемента_тіла::адреса) {
          покласти_в_накопичувач<адреса<Гілка>>(система, тіло::адреса, гілка_елемента_тіла);
          п += 1;
          якщо зʼїсти_міжрядки(слова, п, п::адреса) {
          } інакше якщо слова.дані[п].вид == ВидСловаКінець {
            дані_гілки_якщо.тіло.розмір = тіло.розмір;
            дані_гілки_якщо.тіло.дані = тіло.дані;
            стрибнути після_тіла;
          } інакше якщо слова.дані[п].вид == ВидСловаІнакше {
            дані_гілки_якщо.тіло.розмір = тіло.розмір;
            дані_гілки_якщо.тіло.дані = тіло.дані;
            стрибнути розбір_інакше;
          } інакше {
            дані_гілки_якщо.тіло.розмір = тіло.розмір;
            дані_гілки_якщо.тіло.дані = тіло.дані;
            вихід_позиції_помилки::вміст = п;
            стрибнути звільнити_і_вийти;
          }
        } інакше {
          дані_гілки_якщо.тіло.розмір = тіло.розмір;
          дані_гілки_якщо.тіло.дані = тіло.дані;
          вихід_позиції_помилки::вміст = позиція_помилки_елемента_тіла;
          стрибнути звільнити_і_вийти;
        }
      }
      вихід_позиції_помилки::вміст = п;
      стрибнути звільнити_і_вийти;
      розбір_інакше:
      п += 1;
      // інакше якщо
      якщо слова.дані[п].вид == ВидСловаЯкщо {
        змінна ціль гілка_інакше_якщо: адреса<Гілка> = пусто;
        змінна ціль позиція_помилки_інакше_якщо: позитивне = 0;
        якщо спробувати_розібрати_якщо(система, слова, п, гілка_інакше_якщо::адреса, п::адреса, позиція_помилки_інакше_якщо::адреса) {
          ціль накопичувач_інакше_якщо = зробити_накопичувач<адреса<Гілка>>(система);
          покласти_в_накопичувач<адреса<Гілка>>(система, накопичувач_інакше_якщо::адреса, гілка_інакше_якщо);
          дані_гілки_якщо.тіло_інакше = Гілки {
            накопичувач_інакше_якщо.розмір,
            накопичувач_інакше_якщо.дані
          };
          стрибнути після_тіла;
        }
        вихід_позиції_помилки::вміст = позиція_помилки_інакше_якщо;
        стрибнути звільнити_і_вийти;
      } інакше якщо зʼїсти_міжрядки(слова, п, п::адреса) {
        // тіло інакше
        змінна ціль позиція_помилки_інакше: позитивне = 0;
        якщо спробувати_розібрати_тіло(система, слова, п, дані_гілки_якщо.тіло_інакше::адреса, п::адреса, ВидСловаКінець, позиція_помилки_інакше::адреса) == ні {
          вихід_позиції_помилки::вміст = позиція_помилки_інакше;
          стрибнути звільнити_і_вийти;
        }
        стрибнути після_тіла;
      } інакше {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      після_тіла:
      ціль гілка_якщо = виділити<Гілка>(система);
      гілка_якщо.вид = ВидГілкиЯкщо;
      гілка_якщо.дані = дані_гілки_якщо;
      гілка_якщо.місцезнаходження = Місцезнаходження {
        позиція_початку
      };
      вихід::вміст = гілка_якщо;
      вихід_позиції_кінця::вміст = п;
      вернути так;
      звільнити_і_вийти:
      звільнити_гілку(система, дані_гілки_якщо.умова);
      звільнити_тіло(система, дані_гілки_якщо.тіло);
      звільнити_тіло(система, дані_гілки_якщо.тіло_інакше);
      вернути ні;
    }

    дія спробувати_розібрати_поки(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      ціль дані_гілки_поки = ДаніГілкиПоки {
        умова = пусто,
        тіло = Гілки { 0, пусто }
      };
      змінна ціль п = позиція_початку;
      // поки?
      якщо слова.дані[п].вид != ВидСловаПоки {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // умова поки
      змінна ціль позиція_помилки_умови: позитивне = 0;
      якщо спробувати_розібрати_операцію(система, слова, п, дані_гілки_поки.умова::адреса, п::адреса, ні, позиція_помилки_умови::адреса) {
        п += 1;
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_умови;
        стрибнути звільнити_і_вийти;
      }
      якщо слова.дані[п].вид != ВидСловаСимволМіжряд {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // тіло поки
      змінна ціль позиція_помилки_тіла: позитивне = 0;
      якщо спробувати_розібрати_тіло(система, слова, п, дані_гілки_поки.тіло::адреса, п::адреса, ВидСловаКінець, позиція_помилки_тіла::адреса) == ні {
        вихід_позиції_помилки::вміст = позиція_помилки_тіла;
        стрибнути звільнити_і_вийти;
      }
      ціль гілка_поки = виділити<Гілка>(система);
      гілка_поки.вид = ВидГілкиПоки;
      гілка_поки.дані = дані_гілки_поки;
      гілка_поки.місцезнаходження = Місцезнаходження {
        позиція_початку
      };
      вихід::вміст = гілка_поки;
      вихід_позиції_кінця::вміст = п;
      вернути так;
      звільнити_і_вийти:
      звільнити_гілку(система, дані_гілки_поки.умова);
      звільнити_тіло(система, дані_гілки_поки.тіло);
      вернути ні;
    }

    дія спробувати_розібрати_цикл(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      вихід_позиції_помилки::вміст = позиція_початку;
      вернути ні;
    }

    дія спробувати_розібрати_перебрати(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      ціль дані_гілки_перебрати = ДаніГілкиПеребрати {
        предмет = пусто,
        ідентифікатор = можливо<Ідентифікатор> { позитивне(ні), ... },
        тіло = Гілки { 0, пусто }
      };
      змінна ціль п = позиція_початку;
      // перебрати?
      якщо слова.дані[п].вид != ВидСловаПеребрати {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // значення перебрати
      змінна ціль позиція_помилки_операції: позитивне = 0;
      якщо спробувати_розібрати_операцію(система, слова, п, дані_гілки_перебрати.предмет::адреса, п::адреса, ні, позиція_помилки_операції::адреса) {
        п += 1;
      } інакше {
        вихід_позиції_помилки::вміст = позиція_помилки_операції;
        стрибнути звільнити_і_вийти;
      }
      якщо слова.дані[п].вид == ВидСловаЯк {
        п += 1;
        якщо слова.дані[п].вид != ВидСловаІдентифікатор {
          вихід_позиції_помилки::вміст = п;
          стрибнути звільнити_і_вийти;
        }
        дані_гілки_перебрати.ідентифікатор = можливо<Ідентифікатор> {
          позитивне(так),
          Ідентифікатор { п }
        };
        п += 1;
      }
      якщо слова.дані[п].вид != ВидСловаСимволМіжряд {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // тіло перебрати
      змінна ціль позиція_помилки_тіла: позитивне = 0;
      якщо спробувати_розібрати_тіло(система, слова, п, дані_гілки_перебрати.тіло::адреса, п::адреса, ВидСловаКінець, позиція_помилки_тіла::адреса) == ні {
        вихід_позиції_помилки::вміст = позиція_помилки_тіла;
        стрибнути звільнити_і_вийти;
      }
      ціль гілка_перебрати = виділити<Гілка>(система);
      гілка_перебрати.вид = ВидГілкиПеребрати;
      гілка_перебрати.дані = дані_гілки_перебрати;
      гілка_перебрати.місцезнаходження = Місцезнаходження {
        позиція_початку
      };
      вихід::вміст = гілка_перебрати;
      вихід_позиції_кінця::вміст = п;
      вернути так;
      звільнити_і_вийти:
      звільнити_гілку(система, дані_гілки_перебрати.предмет);
      звільнити_тіло(система, дані_гілки_перебрати.тіло);
      вернути ні;
    }

    дія спробувати_розібрати_спробувати(система: адреса<Система>, слова: Слова, позиція_початку: позитивне, вихід: адреса<адреса<Гілка>>, вихід_позиції_кінця: адреса<позитивне>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      ціль дані_гілки_спробувати = ДаніГілкиСпробувати {
        тіло = Гілки { 0, пусто },
        ідентифікатор_зловити = можливо<Ідентифікатор> { позитивне(ні), ... },
        тіло_зловити = Гілки { 0, пусто }
      };
      змінна ціль п = позиція_початку;
      // спробувати?
      якщо слова.дані[п].вид != ВидСловаСпробувати {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      якщо слова.дані[п].вид != ВидСловаСимволМіжряд {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // тіло спробувати
      змінна ціль позиція_помилки_тіла: позитивне = 0;
      якщо спробувати_розібрати_тіло(система, слова, п, дані_гілки_спробувати.тіло::адреса, п::адреса, ВидСловаЗловити, позиція_помилки_тіла::адреса) == ні {
        вихід_позиції_помилки::вміст = позиція_помилки_тіла;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      якщо слова.дані[п].вид == ВидСловаІдентифікатор {
        дані_гілки_спробувати.ідентифікатор_зловити = можливо<Ідентифікатор> {
          позитивне(так),
          Ідентифікатор { п }
        };
        п += 1;
      }
      якщо слова.дані[п].вид != ВидСловаСимволМіжряд {
        вихід_позиції_помилки::вміст = п;
        стрибнути звільнити_і_вийти;
      }
      п += 1;
      // тіло зловити
      змінна ціль позиція_помилки_тіла_зловити: позитивне = 0;
      якщо спробувати_розібрати_тіло(система, слова, п, дані_гілки_спробувати.тіло_зловити::адреса, п::адреса, ВидСловаКінець, позиція_помилки_тіла_зловити::адреса) == ні {
        вихід_позиції_помилки::вміст = позиція_помилки_тіла_зловити;
        стрибнути звільнити_і_вийти;
      }
      ціль гілка_спробувати = виділити<Гілка>(система);
      гілка_спробувати.вид = ВидГілкиСпробувати;
      гілка_спробувати.дані = дані_гілки_спробувати;
      гілка_спробувати.місцезнаходження = Місцезнаходження {
        позиція_початку
      };
      вихід::вміст = гілка_спробувати;
      вихід_позиції_кінця::вміст = п;
      вернути так;
      звільнити_і_вийти:
      звільнити_тіло(система, дані_гілки_спробувати.тіло);
      звільнити_тіло(система, дані_гілки_спробувати.тіло_зловити);
      вернути ні;
    }

    зовнішня дія розібрати_слова_на_гілки(система: адреса<Система>, значення_ю8: ю8, слова: Слова, вихід: адреса<Гілки>, вихід_помилки: адреса<ПомилкаРозборуНаГілки>): логічне {
      змінна ціль тіло = Гілки { 0, пусто };
      змінна ціль позиція_кінця: позитивне = 0;
      змінна ціль позиція_помилки: позитивне = 0;
      якщо спробувати_розібрати_тіло(система, слова, 0, тіло::адреса, позиція_кінця::адреса, ВидСловаКІНЕЦЬСЛІВ, позиція_помилки::адреса) {
        вихід::вміст = Гілки {
          тіло.розмір,
          тіло.дані
        };
        вернути так;
      }
      вихід_помилки::вміст = ПомилкаРозборуНаГілки {
        позиція_слова = позиція_помилки,
        рядок = слова.дані[позиція_помилки].позиція_початку.рядок,
        стовпець = слова.дані[позиція_помилки].позиція_початку.стовпець
      };
      вернути ні;
    }

    зовнішня дія вивести_гілку(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8, слова: Слова, гілка: адреса<Гілка>) {
      якщо гілка.вид == ВидГілкиНіщо {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Ніщо");
      } інакше якщо гілка.вид == ВидГілкиВизначити {
        ціль дані = гілка.дані як ДаніГілкиВизначити;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Визначити(");
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Ідентифікатор(");
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, отримати_ю8_ідентифікатора(значення_ю8, слова, дані.ідентифікатор));
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"), ");
        вивести_гілку(система, вихідний_потік, значення_ю8, слова, дані.значення);
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8")");
      } інакше якщо гілка.вид == ВидГілкиЗвернутись {
        ціль дані = гілка.дані як ДаніГілкиЗвернутись;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Звернутись(");
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Ідентифікатор(");
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, отримати_ю8_ідентифікатора(значення_ю8, слова, дані.ідентифікатор));
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8")");
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8")");
      } інакше якщо гілка.вид == ВидГілкиОтримати {
        ціль дані = гілка.дані як ДаніГілкиОтримати;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Отримати(");
        вивести_гілку(система, вихідний_потік, значення_ю8, слова, дані.предмет);
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8", Ідентифікатор(");
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, отримати_ю8_ідентифікатора(значення_ю8, слова, дані.ідентифікатор));
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8")");
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8")");
      } інакше якщо гілка.вид == ВидГілкиОтриматиЕлемент {
        ціль дані = гілка.дані як ДаніГілкиОтриматиЕлемент;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ОтриматиЕлемент");
      } інакше якщо гілка.вид == ВидГілкиЗмінити {
        ціль дані = гілка.дані як ДаніГілкиЗмінити;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Змінити");
      } інакше якщо гілка.вид == ВидГілкиЗмінитиЕлемент {
        ціль дані = гілка.дані як ДаніГілкиЗмінитиЕлемент;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ЗмінитиЕлемент");
      } інакше якщо гілка.вид == ВидГілкиВиконати {
        ціль дані = гілка.дані як ДаніГілкиВиконати;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Виконати(");
        вивести_гілку(система, вихідний_потік, значення_ю8, слова, дані.предмет);
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8", [");
        змінна ціль п: позитивне = 0;
        поки п < дані.кількість_аргументів {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Аргумент(");
          якщо дані.аргументи[п].ідентифікатор.заповнено == позитивне(так) {
            дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Ідентифікатор(");
            дописати_ю8_у_вихідний_потік(система, вихідний_потік, отримати_ю8_ідентифікатора(значення_ю8, слова, дані.аргументи[п].ідентифікатор.значення));
            дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"), ");
          }
        вивести_гілку(система, вихідний_потік, значення_ю8, слова, дані.аргументи[п].значення);
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8")");
          якщо п != дані.кількість_аргументів - 1 {
            дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8", ");
          }
          п += 1;
        }
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"])");
      } інакше якщо гілка.вид == ВидГілкиДія {
        ціль дані = гілка.дані як ДаніГілкиДія;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Дія");
      } інакше якщо гілка.вид == ВидГілкиСтруктура {
        ціль дані = гілка.дані як ДаніГілкиСтруктура;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Структура");
      } інакше якщо гілка.вид == ВидГілкиЧисло {
        ціль дані = гілка.дані як ДаніГілкиЧисло;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Число(");
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, отримати_ю8_слова(значення_ю8, слова, слова.дані[дані.позиція_слова]));
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8")");
      } інакше якщо гілка.вид == ВидГілкиТекст {
        ціль дані = гілка.дані як ДаніГілкиТекст;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Текст(\"");
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, слова.дані[дані.позиція_слова].значення);
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"\")");
      } інакше якщо гілка.вид == ВидГілкиОперація {
        ціль дані = гілка.дані як ДаніГілкиОперація;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Операція(");
        вивести_гілку(система, вихідний_потік, значення_ю8, слова, дані.ліво);
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8", ");
        якщо дані.операція == ВидОпераціїМноження {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"*");
        } інакше якщо дані.операція == ВидОпераціїДілення {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"/");
        } інакше якщо дані.операція == ВидОпераціїМодуль {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"%");
        } інакше якщо дані.операція == ВидОпераціїДодавання {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"+");
        } інакше якщо дані.операція == ВидОпераціїВіднімання {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"-");
        } інакше якщо дані.операція == ВидОпераціїЗсувВліво {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"<<");
        } інакше якщо дані.операція == ВидОпераціїЗсувВправо {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8">>");
        } інакше якщо дані.операція == ВидОпераціїЗсувВправоЗнаковий {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8">>>");
        } інакше якщо дані.операція == ВидОпераціїМенше {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"<");
        } інакше якщо дані.операція == ВидОпераціїБільше {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8">");
        } інакше якщо дані.операція == ВидОпераціїМеншеРівне {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"<=");
        } інакше якщо дані.операція == ВидОпераціїБільшеРівне {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8">=");
        } інакше якщо дані.операція == ВидОпераціїРівне {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"==");
        } інакше якщо дані.операція == ВидОпераціїНерівне {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"!=");
        } інакше якщо дані.операція == ВидОпераціїДІ {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"&");
        } інакше якщо дані.операція == ВидОпераціїВАБО {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"^");
        } інакше якщо дані.операція == ВидОпераціїДАБО {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"|");
        } інакше якщо дані.операція == ВидОпераціїІ {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"&&");
        } інакше якщо дані.операція == ВидОпераціїАБО {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"||");
        } інакше якщо дані.операція == ВидОпераціїДіленняНаціло {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"//");
        } інакше якщо дані.операція == ВидОпераціїПіднесенняДоСтепеня {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"**");
        } інакше якщо дані.операція == ВидОпераціїМістить {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"містить");
        } інакше якщо дані.операція == ВидОпераціїНеМістить {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"не містить");
        } інакше якщо дані.операція == ВидОпераціїЄ {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"є");
        } інакше якщо дані.операція == ВидОпераціїНеЄ {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"не є");
        } інакше {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"НЕВІДОМА ОПЕРАЦІЯ");
        }
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8", ");
        вивести_гілку(система, вихідний_потік, значення_ю8, слова, дані.право);
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8")");
      } інакше якщо гілка.вид == ВидГілкиЯкщо {
        ціль дані = гілка.дані як ДаніГілкиЯкщо;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Якщо");
      } інакше якщо гілка.вид == ВидГілкиПоки {
        ціль дані = гілка.дані як ДаніГілкиПоки;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Поки");
      } інакше якщо гілка.вид == ВидГілкиВернути {
        ціль дані = гілка.дані як ДаніГілкиВернути;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Вернути");
      } інакше якщо гілка.вид == ВидГілкиЗначенняЯкщо {
        ціль дані = гілка.дані як ДаніГілкиЗначенняЯкщо;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ЗначенняЯкщо");
      } інакше якщо гілка.вид == ВидГілкиСамоОперація {
        ціль дані = гілка.дані як ДаніГілкиСамоОперація;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СамоОперація");
      } інакше якщо гілка.вид == ВидГілкиВзяти {
        ціль дані = гілка.дані як ДаніГілкиВзяти;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Взяти");
      } інакше якщо гілка.вид == ВидГілкиСпробувати {
        ціль дані = гілка.дані як ДаніГілкиСпробувати;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Спробувати");
      } інакше якщо гілка.вид == ВидГілкиВпасти {
        ціль дані = гілка.дані як ДаніГілкиВпасти;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Впасти");
      } інакше якщо гілка.вид == ВидГілкиДати {
        ціль дані = гілка.дані як ДаніГілкиДати;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Дати");
      } інакше якщо гілка.вид == ВидГілкиМодуль {
        ціль дані = гілка.дані як ДаніГілкиМодуль;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Модуль");
      } інакше якщо гілка.вид == ВидГілкиСписок {
        ціль дані = гілка.дані як ДаніГілкиСписок;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Список");
      } інакше якщо гілка.вид == ВидГілкиСловник {
        ціль дані = гілка.дані як ДаніГілкиСловник;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Словник");
      } інакше якщо гілка.вид == ВидГілкиСимвол {
        ціль дані = гілка.дані як ДаніГілкиСимвол;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Символ('");
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, слова.дані[дані.позиція_слова].значення);
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"')");
      } інакше якщо гілка.вид == ВидГілкиПеребрати {
        ціль дані = гілка.дані як ДаніГілкиПеребрати;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Перебрати");
      } інакше якщо гілка.вид == ВидГілкиЦикл {
        ціль дані = гілка.дані як ДаніГілкиЦикл;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Цикл");
      } інакше якщо гілка.вид == ВидГілкиВизначитиЗзовні {
        ціль дані = гілка.дані як ДаніГілкиВизначитиЗзовні;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ВизначитиЗзовні");
      } інакше якщо гілка.вид == ВидГілкиВічнийЦикл {
        ціль дані = гілка.дані як ДаніГілкиВічнийЦикл;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ВічнийЦикл");
      } інакше якщо гілка.вид == ВидГілкиВидалити {
        ціль дані = гілка.дані як ДаніГілкиВидалити;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Видалити");
      } інакше якщо гілка.вид == ВидГілкиВидалитиВластивість {
        ціль дані = гілка.дані як ДаніГілкиВидалитиВластивість;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ВидалитиВластивість");
      } інакше якщо гілка.вид == ВидГілкиВидалитиЕлемент {
        ціль дані = гілка.дані як ДаніГілкиВидалитиЕлемент;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ВидалитиЕлемент");
      } інакше якщо гілка.вид == ВидГілкиЧекати {
        ціль дані = гілка.дані як ДаніГілкиЧекати;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Чекати");
      } інакше якщо гілка.вид == ВидГілкиДіапазон {
        ціль дані = гілка.дані як ДаніГілкиДіапазон;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Діапазон");
      } інакше якщо гілка.вид == ВидГілкиЗбитийТекст {
        ціль дані = гілка.дані як ДаніГілкиЗбитийТекст;
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ЗбитийТекст([");
        змінна ціль п: позитивне = 0;
        поки п < дані.кількість_гілок {
          вивести_гілку(система, вихідний_потік, значення_ю8, слова, дані.гілки[п]);
          якщо п != дані.кількість_гілок - 1 {
            дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8", ");
          }
          п += 1;
        }
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"])");
      } інакше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"!!! НЕВІДОМА ГІЛКА !!!");
      }
    }

    зовнішня дія вивести_гілки(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8, слова: Слова, гілки: Гілки) {
      змінна ціль п: позитивне = 0;
      поки п < гілки.розмір {
        вивести_гілку(система, вихідний_потік, значення_ю8, слова, гілки.дані[п]);
        якщо п != гілки.розмір - 1 {
          дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"\n");
        }
        п += 1;
      }
    }

    зовнішня дія звільнити_гілки(система: адреса<Система>, гілки: Гілки) {
      змінна ціль п: позитивне = 0;
      поки п < гілки.розмір {
        звільнити_гілку(система, гілки.дані[п]);
        п += 1;
      }
      звільнити_памʼять(система, гілки.дані);
    }

    зовнішня дія звільнити_помилку_розбору_на_гілки(система: адреса<Система>, помилка: ПомилкаРозборуНаГілки) {
      // ...
    }

    зовнішня дія отримати_ю8_помилки_розбору_на_гілки(система: адреса<Система>, помилка: ПомилкаРозборуНаГілки, вихід: адреса<ю8>): логічне {
      виділити_копію_ю8(система, ю8"Не вдалось розібрати", вихід);
      вернути так;
    }

    зовнішня дія отримати_рядок_помилки_розбору_на_гілки(система: адреса<Система>, помилка: ПомилкаРозборуНаГілки): позитивне {
      вернути помилка.рядок;
    }

    зовнішня дія отримати_стовпець_помилки_розбору_на_гілки(система: адреса<Система>, помилка: ПомилкаРозборуНаГілки): позитивне {
      вернути помилка.стовпець;
    }
  }
}