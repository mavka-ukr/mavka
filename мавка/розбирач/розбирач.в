секція мавка {
  секція розбирач {
    структура можливо<Т>;
    структура Система;
    структура ВихіднийПотік;
    структура Форматувач;

    структура можливо<Т> {
      заповнено: позитивне;
      значення: Т;
    }

    структура Система {
      дані: невідома_адреса;
      виділити_сиру_памʼять: (система: адреса<Система>, розмір: позитивне) -> памʼять<п8>;
      перевиділити_сиру_памʼять: (система: адреса<Система>, значення: памʼять<п8>, новий_розмір: позитивне) -> памʼять<п8>;
      звільнити_сиру_памʼять: (система: адреса<Система>, значення: невідома_памʼять) -> ніщо;
    }

    структура ВихіднийПотік {
      дані: невідома_адреса;
      дописати: (система: адреса<Система>, потік: адреса<ВихіднийПотік>, розмір: позитивне, дані: памʼять<п8>) -> логічне;
    }

    структура Форматувач {
      дані: невідома_адреса;
      перетворити_п64_на_ю8: (система: адреса<Система>, форматувач: адреса<Форматувач>, значення: п64) -> ніщо;
      перетворити_ц64_на_ю8: (система: адреса<Система>, форматувач: адреса<Форматувач>, значення: ц64) -> ніщо;
      перетворити_д64_на_ю8: (система: адреса<Система>, форматувач: адреса<Форматувач>, значення: д64) -> ніщо;
    }

    структура ПомилкаРозборуНаСлова {
      позиція_символа: позитивне;
      рядок: позитивне;
      стовпець: позитивне;
    }

    структура ПомилкаРозборуНаГілки {
      позиція_слова: позитивне;
      рядок: позитивне;
      стовпець: позитивне;
    }

    дія виділити<Т>(система: адреса<Система>): адреса<Т>;
    дія перевиділити<Т>(система: адреса<Система>, значення: адреса<Т>, кількість: позитивне): памʼять<Т>;
    дія звільнити(система: адреса<Система>, значення: невідома_адреса);
    дія виділити_памʼять<Т>(система: адреса<Система>, кількість: позитивне): памʼять<Т>;
    дія перевиділити_памʼять<Т>(система: адреса<Система>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т>;
    дія звільнити_памʼять(система: адреса<Система>, значення: невідома_памʼять);

    дія виділити<Т>(система: адреса<Система>): адреса<Т> {
      вернути система.виділити_сиру_памʼять(система, size_t(Т.розмір)) як адреса<Т>;
    }

    дія перевиділити<Т>(система: адреса<Система>, значення: адреса<Т>, кількість: позитивне): памʼять<Т> {
      вернути система.перевиділити_сиру_памʼять(система, значення як невідома_адреса, size_t(кількість * Т.розмір)) як памʼять<Т>;
    }

    дія звільнити(система: адреса<Система>, значення: невідома_адреса) {
      система.звільнити_сиру_памʼять(система, значення як невідома_памʼять);
    }

    дія виділити_памʼять<Т>(система: адреса<Система>, кількість: позитивне): памʼять<Т> {
      вернути система.виділити_сиру_памʼять(система, size_t(кількість * Т.розмір)) як памʼять<Т>;
    }

    дія перевиділити_памʼять<Т>(система: адреса<Система>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т> {
      вернути система.перевиділити_сиру_памʼять(система, значення як памʼять<п8>, size_t(кількість * Т.розмір)) як памʼять<Т>;
    }

    дія звільнити_памʼять(система: адреса<Система>, значення: невідома_памʼять) {
      система.звільнити_сиру_памʼять(система, значення);
    }

    синонім ВидСловаАбо = 0;
    синонім ВидСловаБільше = 1;
    синонім ВидСловаВзяти = 2;
    синонім ВидСловаВласна = 3;
    синонім ВидСловаВпасти = 4;
    синонім ВидСловаВидалити = 5;
    синонім ВидСловаВнутрішня = 6;
    синонім ВидСловаВластивість = 7;
    синонім ВидСловаВернути = 8;
    синонім ВидСловаДія = 9;
    синонім ВидСловаДати = 10;
    синонім ВидСловаЄ = 11;
    синонім ВидСловаЗовнішня = 12;
    синонім ВидСловаЗловити = 13;
    синонім ВидСловаІ = 14;
    синонім ВидСловаІнакше = 15;
    синонім ВидСловаКомпозиція = 16;
    синонім ВидСловаКінець = 17;
    синонім ВидСловаМодуль = 18;
    синонім ВидСловаМенше = 19;
    синонім ВидСловаМістить = 20;
    синонім ВидСловаМісцева = 21;
    синонім ВидСловаНе = 22;
    синонім ВидСловаПоки = 23;
    синонім ВидСловаПерелік = 24;
    синонім ВидСловаПредок = 25;
    синонім ВидСловаПеребрати = 26;
    синонім ВидСловаРівно = 27;
    синонім ВидСловаСтруктура = 28;
    синонім ВидСловаСпробувати = 29;
    синонім ВидСловаСпец = 30;
    синонім ВидСловаТривала = 31;
    синонім ВидСловаЦикл = 32;
    синонім ВидСловаЦе = 33;
    синонім ВидСловаЧекати = 34;
    синонім ВидСловаЯк = 35;
    синонім ВидСловаЯкщо = 36;

    синонім ВидСловаСимволРівно = 37;
    синонім ВидСловаСимволБільше = 38;
    синонім ВидСловаСимволМенше = 39;
    синонім ВидСловаСимволКрапка = 40;
    синонім ВидСловаСимволПлюс = 41;
    синонім ВидСловаСимволМінус = 42;
    синонім ВидСловаСимволПомножити = 43;
    синонім ВидСловаСимволПоділити = 44;
    синонім ВидСловаСимволЗалишку = 45;
    синонім ВидСловаСимволПірамідка = 46;
    синонім ВидСловаСимволІ = 47;
    синонім ВидСловаСимволАбо = 48;
    синонім ВидСловаСимволВідкритаДужка = 49;
    синонім ВидСловаСимволЗакритаДужка = 50;
    синонім ВидСловаСимволКвадратнаВідкритаДужка = 51;
    синонім ВидСловаСимволКвадратнаЗакритаДужка = 52;
    синонім ВидСловаСимволЗнакПитання = 53;
    синонім ВидСловаСимволДвокрапка = 54;
    синонім ВидСловаСимволТильда = 55;
    синонім ВидСловаСимволОднолапка = 56;
    синонім ВидСловаСимволДволапка = 57;
    синонім ВидСловаСимволЗнакОклику = 58;
    синонім ВидСловаСимволКома = 59;
    синонім ВидСловаСимволМіжряд = 60;

    синонім ВидСловаЧисло = 61;
    синонім ВидСловаДесятковеЧисло = 62;
    синонім ВидСловаСимвол = 63;
    синонім ВидСловаТекст = 64;
    синонім ВидСловаБагаторядковийТекст = 65;
    синонім ВидСловаКоментар = 66;
    синонім ВидСловаБагаторядковийКоментар = 67;
    синонім ВидСловаІдентифікатор = 68;

    синонім ВидСловаКІНЕЦЬСЛІВ = 100;

    синонім UNICODE_SPACE = 32;
    синонім UNICODE_DOT = 46;
    синонім UNICODE_0 = 48;
    синонім UNICODE_1 = 49;
    синонім UNICODE_2 = 50;
    синонім UNICODE_3 = 51;
    синонім UNICODE_4 = 52;
    синонім UNICODE_5 = 53;
    синонім UNICODE_6 = 54;
    синонім UNICODE_7 = 55;
    синонім UNICODE_8 = 56;
    синонім UNICODE_9 = 57;

    структура Слово {
      вид: позитивне;
      позиція_початку: позитивне;
      позиція_кінця: позитивне;
    }

    структура Слова {
      розмір: позитивне;
      дані: памʼять<Слово>;
    }

    синонім ВидГілкиНіщо = 0;
    синонім ВидГілкиВизначити = 1;
    синонім ВидГілкиЗвернутись = 2;
    синонім ВидГілкиОтримати = 3;
    синонім ВидГілкиОтриматиЕлемент = 5;
    синонім ВидГілкиЗмінити = 6;
    синонім ВидГілкиЗмінитиЕлемент = 8;
    синонім ВидГілкиВиконати = 9;
    синонім ВидГілкиДія = 12;
    синонім ВидГілкиСтруктура = 13;
    синонім ВидГілкиЧисло = 18;
    синонім ВидГілкиТекст = 19;
    синонім ВидГілкиОперація = 21;
    синонім ВидГілкиЯкщо = 22;
    синонім ВидГілкиПоки = 23;
    синонім ВидГілкиВернути = 24;
    синонім ВидГілкиЗначенняЯкщо = 27;
    синонім ВидГілкиСамоОперація = 29;
    синонім ВидГілкиВзяти = 33;
    синонім ВидГілкиСпробувати = 34;
    синонім ВидГілкиВпасти = 35;
    синонім ВидГілкиДати = 36;
    синонім ВидГілкиМодуль = 37;
    синонім ВидГілкиСписок = 38;
    синонім ВидГілкиСловник = 39;
    синонім ВидГілкиСимвол = 40;
    синонім ВидГілкиПеребрати = 41;
    синонім ВидГілкиЦикл = 42;
    синонім ВидГілкиВизначитиЗзовні = 43;
    синонім ВидГілкиПеребратиДіапазон = 44;
    синонім ВидГілкиВічнийЦикл = 45;
    синонім ВидГілкиВидалити = 46;
    синонім ВидГілкиВидалитиВластивість = 47;
    синонім ВидГілкиВидалитиЕлемент = 48;
    синонім ВидГілкиЧекати = 49; // 49

    синонім ВидОпераціїМноження = 1;
    синонім ВидОпераціїДілення = 2;
    синонім ВидОпераціїМодуль = 3;
    синонім ВидОпераціїДодавання = 4;
    синонім ВидОпераціїВіднімання = 5;
    синонім ВидОпераціїЗсувВліво = 6;
    синонім ВидОпераціїЗсувВправо = 7;
    синонім ВидОпераціїЗсувВправоЗнаковий = 8;
    синонім ВидОпераціїМенше = 9;
    синонім ВидОпераціїБільше = 10;
    синонім ВидОпераціїМеншеРівне = 11;
    синонім ВидОпераціїБільшеРівне = 12;
    синонім ВидОпераціїРівне = 13;
    синонім ВидОпераціїНерівне = 14;
    синонім ВидОпераціїДІ = 15;
    синонім ВидОпераціїВАБО = 16;
    синонім ВидОпераціїДАБО = 17;
    синонім ВидОпераціїІ = 18;
    синонім ВидОпераціїАБО = 19;
    синонім ВидОпераціїДіленняНаціло = 20;
    синонім ВидОпераціїПіднесенняДоСтепеня = 21;
    синонім ВидОпераціїМістить = 22;
    синонім ВидОпераціїНеМістить = 23;
    синонім ВидОпераціїЄ = 24;
    синонім ВидОпераціїНеЄ = 25;

    синонім ВидСамоОпераціїЛогічнеНі = 1;
    синонім ВидСамоОпераціїДвійковеНі = 2;
    синонім ВидСамоОпераціїПлюс = 3;
    синонім ВидСамоОпераціїМінус = 4;

    структура Місцезнаходження;
    структура Гілка;
    структура Гілки;

    структура Ідентифікатор;
    структура Параметр;
    структура Аргумент;
    структура ЕлементДати;
    структура ЕлементВзяти;
    структура ЕлементСловника;

    структура ДаніГілкиВизначити;
    структура ДаніГілкиЗвернутись;
    структура ДаніГілкиОтримати;
    структура ДаніГілкиОтриматиЕлемент;
    структура ДаніГілкиЗмінити;
    структура ДаніГілкиЗмінитиЕлемент;
    структура ДаніГілкиВиконати;
    структура ДаніГілкиДія;
    структура ДаніГілкиСтруктура;
    структура ДаніГілкиЧисло;
    структура ДаніГілкиТекст;
    структура ДаніГілкиСимвол;
    структура ДаніГілкиОперація;
    структура ДаніГілкиЯкщо;
    структура ДаніГілкиПоки;
    структура ДаніГілкиПеребрати;
    структура ДаніГілкиЦикл;
    структура ДаніГілкиВічнийЦикл;
    структура ДаніГілкиВернути;
    структура ДаніГілкиЗначенняЯкщо;
    структура ДаніГілкиСамоОперація;
    структура ДаніГілкиВзяти;
    структура ДаніГілкиСпробувати;
    структура ДаніГілкиВпасти;
    структура ДаніГілкиДати;
    структура ДаніГілкиМодуль;
    структура ДаніГілкиСписок;
    структура ДаніГілкиСловник;
    структура ДаніГілкиВизначитиЗзовні;
    структура ДаніГілкиПеребратиДіапазон;
    структура ДаніГілкиВидалити;
    структура ДаніГілкиВидалитиВластивість;
    структура ДаніГілкиВидалитиЕлемент;
    структура ДаніГілкиЧекати;

    структура Гілки {
      розмір: позитивне;
      дані: памʼять<адреса<Гілка>>;
    }

    структура Місцезнаходження {
      позиція_слова: позитивне;
    }

    структура Ідентифікатор {
      позиція_слова: позитивне;
    }

    структура Тип {
      кількість_гілок: позитивне;
      гілки: памʼять<адреса<Гілка>>;
    }

    структура Параметр {
      ідентифікатор: Ідентифікатор;
      тип: можливо<Тип>;
      значення: адреса<Гілка>;
      місцезнаходження: Місцезнаходження;
    }

    структура Аргумент {
      ідентифікатор: можливо<Ідентифікатор>;
      значення: адреса<Гілка>;
      місцезнаходження: Місцезнаходження;
    }

    структура ЕлементДати {
      ідентифікатор: Ідентифікатор;
      ідентифікатор_як: можливо<Ідентифікатор>;
      місцезнаходження: Місцезнаходження;
    }

    структура ЕлементВзяти {
      ідентифікатор: Ідентифікатор;
      ідентифікатор_як: можливо<Ідентифікатор>;
      місцезнаходження: Місцезнаходження;
    }

    структура ЕлементСловника {
      ключ: адреса<Гілка>;
      значення: адреса<Гілка>;
      місцезнаходження: Місцезнаходження;
    }

    структура ДаніГілкиВизначити {
      ідентифікатор: Ідентифікатор;
      значення: адреса<Гілка>;
    }

    структура ДаніГілкиЗвернутись {
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніГілкиОтримати {
      предмет: адреса<Гілка>;
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніГілкиОтриматиЕлемент {
      предмет: адреса<Гілка>;
      ключ: адреса<Гілка>;
    }

    структура ДаніГілкиЗмінити {
      предмет: адреса<Гілка>;
      ідентифікатор: Ідентифікатор;
      значення: адреса<Гілка>;
    }

    структура ДаніГілкиЗмінитиЕлемент {
      предмет: адреса<Гілка>;
      ключ: адреса<Гілка>;
      значення: адреса<Гілка>;
    }

    структура ДаніГілкиВиконати {
      предмет: адреса<Гілка>;
      кількість_аргументів: позитивне;
      аргументи: памʼять<Аргумент>;
    }

    структура ДаніГілкиДія {
      тривала: позитивне;
      модифікатор: позитивне;
      структура_: адреса<Гілка>;
      ідентифікатор: можливо<Ідентифікатор>;
      кількість_параметрів: позитивне;
      параметри: памʼять<Параметр>;
      тип_результату: можливо<Тип>;
      тіло: Гілки;
    }

    структура ДаніГілкиСтруктура {
      ідентифікатор: можливо<Ідентифікатор>;
      предок: адреса<Гілка>;
      кількість_параметрів: позитивне;
      параметри: памʼять<Параметр>;
    }

    структура ДаніГілкиЧисло {
      позиція_слова: позитивне;
    }

    структура ДаніГілкиТекст {
      ідентифікатор: можливо<Ідентифікатор>;
      позиція_слова: позитивне;
    }

    структура ДаніГілкиСимвол {
      ідентифікатор: можливо<Ідентифікатор>;
      позиція_слова: позитивне;
    }

    структура ДаніГілкиОперація {
      ліво: адреса<Гілка>;
      операція: позитивне;
      право: адреса<Гілка>;
    }

    структура ДаніГілкиЯкщо {
      умова: адреса<Гілка>;
      тіло: Гілки;
      тіло_інакше: Гілки;
    }

    структура ДаніГілкиПоки {
      умова: адреса<Гілка>;
      тіло: Гілки;
    }

    структура ДаніГілкиПеребрати {
      предмет: адреса<Гілка>;
      ідентифікатор: можливо<Ідентифікатор>;
      тіло: Гілки;
    }

    структура ДаніГілкиЦикл {
      старт: Гілки;
      умова: адреса<Гілка>;
      тіло: Гілки;
      ітерація: Гілки;
    }

    структура ДаніГілкиВічнийЦикл {
      тіло: Гілки;
    }

    структура ДаніГілкиВернути {
      значення: адреса<Гілка>;
    }

    структура ДаніГілкиЗначенняЯкщо {
      умова: адреса<Гілка>;
      значення_так: адреса<Гілка>;
      значення_ні: адреса<Гілка>;
    }

    структура ДаніГілкиСамоОперація {
      операція: позитивне;
      предмет: адреса<Гілка>;
    }

    структура ДаніГілкиВзяти {
      тип: можливо<Ідентифікатор>;
      довжина_шляху: позитивне;
      шлях: памʼять<Ідентифікатор>;
      ідентифікатор_як: можливо<Ідентифікатор>;
      кількість_елементів: позитивне;
      елементи: памʼять<ЕлементВзяти>;
    }

    структура ДаніГілкиСпробувати {
      тіло: Гілки;
      ідентифікатор_зловити: можливо<Ідентифікатор>;
      тіло_зловити: Гілки;
    }

    структура ДаніГілкиВпасти {
      значення: адреса<Гілка>;
    }

    структура ДаніГілкиДати {
      кількість_елементів: позитивне;
      елементи: памʼять<ЕлементДати>;
    }

    структура ДаніГілкиМодуль {
      ідентифікатор: можливо<Ідентифікатор>;
      тіло: Гілки;
    }

    структура ДаніГілкиСписок {
      кількість_елементів: позитивне;
      елементи: памʼять<адреса<Гілка>>;
    }

    структура ДаніГілкиСловник {
      кількість_елементів: позитивне;
      елементи: памʼять<ЕлементСловника>;
    }

    структура ДаніГілкиВизначитиЗзовні {
      ідентифікатор: Ідентифікатор;
      значення: адреса<Гілка>;
    }

    структура ДаніГілкиПеребратиДіапазон {
      від: адреса<Гілка>;
      включно: позитивне;
      до: адреса<Гілка>;
      ідентифікатор: можливо<Ідентифікатор>;
      тіло: Гілки;
    }

    структура ДаніГілкиВидалити {
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніГілкиВидалитиВластивість {
      предмет: адреса<Гілка>;
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніГілкиВидалитиЕлемент {
      предмет: адреса<Гілка>;
      ключ: адреса<Гілка>;
    }

    структура ДаніГілкиЧекати {
      значення: адреса<Гілка>;
    }

    структура Гілка {
      вид: позитивне;
      дані: ДаніГілкиВизначити | ДаніГілкиЗвернутись | ДаніГілкиОтримати | ДаніГілкиОтриматиЕлемент | ДаніГілкиЗмінити | ДаніГілкиЗмінитиЕлемент | ДаніГілкиВиконати | ДаніГілкиДія | ДаніГілкиСтруктура | ДаніГілкиЧисло | ДаніГілкиТекст | ДаніГілкиСимвол | ДаніГілкиОперація | ДаніГілкиЯкщо | ДаніГілкиПоки | ДаніГілкиПеребрати | ДаніГілкиЦикл | ДаніГілкиВічнийЦикл | ДаніГілкиВернути | ДаніГілкиЗначенняЯкщо | ДаніГілкиСамоОперація | ДаніГілкиВзяти | ДаніГілкиСпробувати | ДаніГілкиВпасти | ДаніГілкиДати | ДаніГілкиМодуль | ДаніГілкиСписок | ДаніГілкиСловник | ДаніГілкиВизначитиЗзовні | ДаніГілкиПеребратиДіапазон | ДаніГілкиВидалити | ДаніГілкиВидалитиВластивість | ДаніГілкиВидалитиЕлемент | ДаніГілкиЧекати;
      місцезнаходження: Місцезнаходження;
    }

    зовнішня дія розібрати_ю8_на_слова(система: адреса<Система>, значення_ю8: ю8, вихід: адреса<Слова>, вихід_помилки: адреса<ПомилкаРозборуНаСлова>): логічне;
    зовнішня дія вивести_слово(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8, слово: Слово);
    зовнішня дія вивести_слова(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8, слова: Слова);
    зовнішня дія звільнити_слова(система: адреса<Система>, слова: Слова);
    зовнішня дія звільнити_помилку_розбору_на_слова(система: адреса<Система>, помилка: ПомилкаРозборуНаСлова);
    зовнішня дія отримати_ю8_помилки_розбору_на_слова(система: адреса<Система>, помилка: ПомилкаРозборуНаСлова, вихід: адреса<ю8>): логічне;
    зовнішня дія отримати_рядок_помилки_розбору_на_слова(система: адреса<Система>, помилка: ПомилкаРозборуНаСлова): позитивне;
    зовнішня дія отримати_стовпець_помилки_розбору_на_слова(система: адреса<Система>, помилка: ПомилкаРозборуНаСлова): позитивне;

    зовнішня дія отримати_ю8_ідентифікатора(значення_ю8: ю8, слова: Слова, ідентифікатор: Ідентифікатор): ю8;
    зовнішня дія отримати_ю8_слова(значення_ю8: ю8, слова: Слова, слово: Слово): ю8;
    зовнішня дія отримати_ю8_тексту(значення_ю8: ю8, слова: Слова, гілка_тексту: адреса<Гілка>): ю8;
    зовнішня дія отримати_ю8_символу(значення_ю8: ю8, слова: Слова, гілка_символу: адреса<Гілка>): ю8;
    зовнішня дія отримати_рядок_з_місцезнаходження(значення_ю8: ю8, слова: Слова, місцезнаходження: Місцезнаходження): позитивне;
    зовнішня дія отримати_стовпець_з_місцезнаходження(значення_ю8: ю8, слова: Слова, місцезнаходження: Місцезнаходження): позитивне;

    зовнішня дія розібрати_слова_на_гілки(система: адреса<Система>, слова: Слова, вихід: адреса<Гілки>, вихід_помилки: адреса<ПомилкаРозборуНаГілки>): логічне;
    зовнішня дія вивести_гілку(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8, слова: Слова, гілка: адреса<Гілка>);
    зовнішня дія вивести_гілки(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8, слова: Слова, гілки: Гілки);
    зовнішня дія звільнити_гілки(система: адреса<Система>, гілки: Гілки);
    зовнішня дія звільнити_помилку_розбору_на_гілки(система: адреса<Система>, помилка: ПомилкаРозборуНаГілки);
    зовнішня дія отримати_ю8_помилки_розбору_на_гілки(система: адреса<Система>, помилка: ПомилкаРозборуНаГілки, вихід: адреса<ю8>): логічне;
    зовнішня дія отримати_рядок_помилки_розбору_на_гілки(система: адреса<Система>, помилка: ПомилкаРозборуНаГілки): позитивне;
    зовнішня дія отримати_стовпець_помилки_розбору_на_гілки(система: адреса<Система>, помилка: ПомилкаРозборуНаГілки): позитивне;
  }
}