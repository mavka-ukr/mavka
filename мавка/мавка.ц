взяти визначення КД;
взяти визначення МаМа;
взяти визначення мавка;
взяти визначення мавка/розбирач;
взяти визначення мавка/перекладач;

зовнішня дія мавка_система_вийти(код: ц32);
зовнішня дія мавка_система_прочитати_файл(шлях: ю8, вихід: адреса<ю8>): логічне;
зовнішня дія мавка_система_отримати_абсолютний_шлях(шлях: ю8, вихід: адреса<ю8>): логічне;
зовнішня дія мавка_система_отримати_абсолютний_зовнішній_шлях(шлях: ю8, вихід: адреса<ю8>): логічне;
зовнішня дія мавка_система_отримати_поточну_папку_процесу(вихід: адреса<ю8>): логічне;
зовнішня дія мавка_система_отримати_назву_файлу_без_розширення(шлях: ю8, вихід: адреса<ю8>): логічне;
зовнішня дія мавка_система_прочитати_ю8_зі_стандартного_вводу(префікс: ю8, вихід: адреса<ю8>): логічне;
зовнішня дія мавка_система_перевірити_чи_шлях_існує_і_є_файлом(шлях: ю8): логічне;

секція мавка {
  структура ІменованіАргументи {
    кількість: позитивне;
    дані: памʼять<адреса<Предмет>>;
  }

  структура ДаніМашини {
    шлях_до_папки_виконання: ю8;
    обробник_взяття_біб: (обчислювач: адреса<Обчислювач>, розмір_шляху: позитивне, шлях: памʼять<адреса<Предмет>>) -> предмет_або_стан_падіння;
  }

  дія машина_виділити_сиру_памʼять(М: адреса<МаМа::Машина>, розмір: позитивне): памʼять<п8> {
    вернути мавка_система_виділити_сиру_памʼять(розмір);
  }

  дія машина_перевиділити_сиру_памʼять(М: адреса<МаМа::Машина>, значення: памʼять<п8>, розмір: позитивне): памʼять<п8> {
    вернути мавка_система_перевиділити_сиру_памʼять(значення, розмір);
  }

  дія машина_звільнити_сиру_памʼять(М: адреса<МаМа::Машина>, значення: памʼять<п8>) {
    мавка_система_звільнити_сиру_памʼять(значення);
  }

  дія машина_померти(М: адреса<МаМа::Машина>, код: ц32, повідомлення: т8) {
    ціль обчислювач = М;
    надрукувати_ю8(обчислювач, ю8"СМЕРТЬ!");
    мавка_система_вийти(код);
  }

  дія система_розбирача_виділити_сиру_памʼять(система: адреса<мавка::розбирач::Система>, розмір: позитивне): памʼять<п8> {
    ціль М = система.дані як адреса<МаМа::Машина>;
    вернути МаМа::виділити_памʼять<п8>(М, розмір);
  }

  дія система_розбирача_перевиділити_сиру_памʼять(система: адреса<мавка::розбирач::Система>, значення: памʼять<п8>, новий_розмір: позитивне): памʼять<п8> {
    ціль М = система.дані як адреса<МаМа::Машина>;
    вернути МаМа::перевиділити_памʼять<п8>(М, значення, новий_розмір);
  }

  дія система_розбирача_звільнити_сиру_памʼять(система: адреса<мавка::розбирач::Система>, значення: невідома_памʼять) {
    ціль М = система.дані як адреса<МаМа::Машина>;
    МаМа::звільнити_памʼять(М, значення);
  }

  дія розбирач_дописати_у_стандартний_вивід(система: адреса<мавка::розбирач::Система>, потік: адреса<мавка::розбирач::ВихіднийПотік>, розмір: позитивне, дані: памʼять<п8>): логічне {
    ціль обчислювач = система.дані як адреса<Обчислювач>;
    вивести_ю8(обчислювач, ю8 { розмір, дані });
    вернути так;
  }

  дія система_перекладача_виділити_сиру_памʼять(система: адреса<мавка::перекладач::Система>, розмір: позитивне): памʼять<п8> {
    ціль М = система.дані як адреса<МаМа::Машина>;
    вернути МаМа::виділити_памʼять<п8>(М, розмір);
  }

  дія система_перекладача_перевиділити_сиру_памʼять(система: адреса<мавка::перекладач::Система>, значення: памʼять<п8>, новий_розмір: позитивне): памʼять<п8> {
    ціль М = система.дані як адреса<МаМа::Машина>;
    вернути МаМа::перевиділити_памʼять<п8>(М, значення, новий_розмір);
  }

  дія система_перекладача_звільнити_сиру_памʼять(система: адреса<мавка::перекладач::Система>, значення: невідома_памʼять) {
    ціль М = система.дані як адреса<МаМа::Машина>;
    МаМа::звільнити_памʼять(М, значення);
  }

  дія перекладач_дописати_у_стандартний_вивід(система: адреса<мавка::перекладач::Система>, потік: адреса<мавка::перекладач::ВихіднийПотік>, розмір: позитивне, дані: памʼять<п8>): логічне {
    ціль обчислювач = система.дані як адреса<Обчислювач>;
    вивести_ю8(обчислювач, ю8 { розмір, дані });
    вернути так;
  }

  дія код_в_ПредметКоду(М: адреса<МаМа::Машина>, шлях: адреса<МаМа::ПредметЮнікоду>, сирі_константи: МаМа::Послідовність<п8>, сирі_вказівки: МаМа::Послідовність<п8>): адреса<МаМа::ПредметКоду> {
    змінна ціль константи = МаМа::зробити_накопичувач<адреса<МаМа::Предмет>>(М);
    змінна ціль п: позитивне = 0;
    поки п < сирі_константи.розмір {
      ціль вид_константи = сирі_константи.дані[п];
      якщо вид_константи == мавка::перекладач::ВидКонстантиНазва {
        п += 1;
        ціль адреса_на_розмір_назви = сирі_константи.дані[п]::адреса як адреса<позитивне>;
        ціль розмір_назви = адреса_на_розмір_назви::вміст;
        п += 7;
        якщо розмір_назви > 0 {
          п += 1;
          ціль предмет_назви = МаМа::створити_предмет_тексту(М, т8 { розмір_назви, сирі_константи.дані[п]::адреса як памʼять<п8> });
          МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, константи::адреса, предмет_назви як адреса<МаМа::Предмет>);
          п += (розмір_назви - 1);
        } інакше {
          ціль предмет_назви = МаМа::створити_предмет_тексту(М, "");
          МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, константи::адреса, предмет_назви як адреса<МаМа::Предмет>);
        }
      } інакше якщо вид_константи == мавка::перекладач::ВидКонстантиЧисло {
        п += 1;
        ціль адреса_на_значення = сирі_константи.дані[п]::адреса як адреса<д64>;
        ціль значення = адреса_на_значення::вміст;
        ціль предмет_числа = МаМа::створити_предмет_числа(М, значення);
        МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, константи::адреса, предмет_числа як адреса<МаМа::Предмет>);
        п += 7;
      } інакше якщо вид_константи == мавка::перекладач::ВидКонстантиТекст {
        п += 1;
        ціль адреса_на_розмір_тексту = сирі_константи.дані[п]::адреса як адреса<позитивне>;
        ціль розмір_тексту = адреса_на_розмір_тексту::вміст;
        п += 7;
        якщо розмір_тексту > 0 {
          п += 1;
          ціль предмет_тексту = МаМа::створити_предмет_тексту(М, т8 { розмір_тексту, сирі_константи.дані[п]::адреса як памʼять<п8> });
          МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, константи::адреса, предмет_тексту як адреса<МаМа::Предмет>);
          п += (розмір_тексту - 1);
        } інакше {
          ціль предмет_тексту = МаМа::створити_предмет_тексту(М, "");
          МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, константи::адреса, предмет_тексту як адреса<МаМа::Предмет>);
        }
      } інакше якщо вид_константи == мавка::перекладач::ВидКонстантиЮнікод8 {
        п += 1;
        ціль адреса_на_розмір_юнікоду8 = сирі_константи.дані[п]::адреса як адреса<позитивне>;
        ціль розмір_юнікоду8 = адреса_на_розмір_юнікоду8::вміст;
        п += 7;
        якщо розмір_юнікоду8 > 0 {
          п += 1;
          змінна ціль значення_ю32 = ю32 { 0, пусто };
          якщо МаМа::перекодувати_ю8_в_ю32(М, ю8 { розмір_юнікоду8, сирі_константи.дані[п]::адреса як памʼять<п8> }, значення_ю32::адреса, ні) == ні {
            МаМа::ПОМЕРТИ(М, "Ой...");
          }
          ціль предмет_юнікоду = МаМа::створити_предмет_юнікоду(М, значення_ю32);
          МаМа::звільнити_памʼять(М, значення_ю32.дані);
          МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, константи::адреса, предмет_юнікоду як адреса<МаМа::Предмет>);
          п += (розмір_юнікоду8 - 1);
        } інакше {
          ціль предмет_юнікоду = МаМа::створити_предмет_юнікоду(М, ю32 { 0, пусто });
          МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, константи::адреса, предмет_юнікоду як адреса<МаМа::Предмет>);
        }
      } інакше якщо вид_константи == мавка::перекладач::ВидКонстантиЮнікод32 {
        п += 1;
        ціль адреса_на_розмір_юнікоду32 = сирі_константи.дані[п]::адреса як адреса<позитивне>;
        ціль розмір_юнікоду32 = адреса_на_розмір_юнікоду32::вміст;
        п += 7;
        якщо розмір_юнікоду32 > 0 {
          п += 1;
          ціль предмет_юнікоду = МаМа::створити_предмет_юнікоду(М, ю32 { розмір_юнікоду32, сирі_константи.дані[п]::адреса як памʼять<п32> });
          МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, константи::адреса, предмет_юнікоду як адреса<МаМа::Предмет>);
          п += ((розмір_юнікоду32 * 4) - 1);
        } інакше {
          ціль предмет_юнікоду = МаМа::створити_предмет_юнікоду(М, ю32 { 0, пусто });
          МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, константи::адреса, предмет_юнікоду як адреса<МаМа::Предмет>);
        }
      } інакше якщо вид_константи == мавка::перекладач::ВидКонстантиКод {
        п += 1;
        ціль адреса_на_розмір_констант = сирі_константи.дані[п]::адреса як адреса<позитивне>;
        ціль розмір_констант = адреса_на_розмір_констант::вміст;
        п += 7;
        змінна ціль константи_дії = МаМа::Послідовність<п8> { 0, пусто };
        якщо розмір_констант > 0 {
          п += 1;
          константи_дії = МаМа::Послідовність<п8> { розмір_констант, сирі_константи.дані[п]::адреса як памʼять<п8> };
          п += (розмір_констант - 1);
        } інакше {
          // ...
        }
        п += 1;
        ціль адреса_на_розмір_вказівок = сирі_константи.дані[п]::адреса як адреса<позитивне>;
        ціль розмір_вказівок = адреса_на_розмір_вказівок::вміст;
        п += 7;
        змінна ціль вказівки_дії = МаМа::Послідовність<п8> { 0, пусто };
        якщо розмір_вказівок > 0 {
          п += 1;
          вказівки_дії = МаМа::Послідовність<п8> { розмір_вказівок, сирі_константи.дані[п]::адреса як памʼять<п8> };
          п += (розмір_вказівок - 1);
        } інакше {
          // ...
        }
        ціль предмет_коду = код_в_ПредметКоду(М, шлях, константи_дії, вказівки_дії);
        МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(М, константи::адреса, предмет_коду як адреса<МаМа::Предмет>);
      } інакше {
        // потім: помилка
      }
      п += 1;
    }
    змінна ціль вказівки: памʼять<п8> = пусто;
    якщо МаМа::виділити_копію_памʼяті(М, сирі_вказівки.розмір, сирі_вказівки.дані, вказівки::адреса) == ні {
      // потім: помилка
    }
    ціль байти = МаМа::створити_предмет_байтів_без_копіювання(М, сирі_вказівки.розмір, вказівки);
    вернути МаМа::створити_предмет_коду_1(М, шлях, МаМа::Послідовність<адреса<МаМа::Предмет>> { константи.розмір, константи.дані }, байти);
  }

  дія код_перекладача_в_ПредметКоду(М: адреса<МаМа::Машина>, шлях: адреса<МаМа::ПредметЮнікоду>, код_перекладача: адреса<мавка::перекладач::Код>): адреса<МаМа::ПредметКоду> {
    вернути код_в_ПредметКоду(М, шлях, МаМа::Послідовність<п8> { код_перекладача.накопичувач_констант.розмір, код_перекладача.накопичувач_констант.дані }, МаМа::Послідовність<п8> { код_перекладача.накопичувач_вказівок.розмір, код_перекладача.накопичувач_вказівок.дані });
  }

  дія отримати_шлях_взяття_до_модуля(М: адреса<МаМа::Машина>, назва_паку: адреса<МаМа::ПредметТексту>, кількість_назв_шляху: позитивне, назви_шляху: памʼять<адреса<МаМа::ПредметТексту>>): адреса<МаМа::ПредметЮнікоду> {
    ціль дані_машини = М.дані як адреса<ДаніМашини>;
    змінна ціль накопичувач_шляху = МаМа::зробити_накопичувач<п8>(М);
    МаМа::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, дані_машини.шлях_до_папки_виконання);
    якщо назва_паку != пусто {
      МаМа::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8"/паки/");
      МаМа::покласти_т8_в_накопичувач_ю8(М, накопичувач_шляху::адреса, назва_паку.значення);
    }
    змінна ціль п: позитивне = 0;
    поки п < кількість_назв_шляху {
      МаМа::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8"/");
      МаМа::покласти_т8_в_накопичувач_ю8(М, накопичувач_шляху::адреса, назви_шляху[п].значення);
      п += 1;
    }
    МаМа::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8".ю8.м");
    ціль предмет_шляху = МаМа::створити_предмет_юнікоду_з_ю8(М, ю8 { накопичувач_шляху.розмір, накопичувач_шляху.дані });
    МаМа::звільнити_накопичувач<п8>(М, накопичувач_шляху);
    вернути предмет_шляху;
  }

  дія машина_взяти_файл(М: адреса<МаМа::Машина>, назва_паку: адреса<МаМа::ПредметТексту>, назва_модуля: адреса<МаМа::ПредметТексту>, предмет_шляху: адреса<МаМа::ПредметЮнікоду>): МаМа::предмет_або_стан_падіння {
    змінна ціль взятий_предмет: адреса<МаМа::Предмет> = пусто;
    якщо МаМа::отримати_взятий_предмет(М, предмет_шляху як адреса<МаМа::Предмет>, взятий_предмет::адреса) {
      вернути взятий_предмет;
    }
    ціль шлях_ю8 = ю8 { 0, пусто };
    якщо МаМа::перекодувати_ю32_в_ю8(М, предмет_шляху.значення, шлях_ю8::адреса, ні) == ні {
      вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, МаМа::створити_предмет_тексту(М, "Не вдалось перекодувати шлях") як адреса<МаМа::Предмет>);
    }
    якщо мавка_система_перевірити_чи_шлях_існує_і_є_файлом(шлях_ю8) == ні {
      МаМа::звільнити_памʼять(М, шлях_ю8.дані);
      вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, МаМа::створити_предмет_тексту(М, "Файл модуля не знайдено") як адреса<МаМа::Предмет>);
    }
    якщо МаМа::перевірити_чи_ю8_закінчується_на(шлях_ю8, ю8".ю8.м") == ні {
      МаМа::звільнити_памʼять(М, шлях_ю8.дані);
      вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, МаМа::створити_предмет_тексту(М, "Шлях повинен закінчуватися на .ю8.м") як адреса<МаМа::Предмет>);
    }
    змінна ціль значення_файлу = ю8 { 0, пусто };
    якщо мавка_система_прочитати_файл(шлях_ю8, значення_файлу::адреса) == ні {
      МаМа::звільнити_памʼять(М, шлях_ю8.дані);
      вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, МаМа::створити_предмет_тексту(М, "Не вдалось прочитати файл") як адреса<МаМа::Предмет>);
    }
    МаМа::звільнити_памʼять(М, шлях_ю8.дані);

    ціль система_розбирача = мавка::розбирач::Система {
      дані = М,
      виділити_сиру_памʼять = система_розбирача_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_розбирача_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_розбирача_звільнити_сиру_памʼять,
    };
    ціль вихідний_потік_розбирача = мавка::розбирач::ВихіднийПотік {
      дані = М,
      дописати = розбирач_дописати_у_стандартний_вивід
    };

    змінна ціль слова = мавка::розбирач::Слова { 0, пусто };
    змінна ціль помилка_розбору_на_слова = мавка::розбирач::ПомилкаРозборуНаСлова { ... };
    якщо мавка::розбирач::розібрати_ю8_на_слова(система_розбирача::адреса, значення_файлу, слова::адреса, помилка_розбору_на_слова::адреса) == ні {
      МаМа::звільнити_памʼять(М, значення_файлу.дані);
      вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, МаМа::створити_предмет_тексту(М, "Не вдалось розібрати на слова") як адреса<МаМа::Предмет>);
    }
    змінна ціль гілки = мавка::розбирач::Гілки { 0, пусто };
    змінна ціль помилка_розбору_на_гілки = мавка::розбирач::ПомилкаРозборуНаГілки { ... };
    якщо мавка::розбирач::розібрати_слова_на_гілки(система_розбирача::адреса, значення_файлу, слова, гілки::адреса, помилка_розбору_на_гілки::адреса) == ні {
      мавка::розбирач::звільнити_слова(система_розбирача::адреса, слова);
      МаМа::звільнити_памʼять(М, значення_файлу.дані);
      вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, МаМа::створити_предмет_тексту(М, "Не вдалось розібрати на гілки") як адреса<МаМа::Предмет>);
    }

    ціль система_перекладача = мавка::перекладач::Система {
      дані = М,
      виділити_сиру_памʼять = система_перекладача_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_перекладача_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_перекладача_звільнити_сиру_памʼять,
    };
    ціль вихідний_потік_перекладача = мавка::перекладач::ВихіднийПотік {
      дані = М,
      дописати = перекладач_дописати_у_стандартний_вивід
    };
    ціль код_МаМа = мавка::перекладач::створити_код(система_перекладача::адреса);
    ціль контекст = мавка::перекладач::створити_контекст(система_перекладача::адреса, значення_файлу, слова);
    змінна ціль помилка_перекладу = мавка::перекладач::ПомилкаПерекладуВМаМа { ... };
    якщо мавка::перекладач::перекласти_в_МаМа(система_перекладача::адреса, контекст, гілки, ні, код_МаМа, помилка_перекладу::адреса) == ні {
      ціль предмет_помилки = МаМа::створити_предмет_тексту(М, помилка_перекладу.повідомлення);
      МаМа::звільнити_памʼять(М, помилка_перекладу.повідомлення.дані);
      мавка::розбирач::звільнити_слова(система_розбирача::адреса, слова);
      мавка::розбирач::звільнити_гілки(система_розбирача::адреса, гілки);
      мавка::перекладач::знищити_код(система_перекладача::адреса, код_МаМа);
      мавка::перекладач::знищити_контекст(система_перекладача::адреса, контекст);
      МаМа::звільнити_памʼять(М, значення_файлу.дані);
      вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, предмет_помилки як адреса<МаМа::Предмет>);
    }
  //  мавка::перекладач::вивести_КодМаМа(система_перекладача::адреса, вихідний_потік_перекладача::адреса, код_МаМа);

    ціль предмет_коду = код_перекладача_в_ПредметКоду(М, предмет_шляху, код_МаМа);
    ціль притримувач = МаМа::покласти_притримувач(М);
    МаМа::притримати(М, притримувач, предмет_коду як адреса<МаМа::Предмет>);

    ціль предмет_модуля = МаМа::створити_предмет_модуля(М, МаМа::назва(М, назва_модуля.значення));
    предмет_модуля.назва_паку = назва_паку;
    МаМа::покласти_взятий_предмет(М, предмет_шляху як адреса<МаМа::Предмет>, предмет_модуля як адреса<МаМа::Предмет>);
    ціль предмет_середовища = МаМа::створити_предмет_середовища(М, М.предмет_глобального_середовища, предмет_модуля, предмет_модуля як адреса<МаМа::Предмет>);
    МаМа::притримати(М, притримувач, предмет_середовища як адреса<МаМа::Предмет>);
    ціль результат = МаМа::виконати_код(М, предмет_коду, предмет_середовища);

    МаМа::забрати_притримувач(М);
    мавка::розбирач::звільнити_слова(система_розбирача::адреса, слова);
    мавка::розбирач::звільнити_гілки(система_розбирача::адреса, гілки);
    мавка::перекладач::знищити_код(система_перекладача::адреса, код_МаМа);
    мавка::перекладач::знищити_контекст(система_перекладача::адреса, контекст);
    МаМа::звільнити_памʼять(М, значення_файлу.дані);

    ціль обчислювач = М;

    якщо перевірити_чи_стан_падіння(обчислювач) {
      вернути результат;
    }

    вернути предмет_модуля як адреса<МаМа::Предмет>;
  }

  дія машина_обробник_взяття(М: адреса<МаМа::Машина>, назва_паку: адреса<МаМа::ПредметТексту>, назва_репозиторія: адреса<МаМа::ПредметТексту>, кількість_назв_шляху: позитивне, назви_шляху: памʼять<адреса<МаМа::ПредметТексту>>): МаМа::предмет_або_стан_падіння {
    якщо МаМа::перевірити_чи_предмети_назви_рівні(М, назва_репозиторія, МаМа::назва(М, "модуль")) {
      ціль предмет_шляху = отримати_шлях_взяття_до_модуля(М, назва_паку, кількість_назв_шляху, назви_шляху);
      вернути машина_взяти_файл(М, назва_паку, назви_шляху[кількість_назв_шляху - 1], предмет_шляху);
    }
    якщо МаМа::перевірити_чи_предмети_назви_рівні(М, назва_репозиторія, МаМа::назва(М, "пак")) {
      ціль предмет_шляху = отримати_шлях_взяття_до_модуля(М, назви_шляху[0], кількість_назв_шляху, назви_шляху);
      вернути машина_взяти_файл(М, назви_шляху[0], назви_шляху[кількість_назв_шляху - 1], предмет_шляху);
    }
    якщо МаМа::перевірити_чи_предмети_назви_рівні(М, назва_репозиторія, МаМа::назва(М, "біб")) {
      ціль обчислювач = М;
      ціль дані_машини = М.дані як адреса<ДаніМашини>;
      ціль результат = дані_машини.обробник_взяття_біб(обчислювач, кількість_назв_шляху, назви_шляху як памʼять<адреса<Предмет>>);
      вернути результат як адреса<МаМа::Предмет>;
    }
    вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, МаМа::створити_предмет_тексту(М, "Неможливо взяти") як адреса<МаМа::Предмет>);
  }

  зовнішня дія створити_обчислювач(): адреса<Обчислювач> {
    ціль М = мавка_система_виділити_сиру_памʼять(МаМа::Машина.розмір) як адреса<МаМа::Машина>;

    МаМа::налаштувати_машину(М, МаМа::Система {
      виділити_сиру_памʼять = машина_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = машина_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = машина_звільнити_сиру_памʼять,
      померти = машина_померти
    });
    М.обробник_взяття = машина_обробник_взяття;

    ціль дані_машини = МаМа::виділити<ДаніМашини>(М);
    дані_машини.шлях_до_папки_виконання = ю8 { 0, пусто };
    дані_машини.обробник_взяття_біб = пусто;
    мавка_система_отримати_поточну_папку_процесу(дані_машини.шлях_до_папки_виконання::адреса);
    М.дані = дані_машини;

    вернути М;
  }

  зовнішня дія знищити_обчислювач(обчислювач: адреса<Обчислювач>) {
    ціль дані_машини = обчислювач.дані як адреса<ДаніМашини>;
    МаМа::звільнити_памʼять(обчислювач, дані_машини.шлях_до_папки_виконання.дані);
    МаМа::звільнити(обчислювач, дані_машини);
    МаМа::очистити(обчислювач);
    МаМа::розлаштувати_машину(обчислювач);
    мавка_система_звільнити_сиру_памʼять(обчислювач як памʼять<п8>);
  }

  зовнішня дія взяти_файл_шлях_ю8(обчислювач: адреса<Обчислювач>, шлях: ю8): предмет_або_стан_падіння {
    ціль М = обчислювач;
    змінна ціль шлях_до_файлу = ю8 { 0, пусто };
    мавка_система_отримати_абсолютний_шлях(шлях, шлях_до_файлу::адреса);
    змінна ціль назва_файлу_без_розширення = ю8 { 0, пусто };
    мавка_система_отримати_назву_файлу_без_розширення(шлях_до_файлу, назва_файлу_без_розширення::адреса);
    змінна ціль назва_файлу_без_розширення_т8 = т8 { 0, пусто };
    якщо МаМа::перекодувати_ю8_в_т8(М, назва_файлу_без_розширення, назва_файлу_без_розширення_т8::адреса, ні) == ні {
      МаМа::ПОМЕРТИ(М, "Не вдалось отримати назву файлу без розширення");
    }
    МаМа::звільнити_памʼять(М, назва_файлу_без_розширення.дані);
    ціль назва_модуля = МаМа::назва(М, назва_файлу_без_розширення_т8);
    МаМа::звільнити_памʼять(М, назва_файлу_без_розширення_т8.дані);
    ціль результат = машина_взяти_файл(М, пусто, назва_модуля, МаМа::створити_предмет_юнікоду_з_ю8(М, шлях_до_файлу));
    МаМа::звільнити_памʼять(М, шлях_до_файлу.дані);
    вернути результат;
  }

  дія виконати_ю8(М: адреса<МаМа::Машина>, середовище: адреса<МаМа::ПредметСередовища>, значення_файлу: ю8): МаМа::предмет_або_стан_падіння {
    ціль система_розбирача = мавка::розбирач::Система {
      дані = М,
      виділити_сиру_памʼять = система_розбирача_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_розбирача_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_розбирача_звільнити_сиру_памʼять,
    };
    ціль вихідний_потік_розбирача = мавка::розбирач::ВихіднийПотік {
      дані = М,
      дописати = розбирач_дописати_у_стандартний_вивід
    };

    змінна ціль слова = мавка::розбирач::Слова { 0, пусто };
    змінна ціль помилка_розбору_на_слова = мавка::розбирач::ПомилкаРозборуНаСлова { ... };
    якщо мавка::розбирач::розібрати_ю8_на_слова(система_розбирача::адреса, значення_файлу, слова::адреса, помилка_розбору_на_слова::адреса) == ні {
      вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, МаМа::створити_предмет_тексту(М, "Не вдалось розібрати на слова") як адреса<МаМа::Предмет>);
    }
    змінна ціль гілки = мавка::розбирач::Гілки { 0, пусто };
    змінна ціль помилка_розбору_на_гілки = мавка::розбирач::ПомилкаРозборуНаГілки { ... };
    якщо мавка::розбирач::розібрати_слова_на_гілки(система_розбирача::адреса, значення_файлу, слова, гілки::адреса, помилка_розбору_на_гілки::адреса) == ні {
      мавка::розбирач::звільнити_слова(система_розбирача::адреса, слова);
      вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, МаМа::створити_предмет_тексту(М, "Не вдалось розібрати на гілки") як адреса<МаМа::Предмет>);
    }

    ціль система_перекладача = мавка::перекладач::Система {
      дані = М,
      виділити_сиру_памʼять = система_перекладача_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_перекладача_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_перекладача_звільнити_сиру_памʼять,
    };
    ціль вихідний_потік_перекладача = мавка::перекладач::ВихіднийПотік {
      дані = М,
      дописати = перекладач_дописати_у_стандартний_вивід
    };

    ціль код_МаМа = мавка::перекладач::створити_код(система_перекладача::адреса);
    ціль контекст = мавка::перекладач::створити_контекст(система_перекладача::адреса, значення_файлу, слова);
    змінна ціль помилка_перекладу = мавка::перекладач::ПомилкаПерекладуВМаМа { ... };
    якщо мавка::перекладач::перекласти_в_МаМа(система_перекладача::адреса, контекст, гілки, так, код_МаМа, помилка_перекладу::адреса) == ні {
      ціль предмет_помилки = МаМа::створити_предмет_тексту(М, помилка_перекладу.повідомлення);
      МаМа::звільнити_памʼять(М, помилка_перекладу.повідомлення.дані);
      мавка::розбирач::звільнити_слова(система_розбирача::адреса, слова);
      мавка::розбирач::звільнити_гілки(система_розбирача::адреса, гілки);
      мавка::перекладач::знищити_код(система_перекладача::адреса, код_МаМа);
      мавка::перекладач::знищити_контекст(система_перекладача::адреса, контекст);
      вернути МаМа::результат_стан_падіння(М, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 }, предмет_помилки як адреса<МаМа::Предмет>);
    }

    ціль предмет_коду = код_перекладача_в_ПредметКоду(М, пусто, код_МаМа);
    ціль притримувач = МаМа::покласти_притримувач(М);
    МаМа::притримати(М, притримувач, предмет_коду як адреса<МаМа::Предмет>);

    МаМа::притримати(М, притримувач, середовище як адреса<МаМа::Предмет>);
    ціль результат = МаМа::виконати_код(М, предмет_коду, середовище);

    МаМа::забрати_притримувач(М);
    мавка::розбирач::звільнити_слова(система_розбирача::адреса, слова);
    мавка::розбирач::звільнити_гілки(система_розбирача::адреса, гілки);
    мавка::перекладач::знищити_код(система_перекладача::адреса, код_МаМа);
    мавка::перекладач::знищити_контекст(система_перекладача::адреса, контекст);

    вернути результат;
  }

  дія діалог_виконати(обчислювач: адреса<Обчислювач>, середовище: адреса<МаМа::ПредметСередовища>, значення: ю8) {
    ціль М = обчислювач;
    ціль стан = МаМа::зберегти_стан_розмірів_машини(М);
    ціль результат = виконати_ю8(М, середовище, значення);
    якщо перевірити_чи_стан_падіння(обчислювач) {
      ціль інформація_падіння = отримати_інформацію_падіння(обчислювач);
      надрукувати_падіння(обчислювач, інформація_падіння, результат);
      знищити_інформацію_падіння(обчислювач, інформація_падіння);
      МаМа::відновити_стан_розмірів_машини(М, стан);
      М.стан_падіння = позитивне(ні);
    } інакше {
      вивести_предмет(М, результат, 1);
      вивести_ю8(обчислювач, ю8"\n");
    }
  }

  зовнішня дія почати_діалог(обчислювач: адреса<Обчислювач>) {
    ціль М = обчислювач;
    вивести_ю8(обчислювач, ю8"Діалог Мавки ");
    вивести_позитивне(обчислювач, 0);
    вивести_ю8(обчислювач, ю8".");
    вивести_позитивне(обчислювач, 120);
    вивести_ю8(обчислювач, ю8".");
    вивести_позитивне(обчислювач, 0);
    вивести_ю8(обчислювач, ю8"\n");
    ціль предмет_середовища = МаМа::створити_предмет_середовища(М, М.предмет_глобального_середовища, пусто, пусто);
    змінна ціль значення = ю8 { 0, пусто };
    поки мавка_система_прочитати_ю8_зі_стандартного_вводу(ю8"- ", значення::адреса) {
      якщо значення.розмір > 0 {
        діалог_виконати(обчислювач, предмет_середовища, значення);
      }
      МаМа::звільнити_памʼять(М, значення.дані);
    }
  }

  зовнішня дія обробити_чергу_запланованих_виконань(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    вернути МаМа::обробити_чергу_запланованих_виконань(М) як адреса<Предмет>;
  }

  зовнішня дія запланувати_виконання(обчислювач: адреса<Обчислювач>, обробник: ОбробникЗаплановаогоВиконання, дані: невідома_адреса, відклик_перед_знищенням: ВідкликПередЗнищеннямЗапланованогоВиконання, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>): логічне {
    ціль М = обчислювач;
    вернути МаМа::покласти_в_чергу_запланованих_виконань(М, обробник як невідома_адреса як МаМа::ОбробникЗапланованогоВиконання, дані, відклик_перед_знищенням як невідома_адреса як МаМа::ВідкликПередЗнищеннямЗапланованогоВиконання, кількість_аргументів, аргументи як памʼять<адреса<МаМа::Предмет>>);
  }

  зовнішня дія встановити_обробник_взяття_біб(обчислювач: адреса<Обчислювач>, обробник_взяття_біб: ОбробникВзяттяБіб) {
    ціль М = обчислювач;
    ціль дані_машини = М.дані як адреса<ДаніМашини>;
    дані_машини.обробник_взяття_біб = обробник_взяття_біб;
  }

  зовнішня дія створити_притримувач(обчислювач: адреса<Обчислювач>): адреса<ПритримувачПредметів> {
    ціль М = обчислювач;
    вернути МаМа::створити_притримувач(М) як адреса<ПритримувачПредметів>;
  }

  зовнішня дія знищити_притримувач(обчислювач: адреса<Обчислювач>, притримувач: адреса<ПритримувачПредметів>) {
    ціль М = обчислювач;
    МаМа::знищити_притримувач(М, притримувач як адреса<МаМа::Накопичувач<адреса<МаМа::Предмет>>>);
  }

  зовнішня дія покласти_притримувач(обчислювач: адреса<Обчислювач>): адреса<ПритримувачПредметів> {
    ціль М = обчислювач;
    вернути МаМа::покласти_притримувач(М) як адреса<ПритримувачПредметів>;
  }

  зовнішня дія притримати(обчислювач: адреса<Обчислювач>, притримувач: адреса<ПритримувачПредметів>, предмет: адреса<Предмет>) {
    ціль М = обчислювач;
    МаМа::притримати(М, притримувач як адреса<МаМа::Накопичувач<адреса<МаМа::Предмет>>>, предмет як адреса<МаМа::Предмет>);
  }

  зовнішня дія відпустити(обчислювач: адреса<Обчислювач>, притримувач: адреса<ПритримувачПредметів>) {
    ціль М = обчислювач;
    МаМа::відпустити(М, притримувач як адреса<МаМа::Накопичувач<адреса<МаМа::Предмет>>>);
  }

  зовнішня дія забрати_притримувач(обчислювач: адреса<Обчислювач>) {
    ціль М = обчислювач;
    МаМа::забрати_притримувач(М);
  }
}

секція мавка {
  зовнішня дія отримати_інформацію_падіння(обчислювач: адреса<Обчислювач>): адреса<ІнформаціяПадіння> {
    ціль М = обчислювач;
    якщо перевірити_чи_стан_падіння(обчислювач) {
      ціль інформація_падіння = МаМа::виділити<ІнформаціяПадіння>(М);
      інформація_падіння.місцезнаходження = Місцезнаходження {
        шлях = М.місцезнаходження_падіння.шлях як адреса<МаМа::ПредметТексту> як адреса<Предмет>,
        рядок = М.місцезнаходження_падіння.рядок,
      };
      змінна ціль накопичувач_історії = МаМа::зробити_накопичувач<ЕлементІсторіїВиконання>(М);
      змінна ціль п: позитивне = 0;
      поки п < М.історія.розмір {
        ціль елемент_історії = М.історія.дані[п];
        змінна ціль елемент_історії_виконання = ЕлементІсторіїВиконання { ... };
        якщо елемент_історії.предмет_дії != пусто {
          якщо елемент_історії.предмет_дії.назва != пусто {
            якщо елемент_історії.місцезнаходження.шлях як адреса<МаМа::ПредметТексту> != пусто {
              якщо МаМа::виділити_копію_т8(М, елемент_історії.предмет_дії.назва.значення, елемент_історії_виконання.назва::адреса) == ні {
                // потім_помилка
              }
              елемент_історії_виконання.місцезнаходження = Місцезнаходження {
                шлях = елемент_історії.місцезнаходження.шлях як адреса<МаМа::ПредметТексту> як адреса<Предмет>,
                рядок = елемент_історії.місцезнаходження.рядок
              };
              МаМа::покласти_в_накопичувач<ЕлементІсторіїВиконання>(М, накопичувач_історії::адреса, елемент_історії_виконання);
            }
          }
        }
        п += 1;
      }
      інформація_падіння.розмір_історії = накопичувач_історії.розмір;
      інформація_падіння.історія = накопичувач_історії.дані;
      вернути інформація_падіння;
    }
    вернути пусто;
  }

  зовнішня дія знищити_інформацію_падіння(обчислювач: адреса<Обчислювач>, інформація_падіння: адреса<ІнформаціяПадіння>) {
    ціль М = обчислювач;
    змінна ціль п: позитивне = 0;
    поки п < інформація_падіння.розмір_історії {
      МаМа::звільнити_памʼять(М, інформація_падіння.історія[п].назва.дані);
      п += 1;
    }
    МаМа::звільнити_памʼять(М, інформація_падіння.історія);
    МаМа::звільнити(М, інформація_падіння);
  }

  зовнішня дія увімкнути_стан_падіння(обчислювач: адреса<Обчислювач>, місцезнаходження: Місцезнаходження) {
    ціль М = обчислювач;
    М.стан_падіння = позитивне(так);
    М.місцезнаходження_падіння = МаМа::Місцезнаходження {
      шлях = місцезнаходження.шлях як адреса<МаМа::ПредметТексту>,
      рядок = місцезнаходження.рядок
    };
  }

  зовнішня дія вимкнути_стан_падіння(обчислювач: адреса<Обчислювач>, спроба: адреса<Спроба>) {
    ціль М = обчислювач;
    М.стан_падіння = позитивне(ні);
    М.місцезнаходження_падіння = МаМа::Місцезнаходження {
      шлях = пусто як адреса<МаМа::ПредметТексту>,
      рядок = 0
    };
  }
}

секція мавка {
  зовнішня дія змінити_в_глобальному_середовищі(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, значення: адреса<Предмет>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    МаМа::змінити_в_середовищі(М, М.предмет_глобального_середовища, назва як адреса<МаМа::ПредметТексту>, значення як адреса<МаМа::Предмет>);
    вернути пусто;
  }

  зовнішня дія надрукувати_падіння(обчислювач: адреса<Обчислювач>, інформація_падіння: адреса<ІнформаціяПадіння>, предмет_помилки: адреса<Предмет>) {
    вивести_ю8(обчислювач, ю8"Падіння");
    якщо інформація_падіння.місцезнаходження.шлях == пусто {
      вивести_ю8(обчислювач, ю8": ");
    } інакше {
      вивести_ю8(обчислювач, ю8" в ");
      вивести_предмет(обчислювач, інформація_падіння.місцезнаходження.шлях, 0);
      вивести_ю8(обчислювач, ю8":");
      вивести_позитивне(обчислювач, інформація_падіння.місцезнаходження.рядок);
      вивести_ю8(обчислювач, ю8": ");
    }
    вивести_предмет(обчислювач, предмет_помилки, 0);
    вивести_ю8(обчислювач, ю8"\n");
    змінна ціль виведено_перший_елемент_історії = ні;
    змінна ціль п: позитивне = 0;
    поки п < інформація_падіння.розмір_історії {
      ціль елемент_історії = інформація_падіння.історія[п];
      якщо виведено_перший_елемент_історії == ні {
        вивести_ю8(обчислювач, ю8"\nІсторія виконання:\n");
        виведено_перший_елемент_історії = так;
      }
      вивести_ю8(обчислювач, ю8"  ");
      вивести_т8(обчислювач, елемент_історії.назва);
      вивести_ю8(обчислювач, ю8" в ");
      вивести_предмет(обчислювач, елемент_історії.місцезнаходження.шлях, 0);
      вивести_ю8(обчислювач, ю8":");
      вивести_позитивне(обчислювач, елемент_історії.місцезнаходження.рядок);
      вивести_ю8(обчислювач, ю8"\n");
      п += 1;
    }
  }

  зовнішня дія знайти_іменований_аргумент(обчислювач: адреса<Обчислювач>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Предмет>, вихід: адреса<адреса<Предмет>>): логічне {
    вернути ні;
  }

  зовнішня дія назва(обчислювач: адреса<Обчислювач>, значення: т8): адреса<Предмет> {
    ціль М = обчислювач;
    вернути МаМа::назва(М, значення) як адреса<Предмет>;
  }

  зовнішня дія створити_структуру(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, предок: адреса<Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<Предмет>>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    увімкнути_стан_падіння(обчислювач, Місцезнаходження { пусто, 0 });
    вернути пусто;
  }

  структура ДаніРідноїДіїМавки {
    рідна_дія: РіднаДія;
    дані: невідома_адреса;
    зробити_копію_даних: ЗробитиКопіюДанихПредметаДії;
    відклик_перед_звільненням: ВідкликПередЗвільненнямПредметаДії;
  }

  дія рідна_дія_мавки(М: адреса<МаМа::Машина>, предмет_дії: адреса<МаМа::ПредметДії>, предмет_я: адреса<МаМа::Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<МаМа::Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<МаМа::ІменованийАргумент>, місцезнаходження: МаМа::Місцезнаходження): МаМа::предмет_або_стан_падіння {
    ціль дані_рідної_дії_мавки = предмет_дії.дані як адреса<ДаніРідноїДіїМавки>;
    ціль обчислювач = М;
    ціль результат = дані_рідної_дії_мавки.рідна_дія(обчислювач, предмет_дії як адреса<Предмет>, предмет_я як адреса<Предмет>, кількість_аргументів, аргументи як памʼять<адреса<Предмет>>, пусто, Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту> як адреса<Предмет>, місцезнаходження.рядок });
    вернути результат;
  }

  дія зробити_копію_даних_рідної_дії_мавки(М: адреса<МаМа::Машина>, предмет_дії: адреса<МаМа::ПредметДії>): невідома_адреса {
    ціль обчислювач = М;
    ціль дані_рідної_дії_мавки = предмет_дії.дані як адреса<ДаніРідноїДіїМавки>;
    ціль копія_даних_рідної_дії_мавки = МаМа::виділити<ДаніРідноїДіїМавки>(М);
    копія_даних_рідної_дії_мавки.рідна_дія = дані_рідної_дії_мавки.рідна_дія;
    якщо дані_рідної_дії_мавки.зробити_копію_даних == пусто {
      копія_даних_рідної_дії_мавки.дані = дані_рідної_дії_мавки.дані;
    } інакше {
      копія_даних_рідної_дії_мавки.дані = дані_рідної_дії_мавки.зробити_копію_даних(обчислювач, предмет_дії як адреса<Предмет>);
    }
    копія_даних_рідної_дії_мавки.зробити_копію_даних = дані_рідної_дії_мавки.зробити_копію_даних;
    копія_даних_рідної_дії_мавки.відклик_перед_звільненням = дані_рідної_дії_мавки.відклик_перед_звільненням;
    вернути копія_даних_рідної_дії_мавки;
  }

  дія відклик_перед_звільненням_рідної_дії_мавки(М: адреса<МаМа::Машина>, предмет_дії: адреса<МаМа::ПредметДії>) {
    ціль обчислювач = М;
    ціль дані_рідної_дії_мавки = предмет_дії.дані як адреса<ДаніРідноїДіїМавки>;
    якщо дані_рідної_дії_мавки.відклик_перед_звільненням != пусто {
      дані_рідної_дії_мавки.відклик_перед_звільненням(обчислювач, предмет_дії як адреса<Предмет>);
    }
    МаМа::звільнити(М, дані_рідної_дії_мавки);
  }

  зовнішня дія створити_рідну_дію(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<Предмет>>, тип_результату: адреса<Предмет>, рідна_дія: РіднаДія): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль дані_рідної_дії_мавки = МаМа::виділити<ДаніРідноїДіїМавки>(М);
    дані_рідної_дії_мавки.рідна_дія = рідна_дія;
    дані_рідної_дії_мавки.дані = пусто;
    дані_рідної_дії_мавки.зробити_копію_даних = пусто;
    дані_рідної_дії_мавки.відклик_перед_звільненням = пусто;
    ціль предмет_дії = МаМа::створити_предмет_рідної_дії(
      М,
      назва як адреса<МаМа::ПредметТексту>,
      МаМа::Послідовність<адреса<МаМа::ПредметПараметра>> { кількість_параметрів, параметри як памʼять<адреса<МаМа::ПредметПараметра>> },
      тип_результату як адреса<МаМа::ПредметТипу>,
      рідна_дія_мавки,
      дані_рідної_дії_мавки,
      зробити_копію_даних_рідної_дії_мавки,
      відклик_перед_звільненням_рідної_дії_мавки
    );
    вернути предмет_дії як адреса<Предмет>;
  }

  зовнішня дія створити_число(обчислювач: адреса<Обчислювач>, значення: д64): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_числа = МаМа::створити_предмет_числа(М, значення);
    вернути предмет_числа як адреса<Предмет>;
  }

  зовнішня дія створити_текст(обчислювач: адреса<Обчислювач>, значення: т8): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_тексту = МаМа::створити_предмет_тексту(М, значення);
    вернути предмет_тексту як адреса<Предмет>;
  }

  зовнішня дія створити_текст_без_копіювання(обчислювач: адреса<Обчислювач>, значення: т8): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_тексту = МаМа::створити_предмет_тексту_без_копіювання(М, значення);
    вернути предмет_тексту як адреса<Предмет>;
  }

  зовнішня дія створити_юнікод(обчислювач: адреса<Обчислювач>, значення: ю32): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_юнікоду = МаМа::створити_предмет_юнікоду(М, значення);
    вернути предмет_юнікоду як адреса<Предмет>;
  }

  зовнішня дія створити_юнікод_без_копіювання(обчислювач: адреса<Обчислювач>, значення: ю32): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_юнікоду = МаМа::створити_предмет_юнікоду_без_копіювання(М, значення);
    вернути предмет_юнікоду як адреса<Предмет>;
  }

  зовнішня дія створити_юнікод_з_ю8(обчислювач: адреса<Обчислювач>, значення: ю8): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_юнікоду = МаМа::створити_предмет_юнікоду_з_ю8(М, значення);
    вернути предмет_юнікоду як адреса<Предмет>;
  }

  зовнішня дія створити_список(обчислювач: адреса<Обчислювач>, кількість_елементів: позитивне, елементи: памʼять<адреса<Предмет>>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    увімкнути_стан_падіння(М, Місцезнаходження { пусто, 0 });
    вернути пусто;
  }

  зовнішня дія створити_словник(обчислювач: адреса<Обчислювач>, кількість_елементів: позитивне, елементи: памʼять<ЕлементСловника>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    увімкнути_стан_падіння(М, Місцезнаходження { пусто, 0 });
    вернути пусто;
  }

  зовнішня дія створити_байти(обчислювач: адреса<Обчислювач>, розмір: позитивне, дані: памʼять<п8>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_байтів = МаМа::створити_предмет_байтів(М, розмір, дані);
    вернути предмет_байтів як адреса<Предмет>;
  }

  зовнішня дія створити_байти_без_копіювання(обчислювач: адреса<Обчислювач>, розмір: позитивне, дані: памʼять<п8>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_байтів = МаМа::створити_предмет_байтів_без_копіювання(М, розмір, дані);
    вернути предмет_байтів як адреса<Предмет>;
  }

  зовнішня дія створити_модуль(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, кількість_елементів: позитивне, елементи: памʼять<ЕлементМодуля>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_модуля = МаМа::створити_предмет_модуля(М, назва як адреса<МаМа::ПредметТексту>);
    змінна ціль п: позитивне = 0;
    поки п < кількість_елементів {
      ціль елемент = елементи[п];
      ціль результат = МаМа::предмет_модуля_змінити_властивість(М, предмет_модуля, елемент.назва як адреса<МаМа::ПредметТексту>, елемент.значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { пусто як адреса<МаМа::ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути результат як адреса<Предмет>;
      }
      п += 1;
    }
    вернути предмет_модуля як адреса<Предмет>;
  }

  зовнішня дія створити_ресурс(обчислювач: адреса<Обчислювач>, значення: невідома_адреса, відклик_перед_знищенням: ВідкликПередЗнищеннямРесурсу): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_ресурсу = МаМа::створити_предмет_ресурсу(М, значення, відклик_перед_знищенням як невідома_адреса як МаМа::ВідкликПередЗнищеннямПредметаРесурсу);
    вернути предмет_ресурсу як адреса<Предмет>;
  }

  зовнішня дія створити_тип(обчислювач: адреса<Обчислювач>, може_бути_пусто: логічне, кількість_допустимих_структур: позитивне, допустимі_структури: памʼять<адреса<Предмет>>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_типу = МаМа::створити_предмет_типу(М, може_бути_пусто, МаМа::Послідовність<адреса<МаМа::ПредметСтруктури>> { кількість_допустимих_структур, допустимі_структури як памʼять<адреса<МаМа::ПредметСтруктури>> });
    вернути предмет_типу як адреса<Предмет>;
  }

  зовнішня дія створити_параметр(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, тип: адреса<Предмет>, код: адреса<Предмет>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_параметра = МаМа::створити_предмет_параметра(М, назва як адреса<МаМа::ПредметТексту>, тип як адреса<МаМа::ПредметТипу>, код як адреса<МаМа::ПредметКоду>);
    вернути предмет_параметра як адреса<Предмет>;
  }

  зовнішня дія створити_розширення(обчислювач: адреса<Обчислювач>, Р: невідома_адреса, значення: адреса<Предмет>, відклик_перед_знищенням: (обчислювач: адреса<Обчислювач>, предмет_розширення: адреса<Предмет>) -> ніщо, притримувач: адреса<ПритримувачПредметів>): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль предмет_розширення = МаМа::створити_предмет_розширення(М, Р, значення як адреса<МаМа::Предмет>, відклик_перед_знищенням як невідома_адреса як (М: адреса<МаМа::Машина>, предмет_розширення: адреса<МаМа::ПредметРозширення>) -> ніщо, притримувач як адреса<МаМа::Накопичувач<адреса<МаМа::Предмет>>>);
    вернути предмет_розширення як адреса<Предмет>;
  }

  зовнішня дія отримати_Р_з_розширення(обчислювач: адреса<Обчислювач>, предмет_розширення: адреса<Предмет>): невідома_адреса {
    ціль М = обчислювач;
    ціль предмет_розширення_МаМа = предмет_розширення як адреса<МаМа::ПредметРозширення>;
    вернути предмет_розширення_МаМа.Р;
  }
}

секція мавка {
  зовнішня дія предмет_змінити_властивість(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, назва: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_змінити_властивість(М, предмет як адреса<МаМа::Предмет>, назва як адреса<МаМа::ПредметТексту>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_додати(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_додати(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_відняти(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_відняти(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_помножити(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_помножити(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_поділити(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_поділити(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_остача(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_остача(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_неповна_частка(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_неповна_частка(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_степінь(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_степінь(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_зсунути_вліво(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_зсунути_вліво(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_зсунути_вправо(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_зсунути_вправо(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_зсунути_вправо_2(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_зсунути_вправо_2(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_двійкове_і(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_двійкове_і(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_двійкове_або(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_двійкове_або(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_двійкове_виключне_або(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_двійкове_виключне_або(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_двійкове_заперечення(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_двійкове_заперечення(М, предмет як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_менше(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_менше(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_більше(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_більше(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_містить(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_містить(М, предмет як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_числова_негація(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_числова_негація(М, предмет як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_отримати_число(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_отримати_число(М, предмет як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_отримати_текст(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_отримати_текст(М, предмет як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_отримати_юнікод(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_отримати_юнікод(М, предмет як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_отримати_перебір(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_отримати_перебір(М, предмет як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія предмет_отримати_діапазон(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    ціль М = обчислювач;
    ціль результат = МаМа::предмет_отримати_діапазон(М, предмет як адреса<МаМа::Предмет>, включно, до як адреса<МаМа::Предмет>, МаМа::Місцезнаходження { місцезнаходження.шлях як адреса<МаМа::ПредметТексту>, місцезнаходження.рядок });
    вернути результат;
  }

  зовнішня дія виділити_копію_т8(обчислювач: адреса<Обчислювач>, значення: т8, вихід: адреса<т8>): логічне {
    ціль М = обчислювач;
    вернути МаМа::виділити_копію_т8(М, значення, вихід);
  }

  зовнішня дія виділити_копію_ю32(обчислювач: адреса<Обчислювач>, значення: ю32, вихід: адреса<ю32>): логічне {
    ціль М = обчислювач;
    вернути МаМа::виділити_копію_ю32(М, значення, вихід);
  }

  зовнішня дія перекодувати_ю32_в_ю8(обчислювач: адреса<Обчислювач>, значення: ю32, вихід: адреса<ю8>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перекодувати_ю32_в_ю8(М, значення, вихід, ні);
  }

  зовнішня дія перевірити_чи_предмет_є(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, предмет_структури: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    ціль предмет_структури_як_ПредметСтруктуриМаМа = предмет_структури як адреса<МаМа::ПредметСтруктури>;
    якщо предмет_структури_як_ПредметСтруктуриМаМа.тип != М.предмет_структури_Структура {
      вернути ні;
    }
    вернути МаМа::перевірити_чи_предмет_є(обчислювач, предмет, предмет_структури_як_ПредметСтруктуриМаМа);
  }

  зовнішня дія перевірити_чи_предмет_є_дією(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_Дія);
  }

  зовнішня дія перевірити_чи_предмет_є_числом(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_число);
  }

  зовнішня дія перевірити_чи_предмет_є_текстом(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_текст);
  }

  зовнішня дія перевірити_чи_предмет_є_юнікодом(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_юнікод);
  }

  зовнішня дія перевірити_чи_предмет_є_списком(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_список);
  }

  зовнішня дія перевірити_чи_предмет_є_словником(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_словник);
  }

  зовнішня дія перевірити_чи_предмет_є_байтами(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_байти);
  }

  зовнішня дія перевірити_чи_предмет_є_модулем(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_Модуль);
  }

  зовнішня дія перевірити_чи_предмет_є_ресурсом(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_ресурс);
  }

  зовнішня дія перевірити_чи_предмет_є_типом(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_Тип);
  }

  зовнішня дія перевірити_чи_предмет_є_параметром(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_є(М, предмет як адреса<МаМа::Предмет>, М.предмет_структури_Параметр);
  }

  зовнішня дія отримати_значення_числа(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): д64 {
    ціль предмет_числа = предмет як адреса<МаМа::ПредметЧисла>;
    вернути предмет_числа.значення;
  }

  зовнішня дія отримати_значення_тексту(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): т8 {
    ціль предмет_тексту = предмет як адреса<МаМа::ПредметТексту>;
    вернути предмет_тексту.значення;
  }

  зовнішня дія отримати_копію_значення_тексту(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<т8>): логічне {
    ціль предмет_тексту = предмет як адреса<МаМа::ПредметТексту>;
    вернути виділити_копію_т8(обчислювач, предмет_тексту.значення, вихід);
  }

  зовнішня дія отримати_значення_юнікоду(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): ю32 {
    ціль предмет_юнікоду = предмет як адреса<МаМа::ПредметЮнікоду>;
    вернути предмет_юнікоду.значення;
  }

  зовнішня дія отримати_копію_значення_юнікоду(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<ю32>): логічне {
    ціль предмет_юнікоду = предмет як адреса<МаМа::ПредметЮнікоду>;
    вернути виділити_копію_ю32(обчислювач, предмет_юнікоду.значення, вихід);
  }

  зовнішня дія отримати_копію_значення_юнікоду_як_ю8(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<ю8>): логічне {
    ціль предмет_юнікоду = предмет як адреса<МаМа::ПредметЮнікоду>;
    вернути перекодувати_ю32_в_ю8(обчислювач, предмет_юнікоду.значення, вихід);
  }

  зовнішня дія отримати_копію_елементів_списку(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<ЕлементиСписку>): логічне {
    ціль предмет_списку = предмет як адреса<МаМа::ПредметСписку>;
    змінна ціль елементи = виділити_памʼять<адреса<Предмет>>(обчислювач, предмет_списку.елементи.розмір);
    змінна ціль п: позитивне = 0;
    поки п < предмет_списку.елементи.розмір {
      елементи[п] = предмет_списку.елементи.дані[п] як адреса<Предмет>;
      п += 1;
    }
    вихід::вміст = ЕлементиСписку {
      розмір = предмет_списку.елементи.розмір,
      дані = елементи
    };
    вернути так;
  }

  зовнішня дія отримати_копію_елементів_словника(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<ЕлементиСловника>): логічне {
    ціль предмет_словника = предмет як адреса<МаМа::ПредметСловника>;
    змінна ціль елементи = виділити_памʼять<ЕлементСловника>(обчислювач, предмет_словника.елементи.елементи.розмір);
    змінна ціль п: позитивне = 0;
    поки п < предмет_словника.елементи.елементи.розмір {
      елементи[п] = ЕлементСловника {
        ключ = предмет_словника.елементи.елементи.дані[п].ключ як адреса<Предмет>,
        значення = предмет_словника.елементи.елементи.дані[п].значення як адреса<Предмет>
      };
      п += 1;
    }
    вихід::вміст = ЕлементиСловника {
      розмір = предмет_словника.елементи.елементи.розмір,
      дані = елементи
    };
    вернути так;
  }

  зовнішня дія отримати_дані_ресурсу(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): невідома_адреса {
    ціль предмет_ресурсу = предмет як адреса<МаМа::ПредметРесурсу>;
    вернути предмет_ресурсу.значення;
  }

  зовнішня дія отримати_значення_байтів(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): Байти {
    ціль предмет_байтів = предмет як адреса<МаМа::ПредметБайтів>;
    вернути Байти { предмет_байтів.розмір, предмет_байтів.дані };
  }

  зовнішня дія отримати_копію_значення_байтів(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<Байти>): логічне {
    ціль предмет_байтів = предмет як адреса<МаМа::ПредметБайтів>;
    ціль байти = Байти {
      розмір = предмет_байтів.розмір,
      дані = виділити_памʼять<п8>(обчислювач, предмет_байтів.розмір)
    };
    змінна ціль п: позитивне = 0;
    поки п < предмет_байтів.розмір {
      байти.дані[п] = предмет_байтів.дані[п];
      п += 1;
    }
    вихід::вміст = байти;
    вернути так;
  }

  зовнішня дія отримати_предмет_логічного_так(обчислювач: адреса<Обчислювач>): адреса<Предмет> {
    ціль М = обчислювач;
    вернути М.предмет_логічного_так як адреса<Предмет>;
  }

  зовнішня дія отримати_предмет_логічного_ні(обчислювач: адреса<Обчислювач>): адреса<Предмет> {
    ціль М = обчислювач;
    вернути М.предмет_логічного_так як адреса<Предмет>;
  }

  зовнішня дія почати_спробу(обчислювач: адреса<Обчислювач>): адреса<Спроба> {
    вернути пусто;
  }

  зовнішня дія знищити_спробу(обчислювач: адреса<Обчислювач>, спроба: адреса<Спроба>) {
    // ...
  }

  зовнішня дія перевірити_чи_стан_падіння(обчислювач: адреса<Обчислювач>): логічне {
    ціль М = обчислювач;
    вернути М.стан_падіння == позитивне(так);
  }

  зовнішня дія перевірити_чи_предмети_рівні(обчислювач: адреса<Обчислювач>, а: адреса<Предмет>, б: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмети_рівні(М, а як адреса<МаМа::Предмет>, б як адреса<МаМа::Предмет>);
  }

  зовнішня дія перевірити_чи_предмет_виражається_логічним_так(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне {
    ціль М = обчислювач;
    вернути МаМа::перевірити_чи_предмет_виражається_логічним_так(М, предмет як адреса<МаМа::Предмет>);
  }
}

секція мавка {
  зовнішня дія вивести_т8(обчислювач: адреса<Обчислювач>, значення: т8) {
    ціль М = обчислювач;
    ціль значення_ю8 = ю8 { 0, пусто };
    якщо МаМа::перекодувати_т8_в_ю8(М, значення, значення_ю8::адреса, ні) == ні {
      // потім: помилка
    }
    вивести_ю8(обчислювач, значення_ю8);
    МаМа::звільнити_памʼять(М, значення_ю8.дані);
  }

  зовнішня дія вивести_ю8(обчислювач: адреса<Обчислювач>, значення: ю8) {
    мавка_система_вивести_ю8(значення.розмір, значення.дані);
  }

  зовнішня дія вивести_ю32(обчислювач: адреса<Обчислювач>, значення: ю32) {
    ціль М = обчислювач;
    ціль значення_ю8 = ю8 { 0, пусто };
    якщо МаМа::перекодувати_ю32_в_ю8(М, значення, значення_ю8::адреса, ні) == ні {
      // потім: помилка
    }
    вивести_ю8(обчислювач, значення_ю8);
    МаМа::звільнити_памʼять(М, значення_ю8.дані);
  }

  зовнішня дія вивести_позитивне(обчислювач: адреса<Обчислювач>, значення: позитивне) {
    мавка_система_вивести_позитивне(значення);
  }

  зовнішня дія вивести_д64(обчислювач: адреса<Обчислювач>, значення: д64) {
    мавка_система_вивести_д64(значення);
  }

  зовнішня дія надрукувати_т8(обчислювач: адреса<Обчислювач>, значення: т8) {
    вивести_т8(обчислювач, значення);
    вивести_ю8(обчислювач, ю8"\n");
  }

  зовнішня дія надрукувати_ю8(обчислювач: адреса<Обчислювач>, значення: ю8) {
    вивести_ю8(обчислювач, значення);
    вивести_ю8(обчислювач, ю8"\n");
  }

  зовнішня дія надрукувати_ю32(обчислювач: адреса<Обчислювач>, значення: ю32) {
    вивести_ю32(обчислювач, значення);
    вивести_ю8(обчислювач, ю8"\n");
  }

  зовнішня дія надрукувати_позитивне(обчислювач: адреса<Обчислювач>, значення: позитивне) {
    вивести_позитивне(обчислювач, значення);
    вивести_ю8(обчислювач, ю8"\n");
  }

  зовнішня дія надрукувати_д64(обчислювач: адреса<Обчислювач>, значення: д64) {
    вивести_д64(обчислювач, значення);
    вивести_ю8(обчислювач, ю8"\n");
  }

  зовнішня дія отримати_з_т8_т8_з_закодованими_недрукованими(обчислювач: адреса<Обчислювач>, значення: т8, вихід: адреса<т8>): логічне {
    ціль М = обчислювач;
    змінна ціль накопичувач_т8 = МаМа::зробити_накопичувач<п8>(М);
    змінна ціль п: позитивне = 0;
    поки п < значення.розмір {
      якщо значення.дані[п] == 0 {
        МаМа::покласти_в_накопичувач<п8>(М, накопичувач_т8::адреса, КД::символи::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п8>(М, накопичувач_т8::адреса, КД::символи::НУЛЬ);
      } інакше якщо значення.дані[п] == 1 {
        МаМа::покласти_в_накопичувач<п8>(М, накопичувач_т8::адреса, КД::символи::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п8>(М, накопичувач_т8::адреса, КД::символи::ОДИН);
      } інакше якщо значення.дані[п] == 2 {
        МаМа::покласти_в_накопичувач<п8>(М, накопичувач_т8::адреса, КД::символи::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п8>(М, накопичувач_т8::адреса, КД::символи::ДВА);
      } інакше якщо значення.дані[п] == 3 {
        МаМа::покласти_в_накопичувач<п8>(М, накопичувач_т8::адреса, КД::символи::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п8>(М, накопичувач_т8::адреса, КД::символи::МАЛА_БУКВА_р);
      } інакше {
        МаМа::покласти_в_накопичувач<п8>(М, накопичувач_т8::адреса, значення.дані[п]);
      }
      п += 1;
    }
    вихід::вміст = т8 {
      накопичувач_т8.розмір,
      накопичувач_т8.дані
    };
    вернути так;
  }

  зовнішня дія отримати_з_ю32_ю32_з_закодованими_недрукованими(обчислювач: адреса<Обчислювач>, значення: ю32, вихід: адреса<ю32>): логічне {
    ціль М = обчислювач;
    змінна ціль накопичувач_ю32 = МаМа::зробити_накопичувач<п32>(М);
    змінна ціль п: позитивне = 0;
    поки п < значення.розмір {
      якщо значення.дані[п] == 0 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::НУЛЬ);
      } інакше якщо значення.дані[п] == 1 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
      } інакше якщо значення.дані[п] == 2 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
      } інакше якщо значення.дані[п] == 3 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ТРИ);
      } інакше якщо значення.дані[п] == 4 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ЧОТИРИ);
      } інакше якщо значення.дані[п] == 5 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ПʼЯТЬ);
      } інакше якщо значення.дані[п] == 6 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ШІСТЬ);
      } інакше якщо значення.дані[п] == 7 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::СІМ);
      } інакше якщо значення.дані[п] == 8 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ВІСІМ);
      } інакше якщо значення.дані[п] == 9 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДЕВʼЯТЬ);
      } інакше якщо значення.дані[п] == 10 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, 110);
      } інакше якщо значення.дані[п] == 11 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
      } інакше якщо значення.дані[п] == 12 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
      } інакше якщо значення.дані[п] == 13 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ТРИ);
      } інакше якщо значення.дані[п] == 14 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ЧОТИРИ);
      } інакше якщо значення.дані[п] == 15 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ПʼЯТЬ);
      } інакше якщо значення.дані[п] == 16 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ШІСТЬ);
      } інакше якщо значення.дані[п] == 17 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::СІМ);
      } інакше якщо значення.дані[п] == 18 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ВІСІМ);
      } інакше якщо значення.дані[п] == 19 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДЕВʼЯТЬ);
      } інакше якщо значення.дані[п] == 20 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::НУЛЬ);
      } інакше якщо значення.дані[п] == 21 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
      } інакше якщо значення.дані[п] == 22 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
      } інакше якщо значення.дані[п] == 23 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ТРИ);
      } інакше якщо значення.дані[п] == 24 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ЧОТИРИ);
      } інакше якщо значення.дані[п] == 25 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ПʼЯТЬ);
      } інакше якщо значення.дані[п] == 26 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ШІСТЬ);
      } інакше якщо значення.дані[п] == 27 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::СІМ);
      } інакше якщо значення.дані[п] == 28 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ВІСІМ);
      } інакше якщо значення.дані[п] == 29 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДЕВʼЯТЬ);
      } інакше якщо значення.дані[п] == 30 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ТРИ);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::НУЛЬ);
      } інакше якщо значення.дані[п] == 31 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ТРИ);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
      } інакше якщо значення.дані[п] == 127 {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ОДИН);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::ДВА);
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, КД::відповідні_символи_юнікоду::СІМ);
      } інакше {
        МаМа::покласти_в_накопичувач<п32>(М, накопичувач_ю32::адреса, значення.дані[п]);
      }
      п += 1;
    }
    вихід::вміст = ю32 {
      накопичувач_ю32.розмір,
      накопичувач_ю32.дані
    };
    вернути так;
  }
}