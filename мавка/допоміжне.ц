взяти визначення визначення/мавка;
взяти визначення МаМа/КД;

зовнішня дія мавка_допоміжне_перетворити_д64_в_ю8(значення: д64, вихід: адреса<памʼять<п8>>, вихід_розміру: адреса<позитивне>): логічне;

секція мавка {
  секція допоміжне {
    зовнішня дія виділити_копію_тексту(обчислювач: адреса<Обчислювач>, значення: т8, вихід: адреса<т8>): логічне {
      ціль копія = т8 {
        значення.розмір,
        виділити_памʼять<п8>(обчислювач, значення.розмір)
      };
      змінна ціль п: позитивне = 0;
      поки п < значення.розмір {
        копія.дані[п] = значення.дані[п];
        п += 1;
      }
      вихід::вміст = копія;
      вернути так;
    }

    зовнішня дія виділити_копію_ю8(обчислювач: адреса<Обчислювач>, значення: ю8, вихід: адреса<ю8>): логічне {
      ціль копія = ю8 {
        значення.розмір,
        виділити_памʼять<п8>(обчислювач, значення.розмір)
      };
      змінна ціль п: позитивне = 0;
      поки п < значення.розмір {
        копія.дані[п] = значення.дані[п];
        п += 1;
      }
      вихід::вміст = копія;
      вернути так;
    }

    зовнішня дія виділити_копію_ю8_з_ю8сі(обчислювач: адреса<Обчислювач>, значення: памʼять<п8>, вихід: адреса<ю8>): логічне {
      ціль розмір_значення = порахувати_розмір_ю8сі(значення);
      ціль копія = ю8 {
        розмір_значення,
        виділити_памʼять<п8>(обчислювач, розмір_значення)
      };
      змінна ціль п: позитивне = 0;
      поки п < розмір_значення {
        копія.дані[п] = значення[п];
        п += 1;
      }
      вихід::вміст = копія;
      вернути так;
    }

    зовнішня дія виділити_копію_ю8сі_з_ю8(обчислювач: адреса<Обчислювач>, значення: ю8, вихід: адреса<памʼять<п8>>): логічне {
      ціль копія_ю8сі = виділити_памʼять<п8>(обчислювач, значення.розмір + 1);
      змінна ціль п: позитивне = 0;
      поки п < значення.розмір {
        копія_ю8сі[п] = значення.дані[п];
        п += 1;
      }
      копія_ю8сі[значення.розмір] = 0;
      вихід::вміст = копія_ю8сі;
      вернути так;
    }

    зовнішня дія виділити_копію_ю8сі_з_тексту(обчислювач: адреса<Обчислювач>, значення: т8, вихід: адреса<памʼять<п8>>): логічне {
      ціль копія_ю8сі = виділити_памʼять<п8>(обчислювач, (значення.розмір * 4) + 1);
      ціль розмір_ю8сі = КД::перекодувати_в_Ю8(значення.дані, значення.розмір, копія_ю8сі);
      копія_ю8сі[розмір_ю8сі] = 0;
      вихід::вміст = копія_ю8сі;
      вернути так;
    }

    зовнішня дія виділити_копію_ю8_з_тексту(обчислювач: адреса<Обчислювач>, значення: т8, вихід: адреса<ю8>): логічне {
      ціль копія_ю8сі = виділити_памʼять<п8>(обчислювач, (значення.розмір * 4) + 1);
      ціль розмір_ю8сі = КД::перекодувати_в_Ю8(значення.дані, значення.розмір, копія_ю8сі);
      копія_ю8сі[розмір_ю8сі] = 0;
      вихід::вміст = ю8 { розмір_ю8сі, копія_ю8сі };
      вернути так;
    }

    зовнішня дія порахувати_розмір_ю8сі(значення: памʼять<п8>): позитивне {
      змінна ціль довжина: позитивне = 0;
      поки значення[довжина] != 0 {
        довжина += 1;
      }
      вернути довжина;
    }

    зовнішня дія перевірити_чи_ю8_рівні(а: ю8, б: ю8): логічне {
      якщо а.розмір != б.розмір {
        вернути ні;
      }
      змінна ціль п: позитивне = 0;
      поки п < а.розмір {
        якщо а.дані[п] != б.дані[п] {
          вернути ні;
        }
        п += 1;
      }
      вернути так;
    }

    зовнішня дія перевірити_чи_тексти_рівні(а: т8, б: т8): логічне {
      якщо а.розмір != б.розмір {
        вернути ні;
      }
      змінна ціль п: позитивне = 0;
      поки п < а.розмір {
        якщо а.дані[п] != б.дані[п] {
          вернути ні;
        }
        п += 1;
      }
      вернути так;
    }

    зовнішня дія перетворити_ю8_в_п64(значення: ю8): п64 {
      вернути 0;
    }

    зовнішня дія перетворити_ю8_в_ц64(значення: ю8): ц64 {
      вернути 0;
    }

    зовнішня дія перетворити_ю8_в_д64(значення: ю8): д64 {
      вернути 0.0;
    }

    зовнішня дія перетворити_п64_в_ю8(значення: п64, вихід: адреса<ю8>): логічне {
      вернути ні;
    }

    зовнішня дія перетворити_ц64_в_ю8(значення: ц64, вихід: адреса<ю8>): логічне {
      вернути ні;
    }

    зовнішня дія перетворити_д64_в_ю8(значення: д64, вихід: адреса<ю8>): логічне {
      вернути мавка_допоміжне_перетворити_д64_в_ю8(значення, вихід.дані::адреса, вихід.розмір::адреса);
    }
  }
}
