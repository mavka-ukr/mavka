взяти визначення мавка;
взяти визначення РМв1;

секція мавка {
  секція розширення {
    дія РМв1_вивести_ю8(Р: адреса<РМв1::Розширення>, значення: адреса<ю8>) {
      змінна М = Р.М як адреса<Машина>;
      вивести_ю8(М, значення::вміст);
    }

    дія РМв1_надрукувати_ю8(Р: адреса<РМв1::Розширення>, значення: адреса<ю8>) {
      змінна М = Р.М як адреса<Машина>;
      надрукувати_ю8(М, значення::вміст);
    }

    дія відклик_перед_знищенням_предмета_розширення(М: адреса<Машина>, предмет_розширення: адреса<ПредметРозширення>) {
      змінна Р = предмет_розширення.Р як адреса<РМв1::Розширення>;
      якщо Р.відклик_перед_знищенням != пусто {
        Р.відклик_перед_знищенням(Р);
      }
      знищити_притримувач(М, Р.основний_притримувач як адреса<Накопичувач<адреса<Предмет>>>);
      звільнити(М, Р);
    }

    дія РМв1_почати_спробу(Р: адреса<РМв1::Розширення>): адреса<РМв1::Спроба> {
      вернути почати_спробу(Р.М як адреса<Машина>) як адреса<РМв1::Спроба>;
    }

    дія РМв1_перевірити_чи_стан_падіння(Р: адреса<РМв1::Розширення>): логічне {
      вернути перевірити_чи_стан_падіння(Р.М як адреса<Машина>);
    }

    дія РМв1_увімкнути_стан_падіння(Р: адреса<РМв1::Розширення>, місцезнаходження: адреса<РМв1::Місцезнаходження>) {
      увімкнути_стан_падіння(Р.М як адреса<Машина>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок });
    }

    дія РМв1_вимкнути_стан_падіння(Р: адреса<РМв1::Розширення>, спроба: адреса<РМв1::Спроба>) {
      вимкнути_стан_падіння(Р.М як адреса<Машина>);
    }

    дія РМв1_отримати_інформацію_падіння(Р: адреса<РМв1::Розширення>, вихід: адреса<адреса<РМв1::ІнформаціяПадіння>>): логічне {
      вихід::вміст = отримати_інформацію_падіння(Р.М як адреса<Машина>) як адреса<РМв1::ІнформаціяПадіння>;
      вернути так;
    }

    дія РМв1_знищити_інформацію_падіння(Р: адреса<РМв1::Розширення>, інформація_падіння: адреса<РМв1::ІнформаціяПадіння>) {
      знищити_інформацію_падіння(Р.М як адреса<Машина>, інформація_падіння як адреса<ІнформаціяПадіння>);
    }

    структура ДаніРідноїДіїРозширення {
      Р: адреса<РМв1::Розширення>;
      рідна_дія: РМв1::РіднаДія;
      дані: невідома_адреса;
      зробити_копію_даних: РМв1::ЗробитиКопіюДанихДії;
      відклик_перед_знищенням: РМв1::ВідкликПередЗнищеннямДії;
    }

    дія рідна_дія_розширення(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): адреса<Предмет> {
      змінна дані_рідної_дії_розширення = предмет_дії.дані як адреса<ДаніРідноїДіїРозширення>;
      змінна Р = дані_рідної_дії_розширення.Р;
      змінна результат = дані_рідної_дії_розширення.рідна_дія(Р, предмет_дії як адреса<РМв1::Предмет>, предмет_я як адреса<РМв1::Предмет>, кількість_аргументів, аргументи як памʼять<адреса<РМв1::Предмет>>, іменовані_аргументи як адреса<РМв1::ІменованіАргументи>, РМв1::Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту> як адреса<РМв1::Предмет>, місцезнаходження.рядок });
      вернути результат як адреса<Предмет>;
    }

    дія зробити_копію_даних_рідної_дії_розширення(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>): невідома_адреса {
      змінна дані_рідної_дії_розширення = предмет_дії.дані як адреса<ДаніРідноїДіїРозширення>;
      змінна Р = дані_рідної_дії_розширення.Р;
      змінна копія_даних_рідної_дії_розширення = виділити<ДаніРідноїДіїРозширення>(М);
      копія_даних_рідної_дії_розширення.Р = дані_рідної_дії_розширення.Р;
      копія_даних_рідної_дії_розширення.рідна_дія = дані_рідної_дії_розширення.рідна_дія;
      якщо дані_рідної_дії_розширення.зробити_копію_даних == пусто {
        копія_даних_рідної_дії_розширення.дані = дані_рідної_дії_розширення.дані;
      } інакше {
        копія_даних_рідної_дії_розширення.дані = дані_рідної_дії_розширення.зробити_копію_даних(Р, предмет_дії як адреса<РМв1::Предмет>);
      }
      копія_даних_рідної_дії_розширення.зробити_копію_даних = дані_рідної_дії_розширення.зробити_копію_даних;
      копія_даних_рідної_дії_розширення.відклик_перед_знищенням = дані_рідної_дії_розширення.відклик_перед_знищенням;
      вернути копія_даних_рідної_дії_розширення;
    }

    дія відклик_перед_знищенням_рідної_дії_розширення(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>) {
      змінна дані_рідної_дії_розширення = предмет_дії.дані як адреса<ДаніРідноїДіїРозширення>;
      змінна Р = дані_рідної_дії_розширення.Р;
      якщо дані_рідної_дії_розширення.відклик_перед_знищенням != пусто {
        дані_рідної_дії_розширення.відклик_перед_знищенням(Р, предмет_дії як адреса<РМв1::Предмет>);
      }
      звільнити(М, дані_рідної_дії_розширення);
    }

    дія РМв1_створити_рідну_дію(Р: адреса<РМв1::Розширення>, назва: адреса<РМв1::Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<РМв1::Предмет>>, тип_результату: адреса<РМв1::Предмет>, рідна_дія: РМв1::РіднаДія): РМв1::ПредметАбоСтанПадіння {
      змінна М = Р.М як адреса<Машина>;

      змінна дані_рідної_дії_розширення = виділити<ДаніРідноїДіїРозширення>(М);
      дані_рідної_дії_розширення.Р = Р;
      дані_рідної_дії_розширення.рідна_дія = рідна_дія;
      дані_рідної_дії_розширення.дані = пусто;
      дані_рідної_дії_розширення.зробити_копію_даних = пусто;
      дані_рідної_дії_розширення.відклик_перед_знищенням = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        назва як адреса<ПредметТексту>,
        кількість_параметрів,
        параметри як памʼять<адреса<ПредметПараметра>>,
        тип_результату як адреса<ПредметТипу>,
        рідна_дія_розширення,
        дані_рідної_дії_розширення,
        зробити_копію_даних_рідної_дії_розширення,
        відклик_перед_знищенням_рідної_дії_розширення
      ) як адреса<РМв1::Предмет>;
    }

    дія РМв1_отримати_дані_рідної_дії(Р: адреса<РМв1::Розширення>, предмет_дії: адреса<РМв1::Предмет>): невідома_адреса {
      вернути пусто;
    }

    дія РМв1_створити_число(Р: адреса<РМв1::Розширення>, значення: д64): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_числа(Р.М як адреса<Машина>, значення) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_текст(Р: адреса<РМв1::Розширення>, значення: адреса<т8>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_тексту(Р.М як адреса<Машина>, значення::вміст) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_текст_без_копіювання(Р: адреса<РМв1::Розширення>, значення: адреса<т8>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_тексту_без_копіювання(Р.М як адреса<Машина>, значення::вміст) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_юнікод(Р: адреса<РМв1::Розширення>, значення: адреса<ю32>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_юнікоду(Р.М як адреса<Машина>, значення::вміст) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_юнікод_без_копіювання(Р: адреса<РМв1::Розширення>, значення: адреса<ю32>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_юнікоду_без_копіювання(Р.М як адреса<Машина>, значення::вміст) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_юнікод_з_ю8(Р: адреса<РМв1::Розширення>, значення: адреса<ю8>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_юнікоду_з_ю8(Р.М як адреса<Машина>, значення::вміст) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_список(Р: адреса<РМв1::Розширення>, кількість_елементів: позитивне, елементи: памʼять<адреса<РМв1::Предмет>>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_списку(Р.М як адреса<Машина>, кількість_елементів, /* елементи як памʼять<адреса<Предмет>> */) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_словник(Р: адреса<РМв1::Розширення>, кількість_елементів: позитивне, елементи: памʼять<РМв1::ЕлементСловника>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_словника(Р.М як адреса<Машина>, кількість_елементів, /* елементи як памʼять<ЕлементСловника> */) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_байти(Р: адреса<РМв1::Розширення>, розмір: позитивне, дані: памʼять<п8>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_байтів(Р.М як адреса<Машина>, розмір, дані) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_байти_без_копіювання(Р: адреса<РМв1::Розширення>, розмір: позитивне, дані: памʼять<п8>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_байтів_без_копіювання(Р.М як адреса<Машина>, розмір, дані) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_модуль(Р: адреса<РМв1::Розширення>, назва: адреса<РМв1::Предмет>, кількість_елементів: позитивне, елементи: памʼять<РМв1::ЕлементМодуля>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_модуля(Р.М як адреса<Машина>, назва як адреса<ПредметТексту>, /* кількість_елементів, елементи як памʼять<ЕлементМодуля> */) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_тип(Р: адреса<РМв1::Розширення>, може_бути_пусто: логічне, кількість_допустимих_структур: позитивне, допустимі_структури: памʼять<адреса<РМв1::Предмет>>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_типу(Р.М як адреса<Машина>, може_бути_пусто, Послідовність<адреса<ПредметСтруктури>> { кількість_допустимих_структур, допустимі_структури як памʼять<адреса<ПредметСтруктури>> }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_параметр(Р: адреса<РМв1::Розширення>, назва: адреса<РМв1::Предмет>, тип: адреса<РМв1::Предмет>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_предмет_параметра(Р.М як адреса<Машина>, назва як адреса<ПредметТексту>, тип як адреса<ПредметТипу>, пусто) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_додати(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_додати(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_відняти(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_відняти(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_помножити(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_помножити(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_поділити(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_поділити(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_остача(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_остача(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_неповна_частка(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_неповна_частка(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_степінь(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_степінь(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_зсунути_вліво(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_зсунути_вліво(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_зсунути_вправо(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_зсунути_вправо(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_зсунути_вправо_2(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_зсунути_вправо_2(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_двійкове_і(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_двійкове_і(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_двійкове_або(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_двійкове_або(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_двійкове_виключне_або(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_двійкове_виключне_або(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_двійкове_заперечення(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_двійкове_заперечення(Р.М як адреса<Машина>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_менше(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_менше(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_більше(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_більше(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_містить(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_містить(Р.М як адреса<Машина>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_числова_негація(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_числова_негація(Р.М як адреса<Машина>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_отримати_число(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_отримати_число(Р.М як адреса<Машина>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_отримати_текст(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_отримати_текст(Р.М як адреса<Машина>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_отримати_юнікод(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_отримати_юнікод(Р.М як адреса<Машина>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_отримати_перебір(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_отримати_перебір(Р.М як адреса<Машина>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_отримати_діапазон(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, включно: логічне, до: адреса<РМв1::Предмет>, місцезнаходження: адреса<РМв1::Місцезнаходження>): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_отримати_діапазон(Р.М як адреса<Машина>, предмет як адреса<Предмет>, включно, до як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<ПредметТексту>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_перевірити_чи_предмет_є_дією(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_дією(Р.М як адреса<Машина>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_числом(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_числом(Р.М як адреса<Машина>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_текстом(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_текстом(Р.М як адреса<Машина>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_юнікодом(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_юнікодом(Р.М як адреса<Машина>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_списком(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_списком(Р.М як адреса<Машина>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_словником(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_словником(Р.М як адреса<Машина>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_байтами(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_байтами(Р.М як адреса<Машина>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_модулем(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_модулем(Р.М як адреса<Машина>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_типом(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_типом(Р.М як адреса<Машина>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_параметром(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_параметром(Р.М як адреса<Машина>, предмет як адреса<Предмет>);
    }

    дія РМв1_отримати_значення_числа(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): д64 {
      вернути отримати_значення_числа(Р.М як адреса<Машина>, предмет як адреса<ПредметЧисла>);
    }

    дія РМв1_отримати_значення_тексту(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<т8>) {
      вихід::вміст = отримати_значення_тексту(Р.М як адреса<Машина>, предмет як адреса<ПредметТексту>);
    }

    дія РМв1_отримати_копію_значення_тексту(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<т8>): логічне {
      вернути отримати_копію_значення_тексту(Р.М як адреса<Машина>, предмет як адреса<ПредметТексту>, вихід);
    }

    дія РМв1_отримати_значення_юнікоду(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<ю32>) {
      вихід::вміст = отримати_значення_юнікоду(Р.М як адреса<Машина>, предмет як адреса<ПредметЮнікоду>);
    }

    дія РМв1_отримати_копію_значення_юнікоду(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<ю32>): логічне {
      вернути отримати_копію_значення_юнікоду(Р.М як адреса<Машина>, предмет як адреса<ПредметЮнікоду>, вихід);
    }

    дія РМв1_отримати_копію_значення_юнікоду_як_ю8(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<ю8>): логічне {
      вернути отримати_копію_значення_юнікоду_як_ю8(Р.М як адреса<Машина>, предмет як адреса<ПредметЮнікоду>, вихід);
    }

    дія РМв1_отримати_копію_елементів_списку(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<РМв1::ЕлементиСписку>): логічне {
      вернути отримати_копію_елементів_списку(Р.М як адреса<Машина>, предмет як адреса<ПредметСписку>, вихід як адреса<ЕлементиСписку>);
    }

    дія РМв1_отримати_копію_елементів_словника(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<РМв1::ЕлементиСловника>): логічне {
      вернути отримати_копію_елементів_словника(Р.М як адреса<Машина>, предмет як адреса<ПредметСловника>, вихід як адреса<ЕлементиСловника>);
    }

    дія РМв1_отримати_значення_байтів(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<РМв1::Байти>) {
      змінна байти = отримати_значення_байтів(Р.М як адреса<Машина>, предмет як адреса<ПредметБайтів>);
      вихід::вміст = РМв1::Байти { байти.розмір, байти.дані };
    }

    дія РМв1_отримати_копію_значення_байтів(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<РМв1::Байти>): логічне {
      вернути отримати_копію_значення_байтів(Р.М як адреса<Машина>, предмет як адреса<ПредметБайтів>, вихід як адреса<Байти>);
    }

    дія РМв1_покласти_притримувач(Р: адреса<РМв1::Розширення>): адреса<РМв1::ПритримувачПредметів> {
      вернути покласти_притримувач(Р.М як адреса<Машина>) як адреса<РМв1::ПритримувачПредметів>;
    }

    дія РМв1_притримати(Р: адреса<РМв1::Розширення>, притримувач: адреса<РМв1::ПритримувачПредметів>, предмет: адреса<РМв1::Предмет>) {
      притримати(Р.М як адреса<Машина>, притримувач як адреса<Накопичувач<адреса<Предмет>>>, предмет як адреса<Предмет>);
    }

    дія РМв1_відпустити(Р: адреса<РМв1::Розширення>, притримувач: адреса<РМв1::ПритримувачПредметів>) {
      відпустити(Р.М як адреса<Машина>, притримувач як адреса<Накопичувач<адреса<Предмет>>>);
    }

    дія РМв1_забрати_притримувач(Р: адреса<РМв1::Розширення>) {
      забрати_притримувач(Р як адреса<Машина>);
    }

    дія РМв1_назва(Р: адреса<РМв1::Розширення>, значення: адреса<т8>): адреса<РМв1::Предмет> {
      змінна М = Р.М як адреса<Машина>;

      вернути створити_назву(М, значення::вміст) як адреса<РМв1::Предмет>;
    }

    місцева дія виконати_завантаження_РМв1(М: адреса<Машина>, дія_завантаження_РМв1: (Р: адреса<РМв1::Розширення>) -> РМв1::ПредметАбоСтанПадіння): предмет_або_стан_падіння {
      змінна Р = виділити<РМв1::Розширення>(М);
      Р.М = М;
      Р.основний_притримувач = створити_притримувач(М) як адреса<РМв1::ПритримувачПредметів>;
      Р.дані = пусто;
      Р.відклик_перед_знищенням = пусто;
      Р.вивести_ю8 = РМв1_вивести_ю8;
      Р.надрукувати_ю8 = РМв1_надрукувати_ю8;
      Р.почати_спробу = РМв1_почати_спробу;
      Р.перевірити_чи_стан_падіння = РМв1_перевірити_чи_стан_падіння;
      Р.увімкнути_стан_падіння = РМв1_увімкнути_стан_падіння;
      Р.вимкнути_стан_падіння = РМв1_вимкнути_стан_падіння;
      Р.отримати_інформацію_падіння = РМв1_отримати_інформацію_падіння;
      Р.знищити_інформацію_падіння = РМв1_знищити_інформацію_падіння;
      Р.предмет_логічного_так = М.предмет_логічного_так як адреса<РМв1::Предмет>;
      Р.предмет_логічного_ні = М.предмет_логічного_ні як адреса<РМв1::Предмет>;
      Р.створити_рідну_дію = РМв1_створити_рідну_дію;
      Р.отримати_дані_рідної_дії = РМв1_отримати_дані_рідної_дії;
      Р.створити_число = РМв1_створити_число;
      Р.створити_текст = РМв1_створити_текст;
      Р.створити_текст_без_копіювання = РМв1_створити_текст_без_копіювання;
      Р.створити_юнікод = РМв1_створити_юнікод;
      Р.створити_юнікод_без_копіювання = РМв1_створити_юнікод_без_копіювання;
      Р.створити_юнікод_з_ю8 = РМв1_створити_юнікод_з_ю8;
      Р.створити_список = РМв1_створити_список;
      Р.створити_словник = РМв1_створити_словник;
      Р.створити_байти = РМв1_створити_байти;
      Р.створити_байти_без_копіювання = РМв1_створити_байти_без_копіювання;
      Р.створити_модуль = РМв1_створити_модуль;
      Р.створити_тип = РМв1_створити_тип;
      Р.створити_параметр = РМв1_створити_параметр;
      Р.предмет_додати = РМв1_предмет_додати;
      Р.предмет_відняти = РМв1_предмет_відняти;
      Р.предмет_помножити = РМв1_предмет_помножити;
      Р.предмет_поділити = РМв1_предмет_поділити;
      Р.предмет_остача = РМв1_предмет_остача;
      Р.предмет_неповна_частка = РМв1_предмет_неповна_частка;
      Р.предмет_степінь = РМв1_предмет_степінь;
      Р.предмет_зсунути_вліво = РМв1_предмет_зсунути_вліво;
      Р.предмет_зсунути_вправо = РМв1_предмет_зсунути_вправо;
      Р.предмет_зсунути_вправо_2 = РМв1_предмет_зсунути_вправо_2;
      Р.предмет_двійкове_і = РМв1_предмет_двійкове_і;
      Р.предмет_двійкове_або = РМв1_предмет_двійкове_або;
      Р.предмет_двійкове_виключне_або = РМв1_предмет_двійкове_виключне_або;
      Р.предмет_двійкове_заперечення = РМв1_предмет_двійкове_заперечення;
      Р.предмет_менше = РМв1_предмет_менше;
      Р.предмет_більше = РМв1_предмет_більше;
      Р.предмет_містить = РМв1_предмет_містить;
      Р.предмет_числова_негація = РМв1_предмет_числова_негація;
      Р.предмет_отримати_число = РМв1_предмет_отримати_число;
      Р.предмет_отримати_текст = РМв1_предмет_отримати_текст;
      Р.предмет_отримати_юнікод = РМв1_предмет_отримати_юнікод;
      Р.предмет_отримати_перебір = РМв1_предмет_отримати_перебір;
      Р.предмет_отримати_діапазон = РМв1_предмет_отримати_діапазон;
      Р.перевірити_чи_предмет_є_дією = РМв1_перевірити_чи_предмет_є_дією;
      Р.перевірити_чи_предмет_є_числом = РМв1_перевірити_чи_предмет_є_числом;
      Р.перевірити_чи_предмет_є_текстом = РМв1_перевірити_чи_предмет_є_текстом;
      Р.перевірити_чи_предмет_є_юнікодом = РМв1_перевірити_чи_предмет_є_юнікодом;
      Р.перевірити_чи_предмет_є_списком = РМв1_перевірити_чи_предмет_є_списком;
      Р.перевірити_чи_предмет_є_словником = РМв1_перевірити_чи_предмет_є_словником;
      Р.перевірити_чи_предмет_є_байтами = РМв1_перевірити_чи_предмет_є_байтами;
      Р.перевірити_чи_предмет_є_модулем = РМв1_перевірити_чи_предмет_є_модулем;
      Р.перевірити_чи_предмет_є_типом = РМв1_перевірити_чи_предмет_є_типом;
      Р.перевірити_чи_предмет_є_параметром = РМв1_перевірити_чи_предмет_є_параметром;
      Р.отримати_значення_числа = РМв1_отримати_значення_числа;
      Р.отримати_значення_тексту = РМв1_отримати_значення_тексту;
      Р.отримати_копію_значення_тексту = РМв1_отримати_копію_значення_тексту;
      Р.отримати_значення_юнікоду = РМв1_отримати_значення_юнікоду;
      Р.отримати_копію_значення_юнікоду = РМв1_отримати_копію_значення_юнікоду;
      Р.отримати_копію_значення_юнікоду_як_ю8 = РМв1_отримати_копію_значення_юнікоду_як_ю8;
      Р.отримати_копію_елементів_списку = РМв1_отримати_копію_елементів_списку;
      Р.отримати_копію_елементів_словника = РМв1_отримати_копію_елементів_словника;
      Р.отримати_значення_байтів = РМв1_отримати_значення_байтів;
      Р.отримати_копію_значення_байтів = РМв1_отримати_копію_значення_байтів;
      Р.покласти_притримувач = РМв1_покласти_притримувач;
      Р.притримати = РМв1_притримати;
      Р.відпустити = РМв1_відпустити;
      Р.забрати_притримувач = РМв1_забрати_притримувач;
      Р.назва = РМв1_назва;
      змінна результат = дія_завантаження_РМв1(Р);
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат як адреса<Предмет>;
      }
      змінна результат_створення_розширення = створити_предмет_розширення(
        М,
        Р,
        результат як адреса<Предмет>,
        відклик_перед_знищенням_предмета_розширення,
        Р.основний_притримувач як адреса<Накопичувач<адреса<Предмет>>>
      ) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        звільнити(М, Р);
      }
      вернути результат_створення_розширення;
    }
  }
}