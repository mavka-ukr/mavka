взяти визначення мавка;
взяти визначення РМв1;

секція мавка {
  секція розширення {
    дія РМв1_вивести_ю8(Р: адреса<РМв1::Розширення>, значення: ю8) {
      ціль обчислювач = Р.обчислювач як адреса<Обчислювач>;
      вивести_ю8(обчислювач, значення);
    }

    дія РМв1_надрукувати_ю8(Р: адреса<РМв1::Розширення>, значення: ю8) {
      ціль обчислювач = Р.обчислювач як адреса<Обчислювач>;
      надрукувати_ю8(обчислювач, значення);
    }

    дія відклик_перед_знищенням_предмета_розширення(обчислювач: адреса<Обчислювач>, предмет_розширення: адреса<Предмет>) {
      ціль Р = отримати_Р_з_розширення(обчислювач, предмет_розширення) як адреса<РМв1::Розширення>;
      якщо Р.відклик_перед_звільненням != пусто {
        Р.відклик_перед_звільненням(Р);
      }
      звільнити(обчислювач, Р);
    }

    дія РМв1_почати_спробу(Р: адреса<РМв1::Розширення>): адреса<РМв1::Спроба> {
      вернути почати_спробу(Р.обчислювач як адреса<Обчислювач>) як адреса<РМв1::Спроба>;
    }

    дія РМв1_перевірити_чи_стан_падіння(Р: адреса<РМв1::Розширення>): логічне {
      вернути перевірити_чи_стан_падіння(Р.обчислювач як адреса<Обчислювач>);
    }

    дія РМв1_увімкнути_стан_падіння(Р: адреса<РМв1::Розширення>, місцезнаходження: РМв1::Місцезнаходження) {
      увімкнути_стан_падіння(Р.обчислювач як адреса<Обчислювач>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок });
    }

    дія РМв1_вимкнути_стан_падіння(Р: адреса<РМв1::Розширення>, спроба: адреса<РМв1::Спроба>) {
      вимкнути_стан_падіння(Р.обчислювач як адреса<Обчислювач>, спроба як адреса<Спроба>);
    }

    дія РМв1_отримати_інформацію_падіння(Р: адреса<РМв1::Розширення>, вихід: адреса<адреса<РМв1::ІнформаціяПадіння>>): логічне {
      вихід::вміст = отримати_інформацію_падіння(Р.обчислювач як адреса<Обчислювач>) як адреса<РМв1::ІнформаціяПадіння>;
      вернути так;
    }

    дія РМв1_знищити_інформацію_падіння(Р: адреса<РМв1::Розширення>, інформація_падіння: адреса<РМв1::ІнформаціяПадіння>) {
      знищити_інформацію_падіння(Р.обчислювач як адреса<Обчислювач>, інформація_падіння як адреса<ІнформаціяПадіння>);
    }

    дія РМв1_створити_рідну_дію(Р: адреса<РМв1::Розширення>, назва: адреса<РМв1::Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<РМв1::Предмет>>, тип_результату: адреса<РМв1::Предмет>, рідна_дія: РМв1::РіднаДія, дані: невідома_адреса, зробити_копію_даних: РМв1::ЗробитиКопіюДанихДії, відклик_перед_звільненням: РМв1::ВідкликПередЗнищеннямДії): РМв1::ПредметАбоСтанПадіння {
      вернути пусто;
    }

    дія РМв1_отримати_дані_рідної_дії(Р: адреса<РМв1::Розширення>, предмет_дії: адреса<РМв1::Предмет>): невідома_адреса {
      вернути пусто;
    }

    дія РМв1_створити_число(Р: адреса<РМв1::Розширення>, значення: д64): РМв1::ПредметАбоСтанПадіння {
      вернути створити_число(Р.обчислювач як адреса<Обчислювач>, значення) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_текст(Р: адреса<РМв1::Розширення>, значення: т8): РМв1::ПредметАбоСтанПадіння {
      вернути створити_текст(Р.обчислювач як адреса<Обчислювач>, значення) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_текст_без_копіювання(Р: адреса<РМв1::Розширення>, значення: т8): РМв1::ПредметАбоСтанПадіння {
      вернути створити_текст_без_копіювання(Р.обчислювач як адреса<Обчислювач>, значення) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_юнікод(Р: адреса<РМв1::Розширення>, значення: ю32): РМв1::ПредметАбоСтанПадіння {
      вернути створити_юнікод(Р.обчислювач як адреса<Обчислювач>, значення) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_юнікод_без_копіювання(Р: адреса<РМв1::Розширення>, значення: ю32): РМв1::ПредметАбоСтанПадіння {
      вернути створити_юнікод_без_копіювання(Р.обчислювач як адреса<Обчислювач>, значення) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_юнікод_з_ю8(Р: адреса<РМв1::Розширення>, значення: ю8): РМв1::ПредметАбоСтанПадіння {
      вернути створити_юнікод_з_ю8(Р.обчислювач як адреса<Обчислювач>, значення) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_список(Р: адреса<РМв1::Розширення>, кількість_елементів: позитивне, елементи: памʼять<адреса<РМв1::Предмет>>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_список(Р.обчислювач як адреса<Обчислювач>, кількість_елементів, елементи як памʼять<адреса<Предмет>>) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_словник(Р: адреса<РМв1::Розширення>, кількість_елементів: позитивне, елементи: памʼять<РМв1::ЕлементСловника>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_словник(Р.обчислювач як адреса<Обчислювач>, кількість_елементів, елементи як памʼять<ЕлементСловника>) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_байти(Р: адреса<РМв1::Розширення>, розмір: позитивне, дані: памʼять<п8>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_байти(Р.обчислювач як адреса<Обчислювач>, розмір, дані) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_байти_без_копіювання(Р: адреса<РМв1::Розширення>, розмір: позитивне, дані: памʼять<п8>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_байти_без_копіювання(Р.обчислювач як адреса<Обчислювач>, розмір, дані) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_модуль(Р: адреса<РМв1::Розширення>, назва: адреса<РМв1::Предмет>, кількість_елементів: позитивне, елементи: памʼять<РМв1::ЕлементМодуля>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_модуль(Р.обчислювач як адреса<Обчислювач>, назва як адреса<Предмет>, кількість_елементів, елементи як памʼять<ЕлементМодуля>) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_ресурс(Р: адреса<РМв1::Розширення>, значення: невідома_адреса, відклик_перед_знищенням: РМв1::ВідкликПередЗнищеннямРесурсу): РМв1::ПредметАбоСтанПадіння {
      вернути створити_ресурс(Р.обчислювач як адреса<Обчислювач>, значення, відклик_перед_знищенням як невідома_адреса як ВідкликПередЗнищеннямРесурсу) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_тип(Р: адреса<РМв1::Розширення>, може_бути_пусто: логічне, кількість_допустимих_структур: позитивне, допустимі_структури: памʼять<адреса<РМв1::Предмет>>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_тип(Р.обчислювач як адреса<Обчислювач>, може_бути_пусто, кількість_допустимих_структур, допустимі_структури як памʼять<адреса<Предмет>>) як адреса<РМв1::Предмет>;
    }

    дія РМв1_створити_параметр(Р: адреса<РМв1::Розширення>, назва: адреса<РМв1::Предмет>, тип: адреса<РМв1::Предмет>): РМв1::ПредметАбоСтанПадіння {
      вернути створити_параметр(Р.обчислювач як адреса<Обчислювач>, назва як адреса<Предмет>, тип як адреса<Предмет>, пусто) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_додати(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_додати(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_відняти(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_відняти(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_помножити(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_помножити(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_поділити(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_поділити(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_остача(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_остача(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_неповна_частка(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_неповна_частка(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_степінь(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_степінь(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_зсунути_вліво(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_зсунути_вліво(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_зсунути_вправо(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_зсунути_вправо(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_беззнаковий_зсув_вправо(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_беззнаковий_зсув_вправо(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_двійкове_і(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_двійкове_і(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_двійкове_або(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_двійкове_або(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_двійкове_виключне_або(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_двійкове_виключне_або(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_двійкове_заперечення(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_двійкове_заперечення(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_менше(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_менше(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_більше(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_більше(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_містить(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, значення: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_містить(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, значення як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_числова_негація(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_числова_негація(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_отримати_число(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_отримати_число(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_отримати_текст(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_отримати_текст(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_отримати_юнікод(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_отримати_юнікод(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_отримати_перебір(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_отримати_перебір(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_предмет_отримати_діапазон(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, включно: логічне, до: адреса<РМв1::Предмет>, місцезнаходження: РМв1::Місцезнаходження): РМв1::ПредметАбоСтанПадіння {
      вернути предмет_отримати_діапазон(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, включно, до як адреса<Предмет>, Місцезнаходження { місцезнаходження.шлях як адреса<Предмет>, місцезнаходження.рядок }) як адреса<РМв1::Предмет>;
    }

    дія РМв1_перевірити_чи_предмет_є_дією(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_дією(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_числом(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_числом(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_текстом(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_текстом(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_юнікодом(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_юнікодом(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_списком(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_списком(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_словником(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_словником(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_байтами(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_байтами(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_модулем(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_модулем(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_ресурсом(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_ресурсом(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_типом(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_типом(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_перевірити_чи_предмет_є_параметром(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): логічне {
      вернути перевірити_чи_предмет_є_параметром(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_отримати_значення_числа(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): д64 {
      вернути отримати_значення_числа(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_отримати_значення_тексту(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): т8 {
      вернути отримати_значення_тексту(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_отримати_копію_значення_тексту(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<т8>): логічне {
      вернути отримати_копію_значення_тексту(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, вихід);
    }

    дія РМв1_отримати_значення_юнікоду(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): ю32 {
      вернути отримати_значення_юнікоду(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_отримати_копію_значення_юнікоду(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<ю32>): логічне {
      вернути отримати_копію_значення_юнікоду(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, вихід);
    }

    дія РМв1_отримати_копію_значення_юнікоду_як_ю8(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<ю8>): логічне {
      вернути отримати_копію_значення_юнікоду_як_ю8(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, вихід);
    }

    дія РМв1_отримати_копію_елементів_списку(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<РМв1::ЕлементиСписку>): логічне {
      вернути отримати_копію_елементів_списку(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, вихід як адреса<ЕлементиСписку>);
    }

    дія РМв1_отримати_копію_елементів_словника(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<РМв1::ЕлементиСловника>): логічне {
      вернути отримати_копію_елементів_словника(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, вихід як адреса<ЕлементиСловника>);
    }

    дія РМв1_отримати_дані_ресурсу(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): невідома_адреса {
      вернути отримати_дані_ресурсу(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
    }

    дія РМв1_отримати_значення_байтів(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>): РМв1::Байти {
      ціль байти = отримати_значення_байтів(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>);
      вернути РМв1::Байти { байти.розмір, байти.дані };
    }

    дія РМв1_отримати_копію_значення_байтів(Р: адреса<РМв1::Розширення>, предмет: адреса<РМв1::Предмет>, вихід: адреса<РМв1::Байти>): логічне {
      вернути отримати_копію_значення_байтів(Р.обчислювач як адреса<Обчислювач>, предмет як адреса<Предмет>, вихід як адреса<Байти>);
    }

    зовнішня дія виконати_завантаження_РМв1(обчислювач: адреса<Обчислювач>, дія_завантаження_РМв1: (Р: адреса<РМв1::Розширення>) -> РМв1::ПредметАбоСтанПадіння): предмет_або_стан_падіння {
      ціль Р = виділити<РМв1::Розширення>(обчислювач);
      Р.обчислювач = обчислювач;
      Р.дані = пусто;
      Р.відклик_перед_звільненням = пусто;
      Р.вивести_ю8 = РМв1_вивести_ю8;
      Р.надрукувати_ю8 = РМв1_надрукувати_ю8;
      Р.почати_спробу = РМв1_почати_спробу;
      Р.перевірити_чи_стан_падіння = РМв1_перевірити_чи_стан_падіння;
      Р.увімкнути_стан_падіння = РМв1_увімкнути_стан_падіння;
      Р.вимкнути_стан_падіння = РМв1_вимкнути_стан_падіння;
      Р.отримати_інформацію_падіння = РМв1_отримати_інформацію_падіння;
      Р.знищити_інформацію_падіння = РМв1_знищити_інформацію_падіння;
      Р.предмет_логічного_так = отримати_предмет_логічного_так(обчислювач) як адреса<РМв1::Предмет>;
      Р.предмет_логічного_ні = отримати_предмет_логічного_ні(обчислювач) як адреса<РМв1::Предмет>;
      Р.створити_рідну_дію = РМв1_створити_рідну_дію;
      Р.отримати_дані_рідної_дії = РМв1_отримати_дані_рідної_дії;
      Р.створити_число = РМв1_створити_число;
      Р.створити_текст = РМв1_створити_текст;
      Р.створити_текст_без_копіювання = РМв1_створити_текст_без_копіювання;
      Р.створити_юнікод = РМв1_створити_юнікод;
      Р.створити_юнікод_без_копіювання = РМв1_створити_юнікод_без_копіювання;
      Р.створити_юнікод_з_ю8 = РМв1_створити_юнікод_з_ю8;
      Р.створити_список = РМв1_створити_список;
      Р.створити_словник = РМв1_створити_словник;
      Р.створити_байти = РМв1_створити_байти;
      Р.створити_байти_без_копіювання = РМв1_створити_байти_без_копіювання;
      Р.створити_модуль = РМв1_створити_модуль;
      Р.створити_ресурс = РМв1_створити_ресурс;
      Р.створити_тип = РМв1_створити_тип;
      Р.створити_параметр = РМв1_створити_параметр;
      Р.предмет_додати = РМв1_предмет_додати;
      Р.предмет_відняти = РМв1_предмет_відняти;
      Р.предмет_помножити = РМв1_предмет_помножити;
      Р.предмет_поділити = РМв1_предмет_поділити;
      Р.предмет_остача = РМв1_предмет_остача;
      Р.предмет_неповна_частка = РМв1_предмет_неповна_частка;
      Р.предмет_степінь = РМв1_предмет_степінь;
      Р.предмет_зсунути_вліво = РМв1_предмет_зсунути_вліво;
      Р.предмет_зсунути_вправо = РМв1_предмет_зсунути_вправо;
      Р.предмет_беззнаковий_зсув_вправо = РМв1_предмет_беззнаковий_зсув_вправо;
      Р.предмет_двійкове_і = РМв1_предмет_двійкове_і;
      Р.предмет_двійкове_або = РМв1_предмет_двійкове_або;
      Р.предмет_двійкове_виключне_або = РМв1_предмет_двійкове_виключне_або;
      Р.предмет_двійкове_заперечення = РМв1_предмет_двійкове_заперечення;
      Р.предмет_менше = РМв1_предмет_менше;
      Р.предмет_більше = РМв1_предмет_більше;
      Р.предмет_містить = РМв1_предмет_містить;
      Р.предмет_числова_негація = РМв1_предмет_числова_негація;
      Р.предмет_отримати_число = РМв1_предмет_отримати_число;
      Р.предмет_отримати_текст = РМв1_предмет_отримати_текст;
      Р.предмет_отримати_юнікод = РМв1_предмет_отримати_юнікод;
      Р.предмет_отримати_перебір = РМв1_предмет_отримати_перебір;
      Р.предмет_отримати_діапазон = РМв1_предмет_отримати_діапазон;
      Р.перевірити_чи_предмет_є_дією = РМв1_перевірити_чи_предмет_є_дією;
      Р.перевірити_чи_предмет_є_числом = РМв1_перевірити_чи_предмет_є_числом;
      Р.перевірити_чи_предмет_є_текстом = РМв1_перевірити_чи_предмет_є_текстом;
      Р.перевірити_чи_предмет_є_юнікодом = РМв1_перевірити_чи_предмет_є_юнікодом;
      Р.перевірити_чи_предмет_є_списком = РМв1_перевірити_чи_предмет_є_списком;
      Р.перевірити_чи_предмет_є_словником = РМв1_перевірити_чи_предмет_є_словником;
      Р.перевірити_чи_предмет_є_байтами = РМв1_перевірити_чи_предмет_є_байтами;
      Р.перевірити_чи_предмет_є_модулем = РМв1_перевірити_чи_предмет_є_модулем;
      Р.перевірити_чи_предмет_є_ресурсом = РМв1_перевірити_чи_предмет_є_ресурсом;
      Р.перевірити_чи_предмет_є_типом = РМв1_перевірити_чи_предмет_є_типом;
      Р.перевірити_чи_предмет_є_параметром = РМв1_перевірити_чи_предмет_є_параметром;
      Р.отримати_значення_числа = РМв1_отримати_значення_числа;
      Р.отримати_значення_тексту = РМв1_отримати_значення_тексту;
      Р.отримати_копію_значення_тексту = РМв1_отримати_копію_значення_тексту;
      Р.отримати_значення_юнікоду = РМв1_отримати_значення_юнікоду;
      Р.отримати_копію_значення_юнікоду = РМв1_отримати_копію_значення_юнікоду;
      Р.отримати_копію_значення_юнікоду_як_ю8 = РМв1_отримати_копію_значення_юнікоду_як_ю8;
      Р.отримати_копію_елементів_списку = РМв1_отримати_копію_елементів_списку;
      Р.отримати_копію_елементів_словника = РМв1_отримати_копію_елементів_словника;
      Р.отримати_дані_ресурсу = РМв1_отримати_дані_ресурсу;
      Р.отримати_значення_байтів = РМв1_отримати_значення_байтів;
      Р.отримати_копію_значення_байтів = РМв1_отримати_копію_значення_байтів;
      ціль результат = дія_завантаження_РМв1(Р);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути результат як адреса<Предмет>;
      }
      ціль результат_створення_розширення = створити_розширення(обчислювач, Р, результат як адреса<Предмет>, відклик_перед_знищенням_предмета_розширення);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        звільнити(обчислювач, Р);
      }
      вернути результат_створення_розширення;
    }
  }
}