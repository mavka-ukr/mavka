взяти визначення ./перекладач;
взяти визначення біб/КД;

секція мавка {
  секція перекладач {
    дія отримати_оброблену_копію_ю8_тексту(М: адреса<Машина>, значення_ю8: ю8, вихід: адреса<ю8>): логічне {
      змінна розмір_обробленого_значення_ю8: позитивне = 0;
      змінна дані_обробленого_значення_ю8 = виділити_памʼять<п8>(М, значення_ю8.розмір);
      змінна п: позитивне = 0;
      поки п < значення_ю8.розмір {
        змінна символ = значення_ю8.дані[п];
        змінна розмір_символа = розбирач::визначити_розмір_символа_юнікоду(символ);
        якщо розмір_символа == 1 {
          якщо символ == розбирач::ЮНІКОД_ОБЕРНЕНА_ПОХИЛА {
            якщо (п + 1) < значення_ю8.розмір {
              змінна наступний_символ = значення_ю8.дані[п + 1];
              змінна розмір_наступного_символа = розбирач::визначити_розмір_символа_юнікоду(наступний_символ);
              якщо розмір_наступного_символа == 1 {
                якщо наступний_символ == розбирач::ЮНІКОД_ОБЕРНЕНА_ПОХИЛА {
                  дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = розбирач::ЮНІКОД_ОБЕРНЕНА_ПОХИЛА;
                  розмір_обробленого_значення_ю8 += 1;
                  п += 1;
                } інакше якщо наступний_символ == розбирач::ЮНІКОД_ДВОЛАПКА {
                  дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = розбирач::ЮНІКОД_ДВОЛАПКА;
                  розмір_обробленого_значення_ю8 += 1;
                  п += 1;
                } інакше якщо наступний_символ == розбирач::ЮНІКОД_ЛАПКА {
                  дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = розбирач::ЮНІКОД_ЛАПКА;
                  розмір_обробленого_значення_ю8 += 1;
                  п += 1;
                } інакше якщо наступний_символ == розбирач::ЮНІКОД_англійська_ен {
                  дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = розбирач::ЮНІКОД_РОЗРИВ;
                  розмір_обробленого_значення_ю8 += 1;
                  п += 1;
                } інакше {
                  дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
                  розмір_обробленого_значення_ю8 += 1;
                }
              } інакше якщо розмір_наступного_символа == 2 {
                якщо (п + 2) < значення_ю8.розмір {
                  // р
                  якщо значення_ю8.дані[п + 1] == 209 {
                    якщо значення_ю8.дані[п + 2] == 128 {
                      дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = розбирач::ЮНІКОД_РОЗРИВ;
                      розмір_обробленого_значення_ю8 += 1;
                      п += 1;
                      п += 1;
                    } інакше {
                      дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
                      розмір_обробленого_значення_ю8 += 1;
                    }
                  } інакше {
                    дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
                    розмір_обробленого_значення_ю8 += 1;
                  }
                } інакше {
                  дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
                  розмір_обробленого_значення_ю8 += 1;
                }
              } інакше {
                дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
                розмір_обробленого_значення_ю8 += 1;
              }
            } інакше {
              дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
              розмір_обробленого_значення_ю8 += 1;
            }
          } інакше {
            дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
            розмір_обробленого_значення_ю8 += 1;
          }
        } інакше якщо розмір_символа == 2 {
          дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
          розмір_обробленого_значення_ю8 += 1;
          п += 1;
          дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
          розмір_обробленого_значення_ю8 += 1;
        } інакше якщо розмір_символа == 3 {
          дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
          розмір_обробленого_значення_ю8 += 1;
          п += 1;
          дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
          розмір_обробленого_значення_ю8 += 1;
          п += 1;
          дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
          розмір_обробленого_значення_ю8 += 1;
        } інакше якщо розмір_символа == 4 {
          дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
          розмір_обробленого_значення_ю8 += 1;
          п += 1;
          дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
          розмір_обробленого_значення_ю8 += 1;
          п += 1;
          дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
          розмір_обробленого_значення_ю8 += 1;
          п += 1;
          дані_обробленого_значення_ю8[розмір_обробленого_значення_ю8] = значення_ю8.дані[п];
          розмір_обробленого_значення_ю8 += 1;
        }
        п += 1;
      }
      вихід::вміст = ю8 {
        розмір_обробленого_значення_ю8,
        дані_обробленого_значення_ю8
      };
      вернути так;
    }
  }
}

секція мавка {
  секція перекладач {
    дія копія_т8(М: адреса<Машина>, значення: т8): т8 {
      змінна результат = т8 { 0, пусто };
      якщо не виділити_копію_т8(М, значення, результат::адреса) {
        // потім: помилка
      }
      вернути результат;
    }
  }
}

дія перевірити_чи_ю8_починається_на(значення: ю8, починається_на: ю8, п: адреса<позитивне>): логічне {
  змінна пп: позитивне = 0;
  поки пп < починається_на.розмір {
    змінна ппп = п::вміст + пп;
    якщо ппп >= значення.розмір {
      вернути ні;
    }
    якщо значення.дані[ппп] != починається_на.дані[пп] {
      вернути ні;
    }
    пп += 1;
  }
  п::вміст = п::вміст + пп - 1;
  вернути так;
}

дія розібрати_число_з_ю8(значення: ю8, вихід: адреса<д64>): логічне {
  змінна відʼємне = ні;
  змінна п: позитивне = 0;
  якщо значення.дані[п] == 45 {
    відʼємне = так;
    п += 1;
  }
  якщо перевірити_чи_ю8_починається_на(значення, ю8"0д", п::адреса) {
    п += 1;
    змінна значення_0д: ц64 = 0;
    поки п < значення.розмір {
      значення_0д *= 2;
      якщо значення.дані[п] == 48 {
      } інакше якщо значення.дані[п] == 49 {
        значення_0д += 1;
      } інакше {
        вернути ні;
      }
      п += 1;
    }
    якщо відʼємне {
      вихід::вміст = д64(ц64(0) - значення_0д);
      вернути так;
    }
    вихід::вміст = д64(значення_0д);
    вернути так;
  }
  якщо перевірити_чи_ю8_починається_на(значення, ю8"0ш", п::адреса) {
    п += 1;
    змінна значення_0ш: ц64 = 0;
    поки п < значення.розмір {
      змінна с: п8 = 0;
      якщо перевірити_чи_ю8_починається_на(значення, ю8"0", п::адреса) {
        с = 0;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"1", п::адреса) {
        с = 1;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"2", п::адреса) {
        с = 2;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"3", п::адреса) {
        с = 3;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"4", п::адреса) {
        с = 4;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"5", п::адреса) {
        с = 5;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"6", п::адреса) {
        с = 6;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"7", п::адреса) {
        с = 7;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"8", п::адреса) {
        с = 8;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"9", п::адреса) {
        с = 9;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"А", п::адреса) {
        с = 10;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"Б", п::адреса) {
        с = 11;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"В", п::адреса) {
        с = 12;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"Г", п::адреса) {
        с = 13;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"Д", п::адреса) {
        с = 14;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"Е", п::адреса) {
        с = 15;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"а", п::адреса) {
        с = 10;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"б", п::адреса) {
        с = 11;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"в", п::адреса) {
        с = 12;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"г", п::адреса) {
        с = 13;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"д", п::адреса) {
        с = 14;
      } інакше якщо перевірити_чи_ю8_починається_на(значення, ю8"е", п::адреса) {
        с = 15;
      } інакше {
        вернути ні;
      }
      значення_0ш = (значення_0ш << 4) | (ц64(с) & 15);
      п += 1;
    }
    якщо відʼємне {
      вихід::вміст = д64(ц64(0) - значення_0ш);
      вернути так;
    }
    вихід::вміст = д64(значення_0ш);
    вернути так;
  }
  змінна результат: д64 = 0;
  змінна символ_: п8 = значення.дані[0];
  поки п < значення.розмір {
    символ_ = значення.дані[п];
    якщо символ_ == 48 { // 0
      результат = результат * 10;
    } інакше якщо символ_ == 49 { // 1
      результат = результат * 10 + 1;
    } інакше якщо символ_ == 50 { // 2
      результат = результат * 10 + 2;
    } інакше якщо символ_ == 51 { // 3
      результат = результат * 10 + 3;
    } інакше якщо символ_ == 52 { // 4
      результат = результат * 10 + 4;
    } інакше якщо символ_ == 53 { // 5
      результат = результат * 10 + 5;
    } інакше якщо символ_ == 54 { // 6
      результат = результат * 10 + 6;
    } інакше якщо символ_ == 55 { // 7
      результат = результат * 10 + 7;
    } інакше якщо символ_ == 56 { // 8
      результат = результат * 10 + 8;
    } інакше якщо символ_ == 57 { // 9
      результат = результат * 10 + 9;
    } інакше якщо символ_ == 95 { // _
      // ігноруємо
    } інакше якщо символ_ == 46 { // .
      п += 1;
      символ_ = значення.дані[п];
      змінна дробна_частина: д64 = 0;
      змінна дільник: д64 = 1;
      поки п < значення.розмір {
        символ_ = значення.дані[п];
        якщо символ_ == 48 { // 0
          дробна_частина = дробна_частина * 10;
        } інакше якщо символ_ == 49 { // 1
          дробна_частина = дробна_частина * 10 + 1;
        } інакше якщо символ_ == 50 { // 2
          дробна_частина = дробна_частина * 10 + 2;
        } інакше якщо символ_ == 51 { // 3
          дробна_частина = дробна_частина * 10 + 3;
        } інакше якщо символ_ == 52 { // 4
          дробна_частина = дробна_частина * 10 + 4;
        } інакше якщо символ_ == 53 { // 5
          дробна_частина = дробна_частина * 10 + 5;
        } інакше якщо символ_ == 54 { // 6
          дробна_частина = дробна_частина * 10 + 6;
        } інакше якщо символ_ == 55 { // 7
          дробна_частина = дробна_частина * 10 + 7;
        } інакше якщо символ_ == 56 { // 8
          дробна_частина = дробна_частина * 10 + 8;
        } інакше якщо символ_ == 57 { // 9
          дробна_частина = дробна_частина * 10 + 9;
        } інакше якщо символ_ == 95 { // _
          // ігноруємо
        } інакше {
          вернути ні;
        }
        п += 1;
        дільник = дільник * 10;
      }
      результат = результат + дробна_частина / дільник;
      вихід::вміст = результат;
      вернути так;
    } інакше {
      вернути ні;
    }
    п += 1;
  }
  вихід::вміст = результат;
  вернути так;
}

секція мавка {
  секція перекладач {
    дія покласти_константу_назви(М: адреса<Машина>, код: адреса<Код>, значення: т8): позитивне {
      покласти_в_накопичувач<адреса<Предмет>>(
        М,
        код.накопичувач_констант::адреса,
        створити_предмет_тексту(М, значення) як адреса<Предмет>
      );
      вернути код.накопичувач_констант.розмір - 1;
    }

    дія позиція_назви_з_ю8(М: адреса<Машина>, код: адреса<Код>, значення: ю8): позитивне {
      змінна значення_т8 = т8 { 0, пусто };
      якщо перекодувати_ю8_в_т8(М, значення, значення_т8::адреса, ні) == ні {
        // потім: помилка
      }
      змінна позиція_константи = покласти_константу_назви(М, код, значення_т8);
      звільнити_памʼять(М, значення_т8.дані);
      вернути позиція_константи;
    }

    дія покласти_константу_числа(М: адреса<Машина>, код: адреса<Код>, значення: д64): позитивне {
      покласти_в_накопичувач<адреса<Предмет>>(
        М,
        код.накопичувач_констант::адреса,
        створити_предмет_числа(М, значення) як адреса<Предмет>
      );
      вернути код.накопичувач_констант.розмір - 1;
    }

    дія покласти_константу_тексту(М: адреса<Машина>, код: адреса<Код>, значення: т8): позитивне {
      покласти_в_накопичувач<адреса<Предмет>>(
        М,
        код.накопичувач_констант::адреса,
        створити_предмет_тексту(М, значення) як адреса<Предмет>
      );
      вернути код.накопичувач_констант.розмір - 1;
    }

    дія покласти_константу_юнікоду8(М: адреса<Машина>, код: адреса<Код>, значення: ю8): позитивне {
      покласти_в_накопичувач<адреса<Предмет>>(
        М,
        код.накопичувач_констант::адреса,
        створити_предмет_юнікоду_з_ю8(М, значення) як адреса<Предмет>
      );
      вернути код.накопичувач_констант.розмір - 1;
    }

    дія покласти_константу_коду(М: адреса<Машина>, код: адреса<Код>, значення: адреса<Код>): позитивне {
      покласти_в_накопичувач<адреса<Предмет>>(
        М,
        код.накопичувач_констант::адреса,
        створити_предмет_коду(
          М,
          пусто,
          Послідовність<адреса<Предмет>> { значення.накопичувач_констант.розмір, значення.накопичувач_констант.дані },
          створити_предмет_байтів_без_копіювання(М, значення.будівельник_вказівок.вказівки.розмір, значення.будівельник_вказівок.вказівки.дані)
        ) як адреса<Предмет>
      );
      вернути код.накопичувач_констант.розмір - 1;
    }

    дія перекласти_гілку_в_МаМа(М: адреса<Машина>, контекст: адреса<КонтекстПерекладу>, код: адреса<Код>, елемент: адреса<розбирач::Гілка>, вихід_помилки: адреса<ПомилкаПерекладуВМаМа>): логічне {
      змінна результат = так;

      змінна рядок = розбирач::отримати_рядок_з_місцезнаходження(
        контекст.значення_ю8,
        контекст.слова,
        елемент.місцезнаходження
      );

      якщо елемент.вид == розбирач::ВидГілкиЗвернутись {
        змінна дані = елемент.дані як розбирач::ДаніГілкиЗвернутись;

        змінна значення_ідентифікатора = розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор);

        якщо перевірити_чи_ю8_рівні(значення_ідентифікатора, ю8"я") {
          В1::покласти_вказівку_ПокластиЯ(М, код.будівельник_вказівок::адреса, рядок);
        } інакше якщо перевірити_чи_ю8_рівні(значення_ідентифікатора, ю8"так") {
          В1::покласти_вказівку_ПокластиТак(М, код.будівельник_вказівок::адреса, рядок);
        } інакше якщо перевірити_чи_ю8_рівні(значення_ідентифікатора, ю8"ні") {
          В1::покласти_вказівку_ПокластиНі(М, код.будівельник_вказівок::адреса, рядок);
        } інакше якщо перевірити_чи_ю8_рівні(значення_ідентифікатора, ю8"пусто") {
          В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
        } інакше якщо перевірити_чи_ю8_рівні(значення_ідентифікатора, ю8"__ФАЙЛ_ЮНІКОД__") {
//          змінна шлях_до_файлу_мавки = код.шлях_до_файлу як адреса<Шлях>;
//          змінна предмет_юнікоду = виділити_предмет_юнікоду_з_ю8(М, шлях_до_файлу_мавки.значення);
//          змінна позиція_константи = покласти_константу(М, предмет_юнікоду як адреса<Предмет>);
//          В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_константи);
        } інакше якщо перевірити_чи_ю8_рівні(значення_ідентифікатора, ю8"__ПАПКА_ЮНІКОД__") {
//          змінна шлях_до_папки = ю8 { 0, пусто };
//          якщо система::отримати_абсолютний_батьківський_шлях(М, код.шлях_до_файлу, шлях_до_папки::адреса) == 0 {
//            ПОМЕРТИ(М, ю8"Не вдалося отримати батьківську директорію");
//          }
//          змінна предмет_юнікоду = виділити_предмет_юнікоду_з_ю8(М, шлях_до_папки);
//          звільнити_памʼять(М, шлях_до_папки.дані);
//          змінна позиція_константи = покласти_константу(М, предмет_юнікоду як адреса<Предмет>);
//          В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_константи);
        } інакше якщо перевірити_чи_ю8_рівні(значення_ідентифікатора, ю8"__РЯДОК__") {
//          змінна предмет_числа = виділити_предмет_числа(М, д64(рядок));
//          змінна позиція_константи = покласти_константу(М, предмет_числа як адреса<Предмет>);
//          В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_константи);
        } інакше якщо перевірити_чи_ю8_рівні(значення_ідентифікатора, ю8"__СТОВПЕЦЬ__") {
//          змінна предмет_числа = виділити_предмет_числа(М, д64(розбирач::отримати_стовпець_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження)));
//          змінна позиція_константи = покласти_константу(М, предмет_числа як адреса<Предмет>);
//          В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_константи);
        } інакше {
          змінна позиція_назви = позиція_назви_з_ю8(М, код, значення_ідентифікатора);
          В1::покласти_вказівку_Звернутись(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
        }

        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиОтримати {
        змінна дані = елемент.дані як розбирач::ДаніГілкиОтримати;
        змінна успіх_компіляції_предмета = перекласти_гілку_в_МаМа(М, контекст, код, дані.предмет, вихід_помилки);
        якщо успіх_компіляції_предмета == ні {
          вернути успіх_компіляції_предмета;
        }
        змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
        В1::покласти_вказівку_ОтриматиВластивість(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);

        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиОтриматиЕлемент {
        змінна дані = елемент.дані як розбирач::ДаніГілкиОтриматиЕлемент;
        змінна успіх_компіляції_предмета = перекласти_гілку_в_МаМа(М, контекст, код, дані.предмет, вихід_помилки);
        якщо успіх_компіляції_предмета == ні {
          вернути успіх_компіляції_предмета;
        }
        змінна успіх_компіляції_ключа = перекласти_гілку_в_МаМа(М, контекст, код, дані.ключ, вихід_помилки);
        якщо успіх_компіляції_ключа == ні {
          вернути успіх_компіляції_ключа;
        }
        В1::покласти_вказівку_ОтриматиЕлемент(М, код.будівельник_вказівок::адреса, рядок);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиВиконати {
        змінна дані = елемент.дані як розбирач::ДаніГілкиВиконати;

        якщо дані.предмет.вид == розбирач::ВидГілкиОтримати {
          змінна дані_отримання = дані.предмет.дані як розбирач::ДаніГілкиОтримати;
          змінна успіх_компіляції_предмета = перекласти_гілку_в_МаМа(М, контекст, код, дані_отримання.предмет, вихід_помилки);
          якщо успіх_компіляції_предмета == ні {
            вернути успіх_компіляції_предмета;
          }
          змінна позиція_назви_прохання = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані_отримання.ідентифікатор));
          В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_прохання);
        } інакше {
          змінна успіх_компіляції_предмета = перекласти_гілку_в_МаМа(М, контекст, код, дані.предмет, вихід_помилки);
          якщо успіх_компіляції_предмета == ні {
            вернути успіх_компіляції_предмета;
          }
        }
        змінна кількість_аргументів_без_назви: позитивне = 0;
        змінна кількість_аргументів_з_назвою: позитивне = 0;
        змінна п: позитивне = 0;
        поки п < дані.кількість_аргументів {
          змінна аргумент = дані.аргументи[п];
          змінна рядок_аргумента = розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, аргумент.місцезнаходження);
          якщо аргумент.ідентифікатор.заповнено == позитивне(так) {
            змінна позиція_назви_аргумента = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, аргумент.ідентифікатор.значення));
            В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок_аргумента, позиція_назви_аргумента);
            змінна успіх_компіляції_аргумента = перекласти_гілку_в_МаМа(М, контекст, код, аргумент.значення, вихід_помилки);
            якщо успіх_компіляції_аргумента == ні {
              вернути успіх_компіляції_аргумента;
            }
            кількість_аргументів_з_назвою += 1;
          } інакше {
            якщо кількість_аргументів_з_назвою > 0 {
              вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
                повідомлення = копія_т8(М, "Іменовані аргументи не можуть йти перед позиційними"),
                позиція_слова = 0
              };
              вернути ні;
            }
            змінна успіх_компіляції_аргумента = перекласти_гілку_в_МаМа(М, контекст, код, аргумент.значення, вихід_помилки);
            якщо успіх_компіляції_аргумента == ні {
              вернути успіх_компіляції_аргумента;
            }
            кількість_аргументів_без_назви += 1;
          }
          п += 1;
        }
        якщо дані.предмет.вид == розбирач::ВидГілкиОтримати {
          В1::покласти_вказівку_ВиконатиВластивість(М, код.будівельник_вказівок::адреса, рядок, кількість_аргументів_без_назви, кількість_аргументів_з_назвою);
        } інакше {
          В1::покласти_вказівку_Виконати(М, код.будівельник_вказівок::адреса, рядок, кількість_аргументів_без_назви, кількість_аргументів_з_назвою);
        }
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиДія {
        змінна дані = елемент.дані як розбирач::ДаніГілкиДія;
//        якщо дані.власна == позитивне(так) {
//          вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
//            повідомлення = копія_т8(М, "Неможливо перекласти дію"),
//            позиція_слова = 0
//          };
//          результат = ні;
//          стрибнути вихід;
//        }
        якщо дані.тривала == позитивне(так) {
          вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
            повідомлення = копія_т8(М, "Тривалі дії наразі не підтримуються"),
            позиція_слова = 0
          };
          результат = ні;
          стрибнути вихід;
        }
        якщо дані.ідентифікатор.заповнено == позитивне(так) {
          змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
          В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви); // назва
        } інакше {
          В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок); // назва
        }
        змінна п: позитивне = 0;
        поки п < дані.кількість_параметрів {
          змінна параметр = дані.параметри[п];
          змінна позиція_назви_параметра = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, параметр.ідентифікатор));
          В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_параметра);
          якщо параметр.тип.заповнено == позитивне(так) {
            змінна птп: позитивне = 0;
            поки птп < параметр.тип.значення.кількість_гілок {
              змінна тип = параметр.тип.значення.гілки[птп];
              змінна успіх_компіляції_типу = перекласти_гілку_в_МаМа(М, контекст, код, тип, вихід_помилки);
              якщо успіх_компіляції_типу == ні {
                вернути успіх_компіляції_типу;
              }
              птп = птп + 1;
            }
            В1::покласти_вказівку_СтворитиТип(М, код.будівельник_вказівок::адреса, рядок, параметр.тип.значення.кількість_гілок);
          } інакше {
            В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
          }
          якщо параметр.значення != пусто {
            змінна код_значення_параметра = створити_код(М);
            змінна контекст_значення_параметра = створити_контекст(М, контекст.значення_ю8, контекст.слова);
            змінна успіх_перекладу_коду = перекласти_гілку_в_МаМа(М, контекст_значення_параметра, код_значення_параметра, параметр.значення, вихід_помилки);
            якщо успіх_перекладу_коду == ні {
              знищити_код(М, код_значення_параметра);
              знищити_контекст(М, контекст_значення_параметра);
              результат = ні;
              стрибнути вихід;
            }
            В1::покласти_вказівку_Вернути(М, код_значення_параметра.будівельник_вказівок::адреса, рядок);
            змінна позиція_коду_параметра = покласти_константу_коду(М, код, код_значення_параметра);
            В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_коду_параметра);
            звільнити(М, код_значення_параметра);
            знищити_контекст(М, контекст_значення_параметра);
          } інакше {
            В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
          }
          В1::покласти_вказівку_СтворитиПараметр(М, код.будівельник_вказівок::адреса, рядок);
          п = п + 1;
        }
        якщо дані.тип_результату.заповнено == позитивне(так) {
          змінна птп: позитивне = 0;
          поки птп < дані.тип_результату.значення.кількість_гілок {
            змінна тип = дані.тип_результату.значення.гілки[птп];
            змінна успіх_компіляції_типу = перекласти_гілку_в_МаМа(М, контекст, код, тип, вихід_помилки);
            якщо успіх_компіляції_типу == ні {
              вернути успіх_компіляції_типу;
            }
            птп = птп + 1;
          }
          В1::покласти_вказівку_СтворитиТип(М, код.будівельник_вказівок::адреса, рядок, дані.тип_результату.значення.кількість_гілок);
        } інакше {
          В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок); // тип результату
        }
        змінна код_дії = створити_код(М);
        змінна контекст_дії = створити_контекст(М, контекст.значення_ю8, контекст.слова);
        змінна успіх_перекладу_коду_дії = перекласти(М, контекст_дії, дані.тіло, так, код_дії, вихід_помилки);
        якщо успіх_перекладу_коду_дії == ні {
          знищити_код(М, код_дії);
          знищити_контекст(М, контекст_дії);
          результат = ні;
          стрибнути вихід;
        }
        змінна позиція_коду_дії = покласти_константу_коду(М, код, код_дії);
        В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_коду_дії); // код
        В1::покласти_вказівку_СтворитиДію(М, код.будівельник_вказівок::адреса, рядок, дані.кількість_параметрів);
        звільнити(М, код_дії);
        знищити_контекст(М, контекст_дії);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиСтруктура {
        змінна дані = елемент.дані як розбирач::ДаніГілкиСтруктура;
        якщо дані.ідентифікатор.заповнено == позитивне(так) {
          змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
          В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
        } інакше {
          В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
        }
        якщо дані.предок == пусто {
          В1::покласти_вказівку_ПокластиСтруктуруПредмет(М, код.будівельник_вказівок::адреса, рядок);
        } інакше {
          змінна успіх_компіляції_предка = перекласти_гілку_в_МаМа(М, контекст, код, дані.предок, вихід_помилки);
          якщо успіх_компіляції_предка == ні {
            вернути успіх_компіляції_предка;
          }
        }
        змінна п: позитивне = 0;
        поки п < дані.кількість_параметрів {
          змінна параметр = дані.параметри[п];
          змінна позиція_назви_параметра = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, параметр.ідентифікатор));
          В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_параметра);
          якщо параметр.тип.заповнено == позитивне(так) {
            змінна птп: позитивне = 0;
            поки птп < параметр.тип.значення.кількість_гілок {
              змінна тип = параметр.тип.значення.гілки[птп];
              змінна успіх_компіляції_типу = перекласти_гілку_в_МаМа(М, контекст, код, тип, вихід_помилки);
              якщо успіх_компіляції_типу == ні {
                вернути успіх_компіляції_типу;
              }
              птп = птп + 1;
            }
            В1::покласти_вказівку_СтворитиТип(М, код.будівельник_вказівок::адреса, рядок, параметр.тип.значення.кількість_гілок);
          } інакше {
            В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
          }
          якщо параметр.значення != пусто {
            змінна код_значення_параметра = створити_код(М);
            змінна контекст_значення_параметра = створити_контекст(М, контекст.значення_ю8, контекст.слова);
            змінна успіх_перекладу_коду = перекласти_гілку_в_МаМа(М, контекст_значення_параметра, код_значення_параметра, параметр.значення, вихід_помилки);
            якщо успіх_перекладу_коду == ні {
              знищити_код(М, код_значення_параметра);
              знищити_контекст(М, контекст_значення_параметра);
              результат = ні;
              стрибнути вихід;
            }
            В1::покласти_вказівку_Вернути(М, код_значення_параметра.будівельник_вказівок::адреса, рядок);
            змінна позиція_коду_параметра = покласти_константу_коду(М, код, код_значення_параметра);
            В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_коду_параметра);
            звільнити(М, код_значення_параметра);
            знищити_контекст(М, контекст_значення_параметра);
          } інакше {
            В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
          }
          В1::покласти_вказівку_СтворитиПараметр(М, код.будівельник_вказівок::адреса, рядок);
          п = п + 1;
        }
        В1::покласти_вказівку_СтворитиСтруктуру(М, код.будівельник_вказівок::адреса, рядок, дані.кількість_параметрів);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиЧисло {
        змінна дані = елемент.дані як розбирач::ДаніГілкиЧисло;
        змінна слово = контекст.слова.дані[дані.позиція_слова];
        змінна розібране_число: д64 = 0.0;
        якщо розібрати_число_з_ю8(розбирач::отримати_ю8_слова(контекст.значення_ю8, контекст.слова, слово), розібране_число::адреса) == ні {
          вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
            повідомлення = копія_т8(М, "Не вдалось розібрати число"),
            позиція_слова = 0
          };
          вернути ні;
        }
        змінна позиція_константи = покласти_константу_числа(М, код, розібране_число);
        В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_константи);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиТекст {
        змінна дані = елемент.дані як розбирач::ДаніГілкиТекст;
        змінна значення_тексту_ю8 = розбирач::отримати_ю8_тексту(контекст.значення_ю8, контекст.слова, елемент);
        змінна оброблене_значення_тексту_ю8 = ю8 { 0, пусто };
        якщо отримати_оброблену_копію_ю8_тексту(М, значення_тексту_ю8, оброблене_значення_тексту_ю8::адреса) == ні {
          вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
            повідомлення = копія_т8(М, "Не вдалось розібрати текст"),
            позиція_слова = 0
          };
          вернути ні;
        }
        змінна позиція_константи: позитивне = 0;
        якщо дані.ідентифікатор.заповнено == позитивне(ні) {
          якщо оброблене_значення_тексту_ю8.розмір == 0 {
            позиція_константи = покласти_константу_тексту(М, код, "");
          } інакше {
            змінна значення_т8 = т8 { 0, пусто };
            якщо перекодувати_ю8_в_т8(М, оброблене_значення_тексту_ю8, значення_т8::адреса, ні) == ні {
              звільнити_памʼять(М, оброблене_значення_тексту_ю8.дані);
              вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
                повідомлення = копія_т8(М, "Не вдалось отримати значення т8"),
                позиція_слова = 0
              };
              вернути ні;
            }
            позиція_константи = покласти_константу_тексту(М, код, значення_т8);
            звільнити_памʼять(М, значення_т8.дані);
          }
        } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення), ю8"ю") {
          позиція_константи = покласти_константу_юнікоду8(М, код, оброблене_значення_тексту_ю8);
        } інакше {
          звільнити_памʼять(М, оброблене_значення_тексту_ю8.дані);
          вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
            повідомлення = копія_т8(М, "Невідомий тип тексту"),
            позиція_слова = 0
          };
          вернути ні;
        }
        звільнити_памʼять(М, оброблене_значення_тексту_ю8.дані);
        В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_константи);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиЗбитийТекст {
        змінна дані = елемент.дані як розбирач::ДаніГілкиЗбитийТекст;
        змінна п: позитивне = 0;
        поки п < дані.кількість_гілок {
          змінна успіх_компіляції_значення = перекласти_гілку_в_МаМа(М, контекст, код, дані.гілки[п], вихід_помилки);
          якщо успіх_компіляції_значення == ні {
            вернути успіх_компіляції_значення;
          }
          п += 1;
        }
        якщо дані.ідентифікатор.заповнено == позитивне(ні) {
          В1::покласти_вказівку_ЗбитиТекст(М, код.будівельник_вказівок::адреса, рядок, дані.кількість_гілок);
        } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення), ю8"ю") {
          В1::покласти_вказівку_ЗбитиЮнікод(М, код.будівельник_вказівок::адреса, рядок, дані.кількість_гілок);
        } інакше {
          вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
            повідомлення = копія_т8(М, "Невідомий тип тексту"),
            позиція_слова = 0
          };
          вернути ні;
        }
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиСимвол {
        змінна дані = елемент.дані як розбирач::ДаніГілкиСимвол;
        змінна значення_символу_ю8 = розбирач::отримати_ю8_символу(контекст.значення_ю8, контекст.слова, елемент);
        змінна оброблене_значення_символу_ю8 = ю8 { 0, пусто };
        якщо отримати_оброблену_копію_ю8_тексту(М, значення_символу_ю8, оброблене_значення_символу_ю8::адреса) == ні {
          вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
            повідомлення = копія_т8(М, "Не вдалось розібрати символ"),
            позиція_слова = 0
          };
          вернути ні;
        }
        змінна позиція_константи: позитивне = 0;
        якщо дані.ідентифікатор.заповнено == позитивне(ні) {
          якщо оброблене_значення_символу_ю8.розмір == 0 {
            вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
              повідомлення = копія_т8(М, "Пустий символ"),
              позиція_слова = 0
            };
            звільнити_памʼять(М, оброблене_значення_символу_ю8.дані);
            вернути ні;
          } інакше {
            змінна значення_т8 = т8 { 0, пусто };
            якщо перекодувати_ю8_в_т8(М, оброблене_значення_символу_ю8, значення_т8::адреса, ні) == ні {
              вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
                повідомлення = копія_т8(М, "Не вдалось перекодувати в т8"),
                позиція_слова = 0
              };
              звільнити_памʼять(М, оброблене_значення_символу_ю8.дані);
              вернути ні;
            }
            якщо значення_т8.розмір > 1 {
              вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
                повідомлення = копія_т8(М, "Символ не один"),
                позиція_слова = 0
              };
              звільнити_памʼять(М, оброблене_значення_символу_ю8.дані);
              вернути ні;
            }
            позиція_константи = покласти_константу_числа(М, код, д64(значення_т8.дані[0]));
            звільнити_памʼять(М, значення_т8.дані);
          }
        } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення), ю8"ю") {
          змінна значення_ю32 = ю32 { 0, пусто };
          якщо перекодувати_ю8_в_ю32(М, оброблене_значення_символу_ю8, значення_ю32::адреса, ні) == ні {
            вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
              повідомлення = копія_т8(М, "Не вдалось перекодувати в ю32"),
              позиція_слова = 0
            };
            звільнити_памʼять(М, оброблене_значення_символу_ю8.дані);
            вернути ні;
          }
          якщо значення_ю32.розмір == 0 {
            вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
              повідомлення = копія_т8(М, "Пустий символ"),
              позиція_слова = 0
            };
            звільнити_памʼять(М, оброблене_значення_символу_ю8.дані);
            вернути ні;
          }
          якщо значення_ю32.розмір > 1 {
            вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
              повідомлення = копія_т8(М, "Символ не один"),
              позиція_слова = 0
            };
            звільнити_памʼять(М, оброблене_значення_символу_ю8.дані);
            вернути ні;
          }
          позиція_константи = покласти_константу_числа(М, код, д64(значення_ю32.дані[0]));
          звільнити_памʼять(М, значення_ю32.дані);
        } інакше {
          вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
            повідомлення = копія_т8(М, "Невідомий тип символа"),
            позиція_слова = 0
          };
          звільнити_памʼять(М, оброблене_значення_символу_ю8.дані);
          вернути ні;
        }
        звільнити_памʼять(М, оброблене_значення_символу_ю8.дані);
        В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_константи);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиОперація {
        змінна дані = елемент.дані як розбирач::ДаніГілкиОперація;
        змінна успіх_компіляції_ліво = перекласти_гілку_в_МаМа(М, контекст, код, дані.ліво, вихід_помилки);
        якщо успіх_компіляції_ліво == ні {
          вернути успіх_компіляції_ліво;
        }
        якщо дані.операція == розбирач::ВидОпераціїІ {
          змінна позиція_вказівки_стрибнути_якщо_ні = код.будівельник_вказівок.вказівки.розмір;
          В1::покласти_вказівку_СтрибнутиЯкщоНіЗалишивши(М, код.будівельник_вказівок::адреса, рядок, 0);
          В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          змінна успіх_компіляції_право = перекласти_гілку_в_МаМа(М, контекст, код, дані.право, вихід_помилки);
          якщо успіх_компіляції_право == ні {
            вернути успіх_компіляції_право;
          }
          В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_стрибнути_якщо_ні + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїАБО {
          змінна позиція_вказівки_стрибнути_якщо_так = код.будівельник_вказівок.вказівки.розмір;
          В1::покласти_вказівку_СтрибнутиЯкщоТакЗалишивши(М, код.будівельник_вказівок::адреса, рядок, 0);
          В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          змінна успіх_компіляції_право = перекласти_гілку_в_МаМа(М, контекст, код, дані.право, вихід_помилки);
          якщо успіх_компіляції_право == ні {
            вернути успіх_компіляції_право;
          }
          В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_стрибнути_якщо_так + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
          вернути так;
        }
        змінна успіх_компіляції_право = перекласти_гілку_в_МаМа(М, контекст, код, дані.право, вихід_помилки);
        якщо успіх_компіляції_право  == ні {
          вернути успіх_компіляції_право;
        }
        якщо дані.операція == розбирач::ВидОпераціїДодавання {
          В1::покласти_вказівку_Додати(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїВіднімання {
          В1::покласти_вказівку_Відняти(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїМноження {
          В1::покласти_вказівку_Помножити(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїДілення {
          В1::покласти_вказівку_Поділити(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїМодуль {
          В1::покласти_вказівку_ОтриматиОстачуДілення(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїДіленняНаціло {
          В1::покласти_вказівку_ОтриматиНеповнуЧасткуДілення(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїПіднесенняДоСтепеня {
          В1::покласти_вказівку_ПіднестиДоСтепеня(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїЗсувВліво {
          В1::покласти_вказівку_ЗсунутиВліво(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїЗсувВправо {
          В1::покласти_вказівку_ЗсунутиВправо(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїЗсувВправоЗнаковий {
          В1::покласти_вказівку_ЗсунутиВправоЗіЗаповненням(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїДІ {
          В1::покласти_вказівку_ДвійковеІ(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїДАБО {
          В1::покласти_вказівку_ДвійковеАБО(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїВАБО {
          В1::покласти_вказівку_ДвійковеВиключнеАБО(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїМенше {
          В1::покласти_вказівку_Менше(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїБільше {
          В1::покласти_вказівку_Більше(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїМеншеРівне {
          В1::покласти_вказівку_НеБільше(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїБільшеРівне {
          В1::покласти_вказівку_НеМенше(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїРівне {
          В1::покласти_вказівку_Рівно(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїНерівне {
          В1::покласти_вказівку_НеРівно(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїМістить {
          В1::покласти_вказівку_Містить(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїНеМістить {
          В1::покласти_вказівку_НеМістить(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїЄ {
          В1::покласти_вказівку_Є(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        } інакше якщо дані.операція == розбирач::ВидОпераціїНеЄ {
          В1::покласти_вказівку_НеЄ(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        }

        вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
          повідомлення = копія_т8(М, "Невідома операція"),
          позиція_слова = 0
        };
        вернути ні;
      }

      якщо елемент.вид == розбирач::ВидГілкиЗначенняЯкщо {
        змінна дані = елемент.дані як розбирач::ДаніГілкиЗначенняЯкщо;
        змінна успіх_компіляції_умови = перекласти_гілку_в_МаМа(М, контекст, код, дані.умова, вихід_помилки);
        якщо успіх_компіляції_умови == ні {
          вернути успіх_компіляції_умови;
        }
        змінна позиція_вказівки_стрибнути_якщо_ні = код.будівельник_вказівок.вказівки.розмір;
        В1::покласти_вказівку_СтрибнутиЯкщоНі(М, код.будівельник_вказівок::адреса, рядок, 0);
        змінна успіх_компіляції_так = перекласти_гілку_в_МаМа(М, контекст, код, дані.значення_так, вихід_помилки);
        якщо успіх_компіляції_так == ні {
          вернути успіх_компіляції_так;
        }
        змінна позиція_вказівки_виходу_з_так = код.будівельник_вказівок.вказівки.розмір;
        В1::покласти_вказівку_Стрибнути(М, код.будівельник_вказівок::адреса, рядок, 0);
        В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_стрибнути_якщо_ні + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
        змінна успіх_компіляції_ні = перекласти_гілку_в_МаМа(М, контекст, код, дані.значення_ні, вихід_помилки);
        якщо успіх_компіляції_ні == ні {
          вернути успіх_компіляції_ні;
        }
        В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_виходу_з_так + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиСамоОперація {
        змінна дані = елемент.дані як розбирач::ДаніГілкиСамоОперація;
        змінна успіх_компіляції_предмета = перекласти_гілку_в_МаМа(М, контекст, код, дані.предмет, вихід_помилки);
        якщо успіх_компіляції_предмета == ні {
          вернути успіх_компіляції_предмета;
        }
        якщо дані.операція == розбирач::ВидСамоОпераціїЛогічнеНі {
          В1::покласти_вказівку_Заперечити(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        }
        якщо дані.операція == розбирач::ВидСамоОпераціїДвійковеНі {
          В1::покласти_вказівку_ДвійковеНЕ(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        }
        якщо дані.операція == розбирач::ВидСамоОпераціїПлюс {
          В1::покласти_вказівку_Числове(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        }
        якщо дані.операція == розбирач::ВидСамоОпераціїМінус {
          В1::покласти_вказівку_Відʼємне(М, код.будівельник_вказівок::адреса, рядок);
          вернути так;
        }
        вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
          повідомлення = копія_т8(М, "Невідома операція"),
          позиція_слова = 0
        };
        вернути ні;
      }

      якщо елемент.вид == розбирач::ВидГілкиМодуль {
        змінна дані = елемент.дані як розбирач::ДаніГілкиМодуль;
        якщо дані.ідентифікатор.заповнено == позитивне(так) {
          змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
          В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
        } інакше {
          В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
        }
        змінна код_модуля = створити_код(М);
        змінна контекст_модуля = створити_контекст(М, контекст.значення_ю8, контекст.слова);
        змінна успіх_перекладу_коду_дії = перекласти(М, контекст_модуля, дані.тіло, ні, код_модуля, вихід_помилки);
        якщо успіх_перекладу_коду_дії == ні {
          знищити_код(М, код_модуля);
          знищити_контекст(М, контекст_модуля);
          результат = ні;
          стрибнути вихід;
        }
        змінна позиція_коду_дії = покласти_константу_коду(М, код, код_модуля);
        В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_коду_дії);
        В1::покласти_вказівку_СтворитиМодуль(М, код.будівельник_вказівок::адреса, рядок);
        звільнити(М, код_модуля);
        знищити_контекст(М, контекст_модуля);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиСписок {
        змінна дані = елемент.дані як розбирач::ДаніГілкиСписок;
        В1::покласти_вказівку_СтворитиСписок(М, код.будівельник_вказівок::адреса, рядок, дані.кількість_елементів);
        змінна п: позитивне = 0;
        поки п < дані.кількість_елементів {
          змінна елемент_списку = дані.елементи[п];
          змінна успіх_компіляції_елементу_списку = перекласти_гілку_в_МаМа(М, контекст, код, елемент_списку, вихід_помилки);
          якщо успіх_компіляції_елементу_списку == ні {
            вернути успіх_компіляції_елементу_списку;
          }
          В1::покласти_вказівку_ПокластиВСписок(М, код.будівельник_вказівок::адреса, рядок);
          п += 1;
        }
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиСловник {
        змінна дані = елемент.дані як розбирач::ДаніГілкиСловник;
        В1::покласти_вказівку_СтворитиСловник(М, код.будівельник_вказівок::адреса, рядок, дані.кількість_елементів);
        змінна п: позитивне = 0;
        поки п < дані.кількість_елементів {
          змінна елемент_словника = дані.елементи[п];
          змінна успіх_компіляції_ключа_словника_списку = перекласти_гілку_в_МаМа(М, контекст, код, елемент_словника.ключ, вихід_помилки);
          якщо успіх_компіляції_ключа_словника_списку == ні {
            вернути успіх_компіляції_ключа_словника_списку;
          }
          змінна успіх_компіляції_значення_словника_списку = перекласти_гілку_в_МаМа(М, контекст, код, елемент_словника.значення, вихід_помилки);
          якщо успіх_компіляції_значення_словника_списку == ні {
            вернути успіх_компіляції_значення_словника_списку;
          }
          В1::покласти_вказівку_ПокластиВСловник(М, код.будівельник_вказівок::адреса, рядок);
          п += 1;
        }
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиВидалити {
        змінна дані = елемент.дані як розбирач::ДаніГілкиВидалити;
        змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
        В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
        В1::покласти_вказівку_Видалити(М, код.будівельник_вказівок::адреса, рядок);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиВидалитиВластивість {
        змінна дані = елемент.дані як розбирач::ДаніГілкиВидалитиВластивість;
        змінна успіх_компіляції_предмета = перекласти_гілку_в_МаМа(М, контекст, код, дані.предмет, вихід_помилки);
        якщо успіх_компіляції_предмета == ні {
          вернути успіх_компіляції_предмета;
        }
        змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
        В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
        В1::покласти_вказівку_ВидалитиВластивість(М, код.будівельник_вказівок::адреса, рядок);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиВидалитиЕлемент {
        змінна дані = елемент.дані як розбирач::ДаніГілкиВидалитиЕлемент;
        змінна успіх_компіляції_предмета = перекласти_гілку_в_МаМа(М, контекст, код, дані.предмет, вихід_помилки);
        якщо успіх_компіляції_предмета == ні {
          вернути успіх_компіляції_предмета;
        }
        змінна успіх_компіляції_ключа = перекласти_гілку_в_МаМа(М, контекст, код, дані.ключ, вихід_помилки);
        якщо успіх_компіляції_ключа == ні {
          вернути успіх_компіляції_ключа;
        }
        В1::покласти_вказівку_ВидалитиЕлемент(М, код.будівельник_вказівок::адреса, рядок);
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиДіапазон {
        змінна дані = елемент.дані як розбирач::ДаніГілкиДіапазон;
        змінна успіх_компіляції_від = перекласти_гілку_в_МаМа(М, контекст, код, дані.від, вихід_помилки);
        якщо успіх_компіляції_від == ні {
          вернути успіх_компіляції_від;
        }
        змінна успіх_компіляції_до = перекласти_гілку_в_МаМа(М, контекст, код, дані.до, вихід_помилки);
        якщо успіх_компіляції_до == ні {
          вернути успіх_компіляції_до;
        }
        В1::покласти_вказівку_СтворитиДіапазон(М, код.будівельник_вказівок::адреса, рядок, логічне(дані.включно));
        вернути так;
      }

      якщо елемент.вид == розбирач::ВидГілкиЧекати {
        вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
          повідомлення = копія_т8(М, "Інструкція чекати наразі не підтримується"),
          позиція_слова = 0
        };
        вернути ні;
      }

      вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
        повідомлення = копія_т8(М, "Виявлено невідомий вид гілки"),
        позиція_слова = 0
      };
      вернути ні;

    вихід:
      вернути результат;
    }

    місцева дія створити_код(М: адреса<Машина>): адреса<Код> {
      змінна код = виділити<Код>(М);
      код.накопичувач_констант = зробити_накопичувач<адреса<Предмет>>(М);
      код.будівельник_вказівок = БудівельникВказівок {
        вказівки = зробити_накопичувач<п8>(М)
      };
      вернути код;
    }

    місцева дія знищити_код(М: адреса<Машина>, код: адреса<Код>) {
      звільнити_памʼять(М, код.накопичувач_констант.дані);
      звільнити_памʼять(М, код.будівельник_вказівок.вказівки.дані);
      звільнити(М, код);
    }

    місцева дія створити_контекст(М: адреса<Машина>, значення_ю8: ю8, слова: розбирач::Слова): адреса<КонтекстПерекладу> {
      змінна контекст = виділити<КонтекстПерекладу>(М);
      контекст.значення_ю8 = значення_ю8;
      контекст.слова = слова;
      вернути контекст;
    }

    місцева дія знищити_контекст(М: адреса<Машина>, контекст: адреса<КонтекстПерекладу>) {
      звільнити(М, контекст);
    }

    місцева дія перекласти(М: адреса<Машина>, контекст: адреса<КонтекстПерекладу>, гілки: розбирач::Гілки, вернути_в_кінці: логічне, код: адреса<Код>, вихід_помилки: адреса<ПомилкаПерекладуВМаМа>): логічне {
      // потім: обробляти вернути_в_кінці в кожному елементі
      змінна пе: позитивне = 0;
      поки пе < гілки.розмір {
        змінна елемент = гілки.дані[пе];
        змінна рядок = розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження);
        якщо елемент.вид == розбирач::ВидГілкиНіщо {
          вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
            повідомлення = копія_т8(М, "Виявлено гілку Ніщо"),
            позиція_слова = 0
          };
          вернути ні;
        } інакше якщо елемент.вид == розбирач::ВидГілкиВизначити {
          змінна дані = елемент.дані як розбирач::ДаніГілкиВизначити;
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, дані.значення, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
          В1::покласти_вказівку_Визначити(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
        } інакше якщо елемент.вид == розбирач::ВидГілкиВизначитиЗзовні {
          змінна дані = елемент.дані як розбирач::ДаніГілкиВизначитиЗзовні;
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, дані.значення, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
          В1::покласти_вказівку_ВизначитиЗзовні(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
        } інакше якщо елемент.вид == розбирач::ВидГілкиЗвернутись {
          змінна дані = елемент.дані як розбирач::ДаніГілкиЗвернутись;
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиОтримати {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиОтриматиЕлемент {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиЗмінити {
          змінна дані = елемент.дані як розбирач::ДаніГілкиЗмінити;
          змінна успіх_компіляції_предмета = перекласти_гілку_в_МаМа(М, контекст, код, дані.предмет, вихід_помилки);
          якщо успіх_компіляції_предмета == ні {
            вернути успіх_компіляції_предмета;
          }
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, дані.значення, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
          В1::покласти_вказівку_ЗмінитиВластивість(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
        } інакше якщо елемент.вид == розбирач::ВидГілкиЗмінитиЕлемент {
          змінна дані = елемент.дані як розбирач::ДаніГілкиЗмінитиЕлемент;
          змінна успіх_компіляції_предмета = перекласти_гілку_в_МаМа(М, контекст, код, дані.предмет, вихід_помилки);
          якщо успіх_компіляції_предмета == ні {
            вернути успіх_компіляції_предмета;
          }
          змінна успіх_компіляції_позиції = перекласти_гілку_в_МаМа(М, контекст, код, дані.ключ, вихід_помилки);
          якщо успіх_компіляції_позиції == ні {
            вернути успіх_компіляції_позиції;
          }
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, дані.значення, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          В1::покласти_вказівку_ЗмінитиЕлемент(М, код.будівельник_вказівок::адреса, рядок);
        } інакше якщо елемент.вид == розбирач::ВидГілкиВиконати {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиДія {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          змінна дані = елемент.дані як розбирач::ДаніГілкиДія;
          якщо дані.ідентифікатор.заповнено == позитивне(ні) {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          } інакше {
            якщо дані.структура_ == пусто {
              змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
              В1::покласти_вказівку_Визначити(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
            } інакше {
              змінна успіх_компіляції_структури = перекласти_гілку_в_МаМа(М, контекст, код, дані.структура_, вихід_помилки);
              якщо успіх_компіляції_структури == ні {
                вернути успіх_компіляції_структури;
              }
              змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
              В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
              В1::покласти_вказівку_ЗаписатиМетод(М, код.будівельник_вказівок::адреса, рядок, логічне(дані.власна));
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиСтруктура {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          змінна дані = елемент.дані як розбирач::ДаніГілкиСтруктура;
          якщо дані.ідентифікатор.заповнено == позитивне(ні) {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          } інакше {
            змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
            В1::покласти_вказівку_Визначити(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиЧисло {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиТекст {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиЗбитийТекст {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиСимвол {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиОперація {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиЯкщо {
          змінна дані = елемент.дані як розбирач::ДаніГілкиЯкщо;
          змінна успіх_компіляції_умови = перекласти_гілку_в_МаМа(М, контекст, код, дані.умова, вихід_помилки);
          якщо успіх_компіляції_умови == ні {
            вернути успіх_компіляції_умови;
          }
          змінна позиція_вказівки_якщо_ні = код.будівельник_вказівок.вказівки.розмір;
          В1::покласти_вказівку_СтрибнутиЯкщоНі(М, код.будівельник_вказівок::адреса, рядок, 0);
          змінна контекст_якщо = створити_контекст(М, контекст.значення_ю8, контекст.слова);
          якщо дані.тіло.розмір != 0 {
            змінна успіх_компіляції_тіла = перекласти(М, контекст_якщо, дані.тіло, ні, код, вихід_помилки);
            якщо успіх_компіляції_тіла == ні {
              знищити_контекст(М, контекст_якщо);
              вернути успіх_компіляції_тіла;
            }
          }
          змінна позиція_вказівки_якщо_так = код.будівельник_вказівок.вказівки.розмір;
          В1::покласти_вказівку_Стрибнути(М, код.будівельник_вказівок::адреса, рядок, 0);
          В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_якщо_ні + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
          якщо дані.тіло_інакше.розмір != 0 {
            змінна успіх_компіляції_тіла_інакше = перекласти(М, контекст_якщо, дані.тіло_інакше, ні, код, вихід_помилки);
            якщо успіх_компіляції_тіла_інакше == ні {
              знищити_контекст(М, контекст_якщо);
              вернути успіх_компіляції_тіла_інакше;
            }
          }
          знищити_контекст(М, контекст_якщо);
          В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_якщо_так + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
        } інакше якщо елемент.вид == розбирач::ВидГілкиПоки {
          змінна дані = елемент.дані як розбирач::ДаніГілкиПоки;
          змінна позиція_вказівки_початку_поки = код.будівельник_вказівок.вказівки.розмір;
          змінна позиція_вказівки_якщо_ні: позитивне = 0;
          якщо дані.умова != пусто {
            змінна успіх_компіляції_умови = перекласти_гілку_в_МаМа(М, контекст, код, дані.умова, вихід_помилки);
            якщо успіх_компіляції_умови == ні {
              вернути успіх_компіляції_умови;
            }
            позиція_вказівки_якщо_ні = код.будівельник_вказівок.вказівки.розмір;
            В1::покласти_вказівку_СтрибнутиЯкщоНі(М, код.будівельник_вказівок::адреса, рядок, 0);
          }
          змінна контекст_поки = створити_контекст(М, контекст.значення_ю8, контекст.слова);
          змінна успіх_компіляції_тіла = перекласти(М, контекст_поки, дані.тіло, ні, код, вихід_помилки);
          якщо успіх_компіляції_тіла == ні {
            знищити_контекст(М, контекст_поки);
            вернути успіх_компіляції_тіла;
          }
          знищити_контекст(М, контекст_поки);
          В1::покласти_вказівку_Стрибнути(М, код.будівельник_вказівок::адреса, рядок, позиція_вказівки_початку_поки);
          якщо дані.умова != пусто {
            В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_якщо_ні + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиВернути {
          змінна дані = елемент.дані як розбирач::ДаніГілкиВернути;
          якщо дані.значення == пусто {
            В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
          } інакше {
            змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, дані.значення, вихід_помилки);
            якщо успіх_перекладу_елемента == ні {
              вернути успіх_перекладу_елемента;
            }
          }
          В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
        } інакше якщо елемент.вид == розбирач::ВидГілкиЗначенняЯкщо {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиСамоОперація {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиМодуль {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          змінна дані = елемент.дані як розбирач::ДаніГілкиМодуль;
          якщо дані.ідентифікатор.заповнено == позитивне(ні) {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          } інакше {
            змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
            В1::покласти_вказівку_Визначити(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиСписок {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиСловник {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиВзяти {
          змінна дані = елемент.дані як розбирач::ДаніГілкиВзяти;
          якщо дані.тип.заповнено == позитивне(так) {
            якщо контекст.слова.дані[дані.тип.значення.позиція_слова].вид == розбирач::ВидСловаМодуль {
              змінна позиція_назви_типу = позиція_назви_з_ю8(М, код, ю8"модуль");
              В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_типу);
            } інакше {
              змінна позиція_назви_типу = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.тип.значення));
              В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_типу);
            }
          } інакше {
            В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
          }
          змінна позиція_останьої_назви: позитивне = 0;
          змінна п: позитивне = 0;
          поки п < дані.довжина_шляху {
            змінна елемент_шляху = дані.шлях[п];
            змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент_шляху));
            В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
            якщо п == дані.довжина_шляху - 1 {
              позиція_останьої_назви = позиція_назви;
            }
            п += 1;
          }
          В1::покласти_вказівку_Взяти(М, код.будівельник_вказівок::адреса, рядок, дані.довжина_шляху);
          якщо дані.ідентифікатор_як.заповнено == позитивне(ні) {
            якщо дані.кількість_елементів == 0 {
              В1::покласти_вказівку_Визначити(М, код.будівельник_вказівок::адреса, рядок, позиція_останьої_назви);
            } інакше {
              змінна пе: позитивне = 0;
              поки пе < дані.кількість_елементів {
                змінна елемент = дані.елементи[пе];
                В1::покласти_вказівку_Дублювати(М, код.будівельник_вказівок::адреса, рядок);
                В1::покласти_вказівку_ОтриматиВластивість(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент.ідентифікатор)));
                якщо елемент.ідентифікатор_як.заповнено == позитивне(ні) {
                  В1::покласти_вказівку_Визначити(М, код.будівельник_вказівок::адреса, рядок,позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент.ідентифікатор)));
                } інакше {
                  В1::покласти_вказівку_Визначити(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент.ідентифікатор_як.значення)));
                }
                пе += 1;
              }
            }
          } інакше {
            В1::покласти_вказівку_Визначити(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор_як.значення)));
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиСпробувати {
          змінна дані = елемент.дані як розбирач::ДаніГілкиСпробувати;
          якщо дані.ідентифікатор_зловити.заповнено == позитивне(ні) {
            В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
          } інакше {
            змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор_зловити.значення));
            В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви);
          }
          змінна позиція_вказівки_почати_спробу = код.будівельник_вказівок.вказівки.розмір;
          В1::покласти_вказівку_ПочатиСпробу(М, код.будівельник_вказівок::адреса, рядок, 0);
          змінна успіх_компіляції_тіла = перекласти(М, контекст, дані.тіло, ні, код, вихід_помилки);
          якщо успіх_компіляції_тіла == ні {
            вернути успіх_компіляції_тіла;
          }
          змінна позиція_вказівки_закінчити_спробу = код.будівельник_вказівок.вказівки.розмір;
          В1::покласти_вказівку_ЗакінчитиСпробу(М, код.будівельник_вказівок::адреса, рядок, 0);
          В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_почати_спробу + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
          змінна успіх_компіляції_тіла_зловити = перекласти(М, контекст, дані.тіло_зловити, ні, код, вихід_помилки);
          якщо успіх_компіляції_тіла_зловити == ні {
            вернути успіх_компіляції_тіла_зловити;
          }
          В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_закінчити_спробу + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
        } інакше якщо елемент.вид == розбирач::ВидГілкиВпасти {
          змінна дані = елемент.дані як розбирач::ДаніГілкиВпасти;
          якщо дані.значення == пусто {
            В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
          } інакше {
            змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, дані.значення, вихід_помилки);
            якщо успіх_перекладу_елемента == ні {
              вернути успіх_перекладу_елемента;
            }
          }
          В1::покласти_вказівку_Впасти(М, код.будівельник_вказівок::адреса, рядок);
        } інакше якщо елемент.вид == розбирач::ВидГілкиДати {
          змінна дані = елемент.дані як розбирач::ДаніГілкиДати;
          змінна п: позитивне = 0;
          поки п < дані.кількість_елементів {
            змінна елемент = дані.елементи[п];
            змінна позиція_назви = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент.ідентифікатор));
            В1::покласти_вказівку_Звернутись(М, код.будівельник_вказівок::адреса, рядок, позиція_назви); // предмет
            якщо елемент.ідентифікатор_як.заповнено == позитивне(так) {
              змінна позиція_назви_як = позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент.ідентифікатор_як.значення));
              В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_як); // назва
            } інакше {
              В1::покласти_вказівку_ПокластиКонстанту(М, код.будівельник_вказівок::адреса, рядок, позиція_назви); // назва
            }
            В1::покласти_вказівку_Дати(М, код.будівельник_вказівок::адреса, рядок);
            п += 1;
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиПеребрати {
          змінна дані = елемент.дані як розбирач::ДаніГілкиПеребрати;
          змінна успіх_компіляції_предмета = перекласти_гілку_в_МаМа(М, контекст, код, дані.предмет, вихід_помилки);
          якщо успіх_компіляції_предмета == ні {
            вернути успіх_компіляції_предмета;
          }
          В1::покласти_вказівку_ОтриматиПеребір(М, код.будівельник_вказівок::адреса, рядок);
          змінна позиція_вказівки_початку_перебору = код.будівельник_вказівок.вказівки.розмір;
          В1::покласти_вказівку_ПеребратиДалі(М, код.будівельник_вказівок::адреса, рядок);
          змінна позиція_вказівки_якщо_ні = код.будівельник_вказівок.вказівки.розмір;
          В1::покласти_вказівку_СтрибнутиЯкщоНі(М, код.будівельник_вказівок::адреса, рядок, 0);
          В1::покласти_вказівку_Дублювати(М, код.будівельник_вказівок::адреса, рядок);
          В1::покласти_вказівку_ОтриматиВластивість(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_з_ю8(М, код, ю8"значення"));
          В1::покласти_вказівку_Визначити(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення)));
          змінна успіх_компіляції_тіла = перекласти(М, контекст, дані.тіло, ні, код, вихід_помилки);
          якщо успіх_компіляції_тіла == ні {
            вернути успіх_компіляції_тіла;
          }
          В1::покласти_вказівку_Стрибнути(М, код.будівельник_вказівок::адреса, рядок, позиція_вказівки_початку_перебору);
          В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_якщо_ні + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
          В1::покласти_вказівку_ПокластиПусто(М, код.будівельник_вказівок::адреса, рядок);
          В1::покласти_вказівку_Визначити(М, код.будівельник_вказівок::адреса, рядок, позиція_назви_з_ю8(М, код, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення)));
          В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
        } інакше якщо елемент.вид == розбирач::ВидГілкиЦикл {
          змінна дані = елемент.дані як розбирач::ДаніГілкиЦикл;
          змінна успіх_компіляції_старту = перекласти(М, контекст, дані.старт, ні, код, вихід_помилки);
          якщо успіх_компіляції_старту == ні {
            вернути успіх_компіляції_старту;
          }
          змінна позиція_вказівки_початку_циклу = код.будівельник_вказівок.вказівки.розмір;
          змінна позиція_вказівки_якщо_ні: позитивне = 0;
          якщо дані.умова != пусто {
            змінна успіх_компіляції_умови = перекласти_гілку_в_МаМа(М, контекст, код, дані.умова, вихід_помилки);
            якщо успіх_компіляції_умови == ні {
              вернути успіх_компіляції_умови;
            }
            позиція_вказівки_якщо_ні = код.будівельник_вказівок.вказівки.розмір;
            В1::покласти_вказівку_СтрибнутиЯкщоНі(М, код.будівельник_вказівок::адреса, рядок, 0);
          }
          змінна контекст_циклу = створити_контекст(М, контекст.значення_ю8, контекст.слова);
          змінна успіх_компіляції_тіла = перекласти(М, контекст_циклу, дані.тіло, ні, код, вихід_помилки);
          якщо успіх_компіляції_тіла == ні {
            знищити_контекст(М, контекст_циклу);
            вернути успіх_компіляції_тіла;
          }
          змінна успіх_компіляції_ітерації = перекласти(М, контекст_циклу, дані.ітерація, ні, код, вихід_помилки);
          якщо успіх_компіляції_ітерації == ні {
            знищити_контекст(М, контекст_циклу);
            вернути успіх_компіляції_ітерації;
          }
          знищити_контекст(М, контекст_циклу);
          В1::покласти_вказівку_Стрибнути(М, код.будівельник_вказівок::адреса, рядок, позиція_вказівки_початку_циклу);
          якщо дані.умова != пусто {
            В1::перезаписати_аргумент_вказівки(М, код.будівельник_вказівок::адреса, позиція_вказівки_якщо_ні + 8 + 1, код.будівельник_вказівок.вказівки.розмір);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиВічнийЦикл {
          змінна дані = елемент.дані як розбирач::ДаніГілкиВічнийЦикл;
          змінна позиція_вказівки_початку_циклу = код.будівельник_вказівок.вказівки.розмір;
          змінна контекст_циклу = створити_контекст(М, контекст.значення_ю8, контекст.слова);
          змінна успіх_компіляції_тіла = перекласти(М, контекст_циклу, дані.тіло, ні, код, вихід_помилки);
          якщо успіх_компіляції_тіла == ні {
            знищити_контекст(М, контекст_циклу);
            вернути успіх_компіляції_тіла;
          }
          знищити_контекст(М, контекст_циклу);
          В1::покласти_вказівку_Стрибнути(М, код.будівельник_вказівок::адреса, рядок, позиція_вказівки_початку_циклу);
        } інакше якщо елемент.вид == розбирач::ВидГілкиВидалити {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиВидалитиВластивість {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиВидалитиЕлемент {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиДіапазон {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше якщо елемент.вид == розбирач::ВидГілкиЧекати {
          змінна успіх_перекладу_елемента = перекласти_гілку_в_МаМа(М, контекст, код, елемент, вихід_помилки);
          якщо успіх_перекладу_елемента == ні {
            вернути успіх_перекладу_елемента;
          }
          якщо вернути_в_кінці {
            якщо пе == гілки.розмір - 1 {
              В1::покласти_вказівку_Вернути(М, код.будівельник_вказівок::адреса, рядок);
            } інакше {
              В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
            }
          } інакше {
            В1::покласти_вказівку_Забрати(М, код.будівельник_вказівок::адреса, рядок);
          }
        } інакше {
          вихід_помилки::вміст = ПомилкаПерекладуВМаМа {
            повідомлення = копія_т8(М, "Виявлено невідомий вид гілки"),
            позиція_слова = 0
          };
          вернути ні;
        }
        пе = пе + 1;
      }

      вернути так;
    }
  }
}