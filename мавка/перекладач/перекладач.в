взяти визначення мавка/розбирач;

секція мавка {
  секція перекладач {
    синонім ВидКонстантиНазва = 1;
    синонім ВидКонстантиЧисло = 2;
    синонім ВидКонстантиТекст = 3;
    синонім ВидКонстантиЮнікод8 = 4;
    синонім ВидКонстантиЮнікод32 = 5;
    синонім ВидКонстантиКод = 6;

    структура Система;

    структура Система {
      дані: невідома_адреса;
      виділити_сиру_памʼять: (система: адреса<Система>, розмір: позитивне) -> памʼять<п8>;
      перевиділити_сиру_памʼять: (система: адреса<Система>, значення: памʼять<п8>, новий_розмір: позитивне) -> памʼять<п8>;
      звільнити_сиру_памʼять: (система: адреса<Система>, значення: невідома_памʼять) -> ніщо;
    }

    дія виділити<Т>(система: адреса<Система>): адреса<Т>;
    дія перевиділити<Т>(система: адреса<Система>, значення: адреса<Т>, кількість: позитивне): памʼять<Т>;
    дія звільнити(система: адреса<Система>, значення: невідома_адреса);
    дія виділити_памʼять<Т>(система: адреса<Система>, кількість: позитивне): памʼять<Т>;
    дія перевиділити_памʼять<Т>(система: адреса<Система>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т>;
    дія звільнити_памʼять(система: адреса<Система>, значення: невідома_памʼять);

    дія виділити<Т>(система: адреса<Система>): адреса<Т> {
      вернути система.виділити_сиру_памʼять(система, Т.розмір) як адреса<Т>;
    }

    дія перевиділити<Т>(система: адреса<Система>, значення: адреса<Т>, кількість: позитивне): памʼять<Т> {
      вернути система.перевиділити_сиру_памʼять(система, значення як невідома_адреса, кількість * Т.розмір) як памʼять<Т>;
    }

    дія звільнити(система: адреса<Система>, значення: невідома_адреса) {
      система.звільнити_сиру_памʼять(система, значення як невідома_памʼять);
    }

    дія виділити_памʼять<Т>(система: адреса<Система>, кількість: позитивне): памʼять<Т> {
      вернути система.виділити_сиру_памʼять(система, кількість * Т.розмір) як памʼять<Т>;
    }

    дія перевиділити_памʼять<Т>(система: адреса<Система>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т> {
      вернути система.перевиділити_сиру_памʼять(система, значення як памʼять<п8>, кількість * Т.розмір) як памʼять<Т>;
    }

    дія звільнити_памʼять(система: адреса<Система>, значення: невідома_памʼять) {
      система.звільнити_сиру_памʼять(система, значення);
    }

    структура ВихіднийПотік;

    структура ВихіднийПотік {
      дані: невідома_адреса;
      дописати: (система: адреса<Система>, потік: адреса<ВихіднийПотік>, розмір: позитивне, дані: памʼять<п8>) -> логічне;
    }

    структура Накопичувач<Т> {
      розмір: позитивне;
      вмісткість: позитивне;
      дані: памʼять<Т>;
    }

    дія зробити_накопичувач<Т>(система: адреса<Система>): Накопичувач<Т> {
      вернути Накопичувач<Т> {
        розмір = 0,
        вмісткість = 0,
        дані = пусто
      };
    }

    дія покласти_в_накопичувач<Т>(система: адреса<Система>, накопичувач: адреса<Накопичувач<Т>>, дані: Т) {
      якщо накопичувач.розмір == накопичувач.вмісткість {
        накопичувач.вмісткість += 1;
        накопичувач.дані = перевиділити_памʼять<Т>(система, накопичувач.дані, накопичувач.вмісткість);
      }
      накопичувач.дані[накопичувач.розмір] = дані;
      накопичувач.розмір += 1;
    }

    дія звільнити_дані_накопичувача<Т>(система: адреса<Система>, накопичувач: Накопичувач<Т>) {
      звільнити_памʼять(система, накопичувач.дані);
    }

    дія дописати_ю8_у_вихідний_потік(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8) {
      вихідний_потік.дописати(система, вихідний_потік, значення_ю8.розмір, значення_ю8.дані);
    }

    структура Код {
      накопичувач_констант: Накопичувач<п8>;
      кількість_констант: позитивне;
      накопичувач_вказівок: Накопичувач<п8>;
    }

    структура ПомилкаПерекладуВМаМа {
      повідомлення: т8;
      позиція_слова: позитивне;
    }

    структура КонтекстПерекладу {
      значення_ю8: ю8;
      слова: розбирач::Слова;
    }

    дія виділити_контекст_компіляції(система: адреса<Система>, значення_ю8: ю8, слова: розбирач::Слова): адреса<КонтекстПерекладу> {
      ціль контекст = виділити<КонтекстПерекладу>(система);
      контекст.значення_ю8 = значення_ю8;
      контекст.слова = слова;
      вернути контекст;
    }

    зовнішня дія створити_код(система: адреса<Система>): адреса<Код>;
    зовнішня дія знищити_код(система: адреса<Система>, код: адреса<Код>);
    зовнішня дія створити_контекст(система: адреса<Система>, значення_ю8: ю8, слова: розбирач::Слова): адреса<КонтекстПерекладу>;
    зовнішня дія знищити_контекст(система: адреса<Система>, контекст: адреса<КонтекстПерекладу>);
    зовнішня дія перекласти_в_МаМа(система: адреса<Система>, контекст: адреса<КонтекстПерекладу>, гілки: розбирач::Гілки, вернути_в_кінці: логічне, код: адреса<Код>, вихід_помилки: адреса<ПомилкаПерекладуВМаМа>): логічне;
    зовнішня дія вивести_КодМаМа(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, код: адреса<Код>);
  }
}