взяти визначення МаМа;
взяти визначення мавка/бібліотека;

секція мавка {
  секція бібліотека {
    дія нативна_дія_модуля_математики_синус(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::синус_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_косинус(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::косинус_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_тангенс(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::тангенс_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_арксинус(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::арксинус_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_арккосинус(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::арккосинус_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_арктангенс(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::арктангенс_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_арктангенс2(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_а = ні;
      змінна ціль аргумент_а: адреса<Предмет> = пусто;
      змінна ціль знайдено_аргумент_б = ні;
      змінна ціль аргумент_б: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_а = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва_з_ю8(обчислювач, ю8"а"), аргумент_а::адреса);
        знайдено_аргумент_б = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва_з_ю8(обчислювач, ю8"б"), аргумент_б::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_а == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_а = так;
            аргумент_а = аргументи[0];
          }
        }
        якщо знайдено_аргумент_б == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_б = так;
            аргумент_б = аргументи[1];
          }
        }
      }
      якщо знайдено_аргумент_а == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо знайдено_аргумент_б == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_а, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_б, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа_а = отримати_значення_числа(аргумент_а, обчислювач);
      ціль значення_числа_б = отримати_значення_числа(аргумент_б, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::арктангенс2_д64(значення_числа_а, значення_числа_б)));
    }

    дія нативна_дія_модуля_математики_абсолютне(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::абсолютне_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_експонента(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::експонента_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_корінь(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::корінь_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_степінь(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_а = ні;
      змінна ціль аргумент_а: адреса<Предмет> = пусто;
      змінна ціль знайдено_аргумент_б = ні;
      змінна ціль аргумент_б: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_а = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва_з_ю8(обчислювач, ю8"а"), аргумент_а::адреса);
        знайдено_аргумент_б = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва_з_ю8(обчислювач, ю8"б"), аргумент_б::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_а == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_а = так;
            аргумент_а = аргументи[0];
          }
        }
        якщо знайдено_аргумент_б == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_б = так;
            аргумент_б = аргументи[1];
          }
        }
      }
      якщо знайдено_аргумент_а == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо знайдено_аргумент_б == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_а, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_б, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа_а = отримати_значення_числа(аргумент_а, обчислювач);
      ціль значення_числа_б = отримати_значення_числа(аргумент_б, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::степінь_д64(значення_числа_а, значення_числа_б)));
    }

    дія нативна_дія_модуля_математики_стеля(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::стеля_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_підлога(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::підлога_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_округлити(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_числом(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, обчислювач);
      вернути результат_успіх(обчислювач, створити_число(обчислювач, математика::округлити_д64(значення_числа)));
    }

    дія нативна_дія_модуля_математики_найбільше(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_списком(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується спискове значення"), пусто);
      }
      ціль предмет_списку = аргумент_значення як адреса<МаМа::ПредметСписку>;
      змінна ціль результат: адреса<Предмет> = пусто;
      якщо предмет_списку.елементи.розмір > 0 {
        результат = предмет_списку.елементи.дані[0] як адреса<Предмет>;
      }
      змінна ціль п: позитивне = 1;
      поки п < предмет_списку.елементи.розмір {
        ціль значення = предмет_списку.елементи.дані[п] як адреса<Предмет>;
        ціль результат_більше = предмет_більше(значення, обчислювач, результат);
        якщо результат_більше.падіння != пусто {
          вернути результат_більше;
        }
        якщо перевірити_чи_предмет_виражається_логічним_так(результат_більше.значення, обчислювач) == так {
          результат = значення;
        }
        п += 1;
      }
      вернути результат_успіх(обчислювач, результат);
    }

    дія нативна_дія_модуля_математики_найменше(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_предмет_є_списком(аргумент_значення, обчислювач) == ні {
        вернути результат_падіння(обчислювач, мавка::створити_текст_з_ю8(обчислювач, ю8"Очікується спискове значення"), пусто);
      }
      ціль предмет_списку = аргумент_значення як адреса<МаМа::ПредметСписку>;
      змінна ціль результат: адреса<Предмет> = пусто;
      якщо предмет_списку.елементи.розмір > 0 {
        результат = предмет_списку.елементи.дані[0] як адреса<Предмет>;
      }
      змінна ціль п: позитивне = 1;
      поки п < предмет_списку.елементи.розмір {
        ціль значення = предмет_списку.елементи.дані[п] як адреса<Предмет>;
        ціль результат_більше = предмет_менше(значення, обчислювач, результат);
        якщо результат_більше.падіння != пусто {
          вернути результат_більше;
        }
        якщо перевірити_чи_предмет_виражається_логічним_так(результат_більше.значення, обчислювач) == так {
          результат = значення;
        }
        п += 1;
      }
      вернути результат_успіх(обчислювач, результат);
    }

    місцева дія заповнити_модуль_М(обчислювач: адреса<Обчислювач>, предмет_модуля: адреса<Предмет>) {
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"Е"), створити_число(обчислювач, ЧИСЛО_Е));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"ЛОГ2Е"), створити_число(обчислювач, ЧИСЛО_ЛОГ2Е));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"ЛОГ10Е"), створити_число(обчислювач, ЧИСЛО_ЛОГ10Е));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"ЛОГ2"), створити_число(обчислювач, ЧИСЛО_ЛОГ2));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"ЛОГ10"), створити_число(обчислювач, ЧИСЛО_ЛОГ10));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"ПІ"), створити_число(обчислювач, ЧИСЛО_ПІ));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"КОРІНЬ2"), створити_число(обчислювач, ЧИСЛО_КОРІНЬ2));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"КОРІНЬ1_2"), створити_число(обчислювач, ЧИСЛО_КОРІНЬ1_2));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"синус"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"синус"), нативна_дія_модуля_математики_синус, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"косинус"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"косинус"), нативна_дія_модуля_математики_косинус, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"тангенс"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"тангенс"), нативна_дія_модуля_математики_тангенс, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"арксинус"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"арксинус"), нативна_дія_модуля_математики_арксинус, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"арккосинус"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"арккосинус"), нативна_дія_модуля_математики_арккосинус, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"арктангенс"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"арктангенс"), нативна_дія_модуля_математики_арктангенс, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"арктангенс2"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"арктангенс2"), нативна_дія_модуля_математики_арктангенс2, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"абсолютне"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"абсолютне"), нативна_дія_модуля_математики_абсолютне, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"експонента"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"експонента"), нативна_дія_модуля_математики_експонента, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"корінь"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"корінь"), нативна_дія_модуля_математики_корінь, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"степінь"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"степінь"), нативна_дія_модуля_математики_степінь, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"стеля"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"стеля"), нативна_дія_модуля_математики_стеля, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"підлога"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"підлога"), нативна_дія_модуля_математики_підлога, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"округлити"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"округлити"), нативна_дія_модуля_математики_округлити, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"найбільше"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"найбільше"), нативна_дія_модуля_математики_найбільше, пусто, пусто));
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_ю8(обчислювач, ю8"найменше"), створити_нативну_дію(обчислювач, назва_з_ю8(обчислювач, ю8"найменше"), нативна_дія_модуля_математики_найменше, пусто, пусто));
    }
  }
}