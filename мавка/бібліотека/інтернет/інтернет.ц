взяти визначення МаМа;
взяти визначення мавка/бібліотека;

секція мавка {
  секція бібліотека {
    дія рідна_дія_метода_складеного_предмета_Обчислювач_запустити(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути пусто;
    }

    дія рідна_дія_метода_складеного_предмета_Обчислювач_надіслати(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      вернути пусто;
    }

    дія створити_предмет_структури_Обслуговувач(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
      ціль притримувач = покласти_притримувач(обчислювач);

      ціль кількість_параметрів: позитивне = 6;
      змінна параметри = виділити_памʼять<адреса<Предмет>>(обчислювач, кількість_параметрів);

      ціль параметр_оф = створити_параметр(обчислювач, назва(обчислювач, "оф"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_оф;
      }
      параметри[0] = параметр_оф;
      притримати(обчислювач, притримувач, параметр_оф);

      ціль параметр_адреса = створити_параметр(обчислювач, назва(обчислювач, "адреса"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_адреса;
      }
      параметри[1] = параметр_адреса;
      притримати(обчислювач, притримувач, параметр_адреса);

      ціль параметр_порт = створити_параметр(обчислювач, назва(обчислювач, "порт"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_порт;
      }
      параметри[2] = параметр_порт;
      притримати(обчислювач, притримувач, параметр_порт);

      ціль параметр_обробник_підключення = створити_параметр(обчислювач, назва(обчислювач, "обробник_підключення"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_обробник_підключення;
      }
      параметри[3] = параметр_обробник_підключення;
      притримати(обчислювач, притримувач, параметр_обробник_підключення);

      ціль параметр_обробник_відключення = створити_параметр(обчислювач, назва(обчислювач, "обробник_відключення"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_обробник_відключення;
      }
      параметри[4] = параметр_обробник_відключення;
      притримати(обчислювач, притримувач, параметр_обробник_відключення);

      ціль параметр_обробник_повідомлення = створити_параметр(обчислювач, назва(обчислювач, "обробник_повідомлення"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_обробник_повідомлення;
      }
      параметри[5] = параметр_обробник_повідомлення;
      притримати(обчислювач, притримувач, параметр_обробник_повідомлення);

      ціль предмет_структури_Обслуговувач = створити_структуру(обчислювач, назва(обчислювач, "Обслуговувач"), отримати_предмет_структури_предмет(обчислювач), кількість_параметрів, параметри);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_структури_Обслуговувач;
      }

      ціль предмет_дії_метода_запустити = створити_рідну_дію(обчислювач, назва(обчислювач, т8"запустити"), 0, пусто, пусто, рідна_дія_метода_складеного_предмета_Обчислювач_запустити);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_метода_запустити;
      }
      притримати(обчислювач, притримувач, предмет_дії_метода_запустити);
      змінна результат_запису_метода = предмет_записати_метод(обчислювач, предмет_структури_Обслуговувач, назва(обчислювач, "запустити"), предмет_дії_метода_запустити, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_запису_метода;
      }

      ціль предмет_дії_метода_надіслати = створити_рідну_дію(обчислювач, назва(обчислювач, т8"надіслати"), 0, пусто, пусто, рідна_дія_метода_складеного_предмета_Обчислювач_надіслати);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_метода_надіслати;
      }
      притримати(обчислювач, притримувач, предмет_дії_метода_надіслати);
      результат_запису_метода = предмет_записати_метод(обчислювач, предмет_структури_Обслуговувач, назва(обчислювач, "надіслати"), предмет_дії_метода_надіслати, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_запису_метода;
      }

      забрати_притримувач(обчислювач);
      вернути предмет_структури_Обслуговувач;
    }
  }
}

секція мавка {
  секція бібліотека {
    дія рідна_дія_модуля_інтернет_створити_обслуговувач(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_адреса = ні;
      змінна аргумент_адреса: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_порт = ні;
      змінна аргумент_порт: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_адреса = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва(обчислювач, "адреса"), аргумент_адреса::адреса);
        знайдено_аргумент_порт = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва(обчислювач, "порт"), аргумент_порт::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_адреса == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_адреса = так;
            аргумент_адреса = аргументи[0];
          }
        }
        якщо знайдено_аргумент_порт == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_порт = так;
            аргумент_порт = аргументи[1];
          }
        }
      }
      ціль предмет_структури_Обслуговувач = предмет_отримати_властивість(обчислювач, предмет_я, назва(обчислювач, "Обслуговувач"), Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути предмет_структури_Обслуговувач;
      }
      ціль кількість_аргументів_виконання: позитивне = 3;
      ціль аргументи_виконання = виділити_памʼять<адреса<Предмет>>(обчислювач, кількість_аргументів_виконання);
      аргументи_виконання[0] = пусто як адреса<Предмет>;
      аргументи_виконання[1] = аргумент_адреса;
      аргументи_виконання[2] = аргумент_порт;
      ціль результат = предмет_виконати(обчислювач, предмет_структури_Обслуговувач, пусто, кількість_аргументів_виконання, аргументи_виконання, пусто, Місцезнаходження { пусто, 0 });
      звільнити_памʼять(обчислювач, аргументи_виконання);
      вернути результат;
    }

    дія створити_дію_модуля_інтернет_створити_обслуговувач(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
      вернути створити_рідну_дію(обчислювач, назва(обчислювач, т8"створити_обслуговувач"), 0, пусто, пусто, рідна_дія_модуля_інтернет_створити_обслуговувач);
    }

    дія створити_модуль_інтернет(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
      ціль притримувач = покласти_притримувач(обчислювач);

      ціль предмет_модуля = створити_модуль(обчислювач, назва(обчислювач, "інтернет"), 0, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_модуля;
      }
      притримати(обчислювач, притримувач, предмет_модуля);

      ціль предмет_дії_створити_обслуговувач = створити_дію_модуля_інтернет_створити_обслуговувач(обчислювач);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_створити_обслуговувач;
      }
      притримати(обчислювач, притримувач, предмет_дії_створити_обслуговувач);
      змінна результат_зміни_властивості = предмет_змінити_властивість(обчислювач, предмет_модуля, назва(обчислювач, "створити_обслуговувач"), предмет_дії_створити_обслуговувач, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_зміни_властивості;
      }

      ціль предмет_структури_Обслуговувач = створити_предмет_структури_Обслуговувач(обчислювач);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_структури_Обслуговувач;
      }
      притримати(обчислювач, притримувач, предмет_структури_Обслуговувач);
      результат_зміни_властивості = предмет_змінити_властивість(обчислювач, предмет_модуля, назва(обчислювач, "Обслуговувач"), предмет_структури_Обслуговувач, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_зміни_властивості;
      }

      забрати_притримувач(обчислювач);
      вернути предмет_модуля;
    }

    зовнішня дія взяти_модуль_біб_інтернет(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
      ціль М = обчислювач;
      змінна результат = створити_текст(обчислювач, "мавка:бібліотека/інтернет/інтернет.ц");
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути результат;
      }
      ціль предмет_шляху = результат;
      змінна взятий_предмет: адреса<МаМа::Предмет> = пусто;
      якщо МаМа::отримати_взятий_предмет(М, предмет_шляху як адреса<МаМа::Предмет>, взятий_предмет::адреса) {
        вернути взятий_предмет як адреса<Предмет>;
      }
      результат = створити_модуль_інтернет(обчислювач);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути результат;
      }
      МаМа::покласти_взятий_предмет(М, предмет_шляху як адреса<МаМа::Предмет>, результат як адреса<МаМа::Предмет>);
      вернути результат;
    }
  }
}