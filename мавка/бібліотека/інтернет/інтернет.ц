взяти визначення мавка;
взяти визначення мавка/бібліотека;
взяти визначення біб/Реєстр;
взяти визначення біб/Друк;
взяти визначення біб/турбо;

// Звʼязок
секція мавка {
  секція бібліотека {
    структура ДаніВідкликуІнтернетЗвʼязку {
      М: адреса<Машина>;
      глобально_притриманий_предмет_звʼязку: адреса<ГлобальноПритриманийПредмет>;
      глобально_притриманий_предмет_обробника_підключення: адреса<ГлобальноПритриманийПредмет>;
    }

    структура ДаніВідкликуНаРезультатЗаписуВІнтернетЗвʼязок {
      М: адреса<Машина>;
      глобально_притриманий_предмет_звʼязку: адреса<ГлобальноПритриманийПредмет>;
      глобально_притриманий_предмет_даних: адреса<ГлобальноПритриманийПредмет>;
      розмір: позитивне;
      дані: памʼять<п8>;
      дані_треба_звільнити: позитивне;
    }

    дія обробник_запланованого_виконання_відклику_на_підключення_інтернет_звʼязку(М: адреса<Машина>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна предмет_обробника_підключення = аргументи[0];

      вернути предмет_виконати(М, предмет_обробника_підключення, пусто, 2, аргументи[1]::адреса як памʼять<адреса<Предмет>>, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_дані_інтернет_звʼязку(М: адреса<Машина>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна предмет_звʼязку = аргументи[0];

      вернути предмет_виконати_властивість(М, предмет_звʼязку, створити_назву(М, "обробник_даних"), 2, аргументи, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_закінчення_інтернет_звʼязку(М: адреса<Машина>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна предмет_звʼязку = аргументи[0];

      вернути предмет_виконати_властивість(М, предмет_звʼязку, створити_назву(М, "обробник_закінчення"), 1, аргументи, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_відключення_інтернет_звʼязку(М: адреса<Машина>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна предмет_звʼязку = аргументи[0];

      вернути предмет_виконати_властивість(М, предмет_звʼязку, створити_назву(М, "обробник_відключення"), 2, аргументи, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
    }

    дія обробник_запису_інтернет_звʼязку(турбіна: адреса<турбо::Турбіна>, інтернет_звʼязок: адреса<турбо::ІнтернетЗвʼязок>, аргумент_інтернет_звʼязку: невідома_адреса, аргумент_запису: невідома_адреса, розмір: позитивне, дані: памʼять<п8>) {
      змінна дані_запису = аргумент_запису як адреса<ДаніВідкликуНаРезультатЗаписуВІнтернетЗвʼязок>;
      змінна М = дані_запису.М;
      змінна предмет_звʼязку = отримати_глобально_притриманий_предмет(М, дані_запису.глобально_притриманий_предмет_звʼязку);
      змінна предмет_даних = отримати_глобально_притриманий_предмет(М, дані_запису.глобально_притриманий_предмет_даних);

      відпустити_глобально(М, дані_запису.глобально_притриманий_предмет_звʼязку);
      відпустити_глобально(М, дані_запису.глобально_притриманий_предмет_даних);
      якщо дані_запису.дані_треба_звільнити == позитивне(так) {
        звільнити_памʼять(М, дані_запису.дані);
      }

      звільнити(М, дані_запису);
    }

    дія обробник_підключення_інтернет_звʼязку(турбіна: адреса<турбо::Турбіна>, інтернет_звʼязок: адреса<турбо::ІнтернетЗвʼязок>, аргумент: невідома_адреса, успішно: логічне, код_помилки: позитивне) {
      змінна дані_звʼязку = аргумент як адреса<ДаніВідкликуІнтернетЗвʼязку>;
      змінна М = дані_звʼязку.М;
      змінна предмет_звʼязку = отримати_глобально_притриманий_предмет(М, дані_звʼязку.глобально_притриманий_предмет_звʼязку);
      змінна предмет_обробника_підключення = отримати_глобально_притриманий_предмет(М, дані_звʼязку.глобально_притриманий_предмет_обробника_підключення);

      змінна кількість_аргументів: позитивне = 3;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, кількість_аргументів);
      аргументи[0] = предмет_обробника_підключення;
      аргументи[1] = предмет_звʼязку;

      якщо успішно {
        аргументи[2] = пусто як адреса<Предмет>;

        предмет_змінити_користувацькі_дані(М, предмет_звʼязку, інтернет_звʼязок);
      } інакше {
        аргументи[2] = створити_предмет_числа(М, д64(код_помилки)) як адреса<Предмет>;
        якщо перевірити_чи_стан_падіння(М) {
          ПОМЕРТИ(М, "НОП: не вдалось створити число");
        }

        відпустити_глобально(М, дані_звʼязку.глобально_притриманий_предмет_звʼязку);
        відпустити_глобально(М, дані_звʼязку.глобально_притриманий_предмет_обробника_підключення);
        звільнити(М, дані_звʼязку);
      }

      запланувати_виконання(М, обробник_запланованого_виконання_відклику_на_підключення_інтернет_звʼязку, пусто, пусто, кількість_аргументів, аргументи);
    }

    дія обробник_даних_інтернет_звʼязку(турбіна: адреса<турбо::Турбіна>, інтернет_звʼязок: адреса<турбо::ІнтернетЗвʼязок>, аргумент: невідома_адреса, розмір: позитивне, дані: памʼять<п8>) {
      змінна дані_звʼязку = аргумент як адреса<ДаніВідкликуІнтернетЗвʼязку>;
      змінна М = дані_звʼязку.М;
      змінна предмет_звʼязку = отримати_глобально_притриманий_предмет(М, дані_звʼязку.глобально_притриманий_предмет_звʼязку);

      змінна предмет_буфера = створити_предмет_буфера_без_копіювання(М, розмір, дані) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        ПОМЕРТИ(М, "НОП: не вдалось створити буфер без копіювання");
      }

      змінна кількість_аргументів: позитивне = 2;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, кількість_аргументів);
      аргументи[0] = предмет_звʼязку;
      аргументи[1] = предмет_буфера;

      запланувати_виконання(М, обробник_запланованого_виконання_відклику_на_дані_інтернет_звʼязку, пусто, пусто, кількість_аргументів, аргументи);
    }

    дія обробник_закінчення_інтернет_звʼязку(турбіна: адреса<турбо::Турбіна>, інтернет_звʼязок: адреса<турбо::ІнтернетЗвʼязок>, аргумент: невідома_адреса) {
      змінна дані_звʼязку = аргумент як адреса<ДаніВідкликуІнтернетЗвʼязку>;
      змінна М = дані_звʼязку.М;
      змінна предмет_звʼязку = отримати_глобально_притриманий_предмет(М, дані_звʼязку.глобально_притриманий_предмет_звʼязку);

      змінна кількість_аргументів: позитивне = 1;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, кількість_аргументів);
      аргументи[0] = предмет_звʼязку;

      запланувати_виконання(М, обробник_запланованого_виконання_відклику_на_закінчення_інтернет_звʼязку, пусто, пусто, кількість_аргументів, аргументи);
    }

    дія обробник_відключення_інтернет_звʼязку(турбіна: адреса<турбо::Турбіна>, інтернет_звʼязок: адреса<турбо::ІнтернетЗвʼязок>, аргумент: невідома_адреса, з_помилкою: логічне, код_помилки: позитивне) {
      змінна дані_звʼязку = аргумент як адреса<ДаніВідкликуІнтернетЗвʼязку>;
      змінна М = дані_звʼязку.М;
      змінна предмет_звʼязку = отримати_глобально_притриманий_предмет(М, дані_звʼязку.глобально_притриманий_предмет_звʼязку);

      предмет_змінити_користувацькі_дані(М, предмет_звʼязку, пусто);

      змінна кількість_аргументів: позитивне = 2;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, кількість_аргументів);
      аргументи[0] = предмет_звʼязку;
      якщо з_помилкою {
        аргументи[1] = створити_предмет_числа(М, д64(код_помилки)) як адреса<Предмет>;
      } інакше {
        аргументи[1] = пусто як адреса<Предмет>;
      }
      запланувати_виконання(М, обробник_запланованого_виконання_відклику_на_відключення_інтернет_звʼязку, пусто, пусто, кількість_аргументів, аргументи);

      відпустити_глобально(М, дані_звʼязку.глобально_притриманий_предмет_звʼязку);
      якщо дані_звʼязку.глобально_притриманий_предмет_обробника_підключення != пусто {
        відпустити_глобально(М, дані_звʼязку.глобально_притриманий_предмет_обробника_підключення);
      }
      звільнити(М, дані_звʼязку);
    }

    дія створити_предмет_структури_Звʼязок(М: адреса<Машина>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна притримувач = покласти_притримувач(М);

      змінна кількість_параметрів: позитивне = 6;
      змінна параметри = виділити_памʼять<адреса<Предмет>>(М, кількість_параметрів);



      змінна параметр_адреса = створити_предмет_параметра(М, створити_назву(М, "адреса"), пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути параметр_адреса;
      }
      параметри[0] = параметр_адреса;
      притримати(М, притримувач, параметр_адреса);

      змінна параметр_порт = створити_предмет_параметра(М, створити_назву(М, "порт"), пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути параметр_порт;
      }
      параметри[1] = параметр_порт;
      притримати(М, притримувач, параметр_порт);

      змінна параметр_обробник_даних = створити_предмет_параметра(М, створити_назву(М, "обробник_даних"), пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути параметр_обробник_даних;
      }
      параметри[2] = параметр_обробник_даних;
      притримати(М, притримувач, параметр_обробник_даних);

      змінна параметр_обробник_закінчення = створити_предмет_параметра(М, створити_назву(М, "обробник_закінчення"), пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути параметр_обробник_закінчення;
      }
      параметри[3] = параметр_обробник_закінчення;
      притримати(М, притримувач, параметр_обробник_закінчення);

      змінна параметр_обробник_відключення = створити_предмет_параметра(М, створити_назву(М, "обробник_відключення"), пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути параметр_обробник_відключення;
      }
      параметри[4] = параметр_обробник_відключення;
      притримати(М, притримувач, параметр_обробник_відключення);

      змінна параметр_користувацькі_дані = створити_предмет_параметра(М, створити_назву(М, "користувацькі_дані"), пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути параметр_користувацькі_дані;
      }
      параметри[5] = параметр_користувацькі_дані;
      притримати(М, притримувач, параметр_користувацькі_дані);

      змінна предмет_структури_Звʼязок = створити_предмет_структури(
        М,
        створити_назву(М, "Звʼязок"),
        М.предмет_структури_предмет,
        кількість_параметрів, параметри як памʼять<адреса<ПредметПараметра>>
      ) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути предмет_структури_Звʼязок;
      }

      забрати_притримувач(М);
      вернути предмет_структури_Звʼязок;
    }

    дія рідна_дія_модуля_інтернет_звʼязатись(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна знайдено_аргумент_адреса = ні;
      змінна аргумент_адреса: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_порт = ні;
      змінна аргумент_порт: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_обробник_підключення = ні;
      змінна аргумент_обробник_підключення: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_формат_даних = ні;
      змінна аргумент_формат_даних: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_адреса = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "адреса"), аргумент_адреса::адреса);
        знайдено_аргумент_порт = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "порт"), аргумент_порт::адреса);
        знайдено_аргумент_обробник_підключення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "обробник_підключення"), аргумент_обробник_підключення::адреса);
        знайдено_аргумент_формат_даних = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "формат_даних"), аргумент_формат_даних::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_адреса == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_адреса = так;
            аргумент_адреса = аргументи[0];
          }
        }
        якщо знайдено_аргумент_порт == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_порт = так;
            аргумент_порт = аргументи[1];
          }
        }
        якщо знайдено_аргумент_обробник_підключення == ні {
          якщо кількість_аргументів > 2 {
            знайдено_аргумент_обробник_підключення = так;
            аргумент_обробник_підключення = аргументи[2];
          }
        }
        якщо знайдено_аргумент_формат_даних == ні {
          якщо кількість_аргументів > 3 {
            знайдено_аргумент_формат_даних = так;
            аргумент_формат_даних = аргументи[3];
          }
        }
      }

      якщо аргумент_адреса == пусто {
        вернути падіння(М, "Адреса має бути текстом");
      }
      якщо аргумент_порт == пусто {
        вернути падіння(М, "Порт має бути числом");
      }

      змінна адреса_т8 = т8 { 0, пусто };

      якщо перевірити_чи_предмет_є_текстом(М, аргумент_адреса) {
        адреса_т8 = отримати_значення_тексту(М, аргумент_адреса як адреса<ПредметТексту>);
      } інакше {
        вернути падіння(М, "Адреса має бути текстом");
      }

      якщо перевірити_чи_предмет_є_числом(М, аргумент_порт) == ні {
        вернути падіння(М, "Порт має бути числом");
      }

      змінна порт = ц32(отримати_значення_числа(М, аргумент_порт як адреса<ПредметЧисла>));

      змінна предмет_структури_Звʼязок = отримати_глобально_притриманий_предмет(М, предмет_дії.дані як адреса<ГлобальноПритриманийПредмет>);

      змінна кількість_аргументів_виконання_Звʼязок: позитивне = 2;
      змінна аргументи_виконання_Звʼязок = виділити_памʼять<адреса<Предмет>>(М, кількість_аргументів_виконання_Звʼязок);
      аргументи_виконання_Звʼязок[0] = аргумент_адреса;
      аргументи_виконання_Звʼязок[1] = аргумент_порт;
      змінна предмет_звʼязку = предмет_виконати(М, предмет_структури_Звʼязок, пусто, кількість_аргументів_виконання_Звʼязок, аргументи_виконання_Звʼязок, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      звільнити_памʼять(М, аргументи_виконання_Звʼязок);
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_звʼязку;
      }

      змінна турбіна = турбо::отримати_глобальну_турбіну();

      змінна дані_звʼязку = виділити<ДаніВідкликуІнтернетЗвʼязку>(М);
      дані_звʼязку.М = М;
      дані_звʼязку.глобально_притриманий_предмет_звʼязку = притримати_глобально(М, предмет_звʼязку);
      дані_звʼязку.глобально_притриманий_предмет_обробника_підключення = притримати_глобально(М, аргумент_обробник_підключення);

      змінна іа: позитивне = 0;
      змінна результат_іа = турбо::отримати_інтернет_адресу(турбіна, адреса_т8, іа::адреса);
      якщо результат_іа == ні {
        вернути падіння(М, "Не вдалось отримати іа");
      }

      турбо::підключити_інтернет_звʼязок(
        турбіна,
        іа,
        позитивне(порт),
        обробник_підключення_інтернет_звʼязку,
        обробник_даних_інтернет_звʼязку,
        обробник_закінчення_інтернет_звʼязку,
        обробник_відключення_інтернет_звʼязку,
        дані_звʼязку
      );

      вернути пусто;
    }

    дія зробити_копію_даних_дії_модуля_інтернет_звʼязатись(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>): невідома_адреса {
      змінна дані_дії = предмет_дії.дані як адреса<ГлобальноПритриманийПредмет>;
      вернути притримати_глобально(М, отримати_глобально_притриманий_предмет(М, дані_дії));
    }

    дія відклик_перед_звільненням_дії_модуля_інтернет_звʼязатись(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>) {
      змінна дані_дії = предмет_дії.дані як адреса<ГлобальноПритриманийПредмет>;
      відпустити_глобально(М, дані_дії);
    }

    дія створити_дію_модуля_інтернет_звʼязатись(М: адреса<Машина>, предмет_структури_Звʼязок: адреса<Предмет>) -> ПредметАбоСтанПадіння<Предмет> {

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "звʼязатись"),
        0,
        пусто,
        рідна_дія_модуля_інтернет_звʼязатись,
        притримати_глобально(М, предмет_структури_Звʼязок),
        зробити_копію_даних_дії_модуля_інтернет_звʼязатись,
        відклик_перед_звільненням_дії_модуля_інтернет_звʼязатись
      ) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_інтернет_надіслати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна знайдено_аргумент_повідомлення = ні;
      змінна аргумент_повідомлення: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_отримувач = ні;
      змінна аргумент_отримувач: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_повідомлення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "повідомлення"), аргумент_повідомлення::адреса);
        знайдено_аргумент_отримувач = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "отримувач"), аргумент_отримувач::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_повідомлення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_повідомлення = так;
            аргумент_повідомлення = аргументи[0];
          }
        }
        якщо знайдено_аргумент_отримувач == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_отримувач = так;
            аргумент_отримувач = аргументи[1];
          }
        }
      }

      якщо аргумент_повідомлення == пусто {
        вернути падіння(М, "Повідомлення не може бути пусто");
      }
      якщо аргумент_отримувач == пусто {
        вернути падіння(М, "Отримувач не може бути пусто");
      }

      змінна байти_треба_звільнити = ні;
      змінна байти = Байти { 0, пусто };
      якщо перевірити_чи_предмет_є_байтами(М, аргумент_повідомлення) {
        байти = отримати_значення_байтів(М, аргумент_повідомлення як адреса<ПредметБайтів>);
      } інакше якщо перевірити_чи_предмет_є_буфером(М, аргумент_повідомлення) {
        байти = отримати_значення_буфера(М, аргумент_повідомлення як адреса<ПредметБуфера>);
      } інакше якщо перевірити_чи_предмет_є_текстом(М, аргумент_повідомлення) {
        змінна значення_тексту = отримати_значення_тексту(М, аргумент_повідомлення як адреса<ПредметТексту>);
        байти = Байти { значення_тексту.розмір, значення_тексту.дані };
      } інакше {
        вернути падіння(М, "Повідомлення має бути байтами, буфером або текстом");
      }

      змінна предмет_структури_Звʼязок = отримати_глобально_притриманий_предмет(М, предмет_дії.дані як адреса<ГлобальноПритриманийПредмет>);

      якщо перевірити_чи_предмет_є(М, аргумент_отримувач, предмет_структури_Звʼязок як адреса<ПредметСтруктури>) == ні {
        вернути падіння(М, "Отримувач має бути звʼязком");
      }

      змінна інтернет_звʼязок = предмет_отримати_користувацькі_дані(М, аргумент_отримувач) як адреса<турбо::ІнтернетЗвʼязок>;
      якщо інтернет_звʼязок == пусто {
        вернути падіння(М, "Звʼязок відключено");
      }

      змінна турбіна = турбо::отримати_глобальну_турбіну();

      змінна дані_запису = виділити<ДаніВідкликуНаРезультатЗаписуВІнтернетЗвʼязок>(М);
      дані_запису.М = М;
      дані_запису.глобально_притриманий_предмет_звʼязку = притримати_глобально(М, аргумент_отримувач);
      дані_запису.глобально_притриманий_предмет_даних = притримати_глобально(М, аргумент_повідомлення);
      дані_запису.розмір = байти.розмір;
      дані_запису.дані = байти.дані;
      дані_запису.дані_треба_звільнити = позитивне(байти_треба_звільнити);

      турбо::записати_в_інтернет_звʼязок(турбіна, інтернет_звʼязок, байти.розмір, байти.дані, обробник_запису_інтернет_звʼязку, дані_запису);

      вернути пусто;
    }

    дія зробити_копію_даних_дії_модуля_інтернет_надіслати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>): невідома_адреса {
      змінна дані_дії = предмет_дії.дані як адреса<ГлобальноПритриманийПредмет>;
      вернути притримати_глобально(М, отримати_глобально_притриманий_предмет(М, дані_дії));
    }

    дія відклик_перед_звільненням_дії_модуля_інтернет_надіслати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>) {
      змінна дані_дії = предмет_дії.дані як адреса<ГлобальноПритриманийПредмет>;
      відпустити_глобально(М, дані_дії);
    }

    дія створити_дію_модуля_інтернет_надіслати(М: адреса<Машина>, предмет_структури_Звʼязок: адреса<Предмет>) -> ПредметАбоСтанПадіння<Предмет> {

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "надіслати"),
        0,
        пусто,
        рідна_дія_модуля_інтернет_надіслати,
        притримати_глобально(М, предмет_структури_Звʼязок),
        зробити_копію_даних_дії_модуля_інтернет_надіслати,
        відклик_перед_звільненням_дії_модуля_інтернет_надіслати
      ) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_інтернет_закінчити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна знайдено_аргумент_звʼязок = ні;
      змінна аргумент_звʼязок: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_звʼязок = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "звʼязок"), аргумент_звʼязок::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_звʼязок == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_звʼязок = так;
            аргумент_звʼязок = аргументи[0];
          }
        }
      }

      якщо аргумент_звʼязок == пусто {
        вернути падіння(М, "Перший аргумент має бути звʼязком");
      }

      змінна предмет_структури_Звʼязок = отримати_глобально_притриманий_предмет(М, предмет_дії.дані як адреса<ГлобальноПритриманийПредмет>);

      якщо перевірити_чи_предмет_є(М, аргумент_звʼязок, предмет_структури_Звʼязок як адреса<ПредметСтруктури>) == ні {
        вернути падіння(М, "Перший аргумент має бути звʼязком");
      }

      змінна інтернет_звʼязок = предмет_отримати_користувацькі_дані(М, аргумент_звʼязок) як адреса<турбо::ІнтернетЗвʼязок>;
      якщо інтернет_звʼязок == пусто {
        вернути пусто;
      }

      змінна турбіна = турбо::отримати_глобальну_турбіну();

      турбо::закінчити_інтернет_звʼязок(турбіна, інтернет_звʼязок);

      вернути пусто;
    }

    дія зробити_копію_даних_дії_модуля_інтернет_закінчити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>): невідома_адреса {
      змінна дані_дії = предмет_дії.дані як адреса<ГлобальноПритриманийПредмет>;
      вернути притримати_глобально(М, отримати_глобально_притриманий_предмет(М, дані_дії));
    }

    дія відклик_перед_звільненням_дії_модуля_інтернет_закінчити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>) {
      змінна дані_дії = предмет_дії.дані як адреса<ГлобальноПритриманийПредмет>;
      відпустити_глобально(М, дані_дії);
    }

    дія створити_дію_модуля_інтернет_закінчити(М: адреса<Машина>, предмет_структури_Звʼязок: адреса<Предмет>) -> ПредметАбоСтанПадіння<Предмет> {

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "закінчити"),
        0,
        пусто,
        рідна_дія_модуля_інтернет_закінчити,
        притримати_глобально(М, предмет_структури_Звʼязок),
        зробити_копію_даних_дії_модуля_інтернет_закінчити,
        відклик_перед_звільненням_дії_модуля_інтернет_закінчити
      ) як адреса<Предмет>;
    }
  }
}

// Обслуговувач
секція мавка {
  секція бібліотека {
    структура ДаніВідкликуІнтернетОбслуговувача {
      М: адреса<Машина>;
      глобально_притриманий_предмет_обслуговувача: адреса<ГлобальноПритриманийПредмет>;
      глобально_притриманий_предмет_обробника_запуску: адреса<ГлобальноПритриманийПредмет>;
      глобально_притриманий_предмет_структури_Звʼязок: адреса<ГлобальноПритриманийПредмет>;
    }

    структура ДаніДіїОбслуговувати {
      М: адреса<Машина>;
      глобально_притриманий_предмет_структури_Обслуговувач: адреса<ГлобальноПритриманийПредмет>;
      глобально_притриманий_предмет_структури_Звʼязок: адреса<ГлобальноПритриманийПредмет>;
    }

    дія обробник_запланованого_виконання_відклику_на_запуск_інтернет_обслуговувача(М: адреса<Машина>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна предмет_обробника_запуску = аргументи[0];

      вернути предмет_виконати(М, предмет_обробника_запуску, пусто, 3, аргументи[1]::адреса як памʼять<адреса<Предмет>>, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_підключення_звʼязку_інтернет_обслуговувача(М: адреса<Машина>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна предмет_обслуговувача = аргументи[0];

      вернути предмет_виконати_властивість(М, предмет_обслуговувача, створити_назву(М, "обробник_підключення_звʼязку"), 3, аргументи, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_зупинку_інтернет_обслуговувача(М: адреса<Машина>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна предмет_обслуговувача = аргументи[0];

      вернути предмет_виконати_властивість(М, предмет_обслуговувача, створити_назву(М, "обробник_зупинки"), 2, аргументи, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
    }

    дія обробник_запуску_інтернет_обслуговувача(турбіна: адреса<турбо::Турбіна>, інтернет_обслуговувач: адреса<турбо::ІнтернетОбслуговувач>, аргумент: невідома_адреса, успішно: логічне, код_помилки: ц32, іа: позитивне, порт: позитивне) {
      змінна дані_обслуговувача = аргумент як адреса<ДаніВідкликуІнтернетОбслуговувача>;
      змінна М = дані_обслуговувача.М;
      змінна предмет_обслуговувача = отримати_глобально_притриманий_предмет(М, дані_обслуговувача.глобально_притриманий_предмет_обслуговувача);
      змінна предмет_обробника_запуску = отримати_глобально_притриманий_предмет(М, дані_обслуговувача.глобально_притриманий_предмет_обробника_запуску);

      змінна кількість_аргументів: позитивне = 3;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, кількість_аргументів);
      аргументи[0] = предмет_обробника_запуску;
      аргументи[1] = предмет_обслуговувача;

      якщо успішно {
        аргументи[2] = пусто як адреса<Предмет>;

        предмет_змінити_користувацькі_дані(М, предмет_обслуговувача, інтернет_обслуговувач);
      } інакше {
        аргументи[2] = створити_предмет_числа(М, д64(код_помилки)) як адреса<Предмет>;
        якщо перевірити_чи_стан_падіння(М) {
          ПОМЕРТИ(М, "НОП: не вдалось створити число");
        }

        відпустити_глобально(М, дані_обслуговувача.глобально_притриманий_предмет_обслуговувача);
        відпустити_глобально(М, дані_обслуговувача.глобально_притриманий_предмет_обробника_запуску);
        відпустити_глобально(М, дані_обслуговувача.глобально_притриманий_предмет_структури_Звʼязок);
        звільнити(М, дані_обслуговувача);
      }

      запланувати_виконання(М, обробник_запланованого_виконання_відклику_на_запуск_інтернет_обслуговувача, пусто, пусто, кількість_аргументів, аргументи);
    }

    дія обробник_підключення_звʼязку_інтернет_обслуговувача(турбіна: адреса<турбо::Турбіна>, інтернет_обслуговувач: адреса<турбо::ІнтернетОбслуговувач>, інтернет_звʼязок: адреса<турбо::ІнтернетЗвʼязок>, аргумент: невідома_адреса) {
      змінна дані_обслуговувача = аргумент як адреса<ДаніВідкликуІнтернетОбслуговувача>;
      змінна М = дані_обслуговувача.М;
      змінна предмет_обслуговувача = отримати_глобально_притриманий_предмет(М, дані_обслуговувача.глобально_притриманий_предмет_обслуговувача);
      змінна предмет_структури_Звʼязок = отримати_глобально_притриманий_предмет(М, дані_обслуговувача.глобально_притриманий_предмет_структури_Звʼязок);

      змінна кількість_аргументів: позитивне = 3;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, кількість_аргументів);
      аргументи[0] = предмет_обслуговувача;

      змінна предмет_адреси = пусто як адреса<Предмет>;
      змінна предмет_порта = пусто як адреса<Предмет>;

      змінна кількість_аргументів_виконання_Звʼязок: позитивне = 2;
      змінна аргументи_виконання_Звʼязок = виділити_памʼять<адреса<Предмет>>(М, кількість_аргументів_виконання_Звʼязок);
      аргументи_виконання_Звʼязок[0] = предмет_адреси;
      аргументи_виконання_Звʼязок[1] = предмет_порта;

      змінна предмет_звʼязку = предмет_виконати(М, предмет_структури_Звʼязок, пусто, кількість_аргументів_виконання_Звʼязок, аргументи_виконання_Звʼязок, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      звільнити_памʼять(М, аргументи_виконання_Звʼязок);
      якщо перевірити_чи_стан_падіння(М) {
        ПОМЕРТИ(М, "НОП: не вдалось створити предмет структури Звʼязок");
      } інакше {
        предмет_змінити_користувацькі_дані(М, предмет_звʼязку, інтернет_звʼязок);

        змінна дані_звʼязку = виділити<ДаніВідкликуІнтернетЗвʼязку>(М);
        дані_звʼязку.М = М;
        дані_звʼязку.глобально_притриманий_предмет_звʼязку = притримати_глобально(М, предмет_звʼязку);
        дані_звʼязку.глобально_притриманий_предмет_обробника_підключення = пусто;

        турбо::встановити_обробники_інтернет_звʼязку(
          турбіна,
          інтернет_звʼязок,
          обробник_даних_інтернет_звʼязку,
          обробник_закінчення_інтернет_звʼязку,
          обробник_відключення_інтернет_звʼязку,
          дані_звʼязку
        );

        аргументи[1] = предмет_звʼязку;
        аргументи[2] = пусто як адреса<Предмет>;

        запланувати_виконання(М, обробник_запланованого_виконання_відклику_на_підключення_звʼязку_інтернет_обслуговувача, пусто, пусто, кількість_аргументів, аргументи);
      }
    }

    дія обробник_зупинки_інтернет_обслуговувача(турбіна: адреса<турбо::Турбіна>, інтернет_обслуговувач: адреса<турбо::ІнтернетОбслуговувач>, аргумент: невідома_адреса) {
      змінна дані_обслуговувача = аргумент як адреса<ДаніВідкликуІнтернетОбслуговувача>;
      змінна М = дані_обслуговувача.М;
      змінна предмет_обслуговувача = отримати_глобально_притриманий_предмет(М, дані_обслуговувача.глобально_притриманий_предмет_обслуговувача);

      предмет_змінити_користувацькі_дані(М, предмет_обслуговувача, пусто);

      змінна кількість_аргументів: позитивне = 1;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, кількість_аргументів);
      аргументи[0] = предмет_обслуговувача;

      запланувати_виконання(М, обробник_запланованого_виконання_відклику_на_зупинку_інтернет_обслуговувача, пусто, пусто, кількість_аргументів, аргументи);
    }

    дія створити_предмет_структури_Обслуговувач(М: адреса<Машина>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна притримувач = покласти_притримувач(М);

      змінна кількість_параметрів: позитивне = 4;
      змінна параметри = виділити_памʼять<адреса<Предмет>>(М, кількість_параметрів);



      змінна параметр_адреса = створити_предмет_параметра(М, створити_назву(М, "адреса"), пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути параметр_адреса;
      }
      параметри[0] = параметр_адреса;
      притримати(М, притримувач, параметр_адреса);

      змінна параметр_порт = створити_предмет_параметра(М, створити_назву(М, "порт"), пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути параметр_порт;
      }
      параметри[1] = параметр_порт;
      притримати(М, притримувач, параметр_порт);

      змінна параметр_обробник_підключення_звʼязку = створити_предмет_параметра(М, створити_назву(М, "обробник_підключення_звʼязку"), пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути параметр_обробник_підключення_звʼязку;
      }
      параметри[2] = параметр_обробник_підключення_звʼязку;
      притримати(М, притримувач, параметр_обробник_підключення_звʼязку);

      змінна параметр_обробник_зупинки = створити_предмет_параметра(М, створити_назву(М, "обробник_зупинки"), пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути параметр_обробник_зупинки;
      }
      параметри[3] = параметр_обробник_зупинки;
      притримати(М, притримувач, параметр_обробник_зупинки);

      змінна предмет_структури_Обслуговувач = створити_предмет_структури(
        М,
        створити_назву(М, "Обслуговувач"),
        М.предмет_структури_предмет,
        кількість_параметрів,
        параметри як памʼять<адреса<ПредметПараметра>>
      ) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути предмет_структури_Обслуговувач;
      }

      забрати_притримувач(М);
      вернути предмет_структури_Обслуговувач;
    }

    дія рідна_дія_модуля_інтернет_обслуговувати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна знайдено_аргумент_адреса = ні;
      змінна аргумент_адреса: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_порт = ні;
      змінна аргумент_порт: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_обробник_запуску = ні;
      змінна аргумент_обробник_запуску: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_формат_даних = ні;
      змінна аргумент_формат_даних: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_адреса = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "адреса"), аргумент_адреса::адреса);
        знайдено_аргумент_порт = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "порт"), аргумент_порт::адреса);
        знайдено_аргумент_обробник_запуску = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "обробник_запуску"), аргумент_обробник_запуску::адреса);
        знайдено_аргумент_формат_даних = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "формат_даних"), аргумент_формат_даних::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_адреса == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_адреса = так;
            аргумент_адреса = аргументи[0];
          }
        }
        якщо знайдено_аргумент_порт == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_порт = так;
            аргумент_порт = аргументи[1];
          }
        }
        якщо знайдено_аргумент_обробник_запуску == ні {
          якщо кількість_аргументів > 2 {
            знайдено_аргумент_обробник_запуску = так;
            аргумент_обробник_запуску = аргументи[2];
          }
        }
        якщо знайдено_аргумент_формат_даних == ні {
          якщо кількість_аргументів > 3 {
            знайдено_аргумент_формат_даних = так;
            аргумент_формат_даних = аргументи[3];
          }
        }
      }

      якщо аргумент_адреса == пусто {
        вернути падіння(М, "Адреса має бути текстом");
      }
      якщо аргумент_порт == пусто {
        вернути падіння(М, "Порт має бути числом");
      }

      змінна адреса_т8 = т8 { 0, пусто };

      якщо перевірити_чи_предмет_є_текстом(М, аргумент_адреса) {
        адреса_т8 = отримати_значення_тексту(М, аргумент_адреса як адреса<ПредметТексту>);
      } інакше {
        вернути падіння(М, "Адреса має бути текстом");
      }

      якщо перевірити_чи_предмет_є_числом(М, аргумент_порт) == ні {
        вернути падіння(М, "Порт має бути числом");
      }

      змінна порт = ц32(отримати_значення_числа(М, аргумент_порт як адреса<ПредметЧисла>));

      змінна дані_дії_обслуговувати = предмет_дії.дані як адреса<ДаніДіїОбслуговувати>;

      змінна предмет_структури_Обслуговувач = отримати_глобально_притриманий_предмет(М, дані_дії_обслуговувати.глобально_притриманий_предмет_структури_Обслуговувач як адреса<ГлобальноПритриманийПредмет>);
      змінна предмет_структури_Звʼязок = отримати_глобально_притриманий_предмет(М, дані_дії_обслуговувати.глобально_притриманий_предмет_структури_Звʼязок як адреса<ГлобальноПритриманийПредмет>);

      змінна кількість_аргументів_виконання_Обслуговувач: позитивне = 2;
      змінна аргументи_виконання_Обслуговувач = виділити_памʼять<адреса<Предмет>>(М, кількість_аргументів_виконання_Обслуговувач);
      аргументи_виконання_Обслуговувач[0] = аргумент_адреса;
      аргументи_виконання_Обслуговувач[1] = аргумент_порт;
      змінна предмет_обслуговувача = предмет_виконати(М, предмет_структури_Обслуговувач, пусто, кількість_аргументів_виконання_Обслуговувач, аргументи_виконання_Обслуговувач, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      звільнити_памʼять(М, аргументи_виконання_Обслуговувач);
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_обслуговувача;
      }

      змінна турбіна = турбо::отримати_глобальну_турбіну();

      змінна дані_обслуговувача = виділити<ДаніВідкликуІнтернетОбслуговувача>(М);
      дані_обслуговувача.М = М;
      дані_обслуговувача.глобально_притриманий_предмет_обслуговувача = притримати_глобально(М, предмет_обслуговувача);
      дані_обслуговувача.глобально_притриманий_предмет_обробника_запуску = притримати_глобально(М, аргумент_обробник_запуску);
      дані_обслуговувача.глобально_притриманий_предмет_структури_Звʼязок = притримати_глобально(М, предмет_структури_Звʼязок);

      змінна іа: позитивне = 0;
      змінна результат_іа = турбо::отримати_інтернет_адресу(турбіна, адреса_т8, іа::адреса);
      якщо результат_іа == ні {
        вернути падіння(М, "Не вдалось отримати іа");
      }

      турбо::запустити_інтернет_обслуговувач(
        турбіна,
        іа,
        позитивне(порт),
        обробник_запуску_інтернет_обслуговувача,
        обробник_підключення_звʼязку_інтернет_обслуговувача,
        обробник_зупинки_інтернет_обслуговувача,
        дані_обслуговувача
      );

      вернути пусто;
    }

    дія зробити_копію_даних_дії_модуля_інтернет_обслуговувати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>): невідома_адреса {
      // потім: втілити
      вернути пусто;
    }

    дія відклик_перед_звільненням_дії_модуля_інтернет_обслуговувати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>) {
      змінна дані_дії_обслуговувати = предмет_дії.дані як адреса<ДаніДіїОбслуговувати>;
      відпустити_глобально(М, дані_дії_обслуговувати.глобально_притриманий_предмет_структури_Обслуговувач);
      відпустити_глобально(М, дані_дії_обслуговувати.глобально_притриманий_предмет_структури_Звʼязок);
      звільнити(М, дані_дії_обслуговувати);
    }

    дія створити_дію_модуля_інтернет_обслуговувати(М: адреса<Машина>, предмет_структури_Обслуговувач: адреса<Предмет>, предмет_структури_Звʼязок: адреса<Предмет>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна дані_дії_обслуговувати = виділити<ДаніДіїОбслуговувати>(М);
      дані_дії_обслуговувати.глобально_притриманий_предмет_структури_Обслуговувач = притримати_глобально(М, предмет_структури_Обслуговувач);
      дані_дії_обслуговувати.глобально_притриманий_предмет_структури_Звʼязок = притримати_глобально(М, предмет_структури_Звʼязок);



      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "обслуговувати"),
        0,
        пусто,
        рідна_дія_модуля_інтернет_обслуговувати,
        дані_дії_обслуговувати,
        зробити_копію_даних_дії_модуля_інтернет_обслуговувати,
        відклик_перед_звільненням_дії_модуля_інтернет_обслуговувати
      ) як адреса<Предмет>;
    }
  }
}

секція мавка {
  секція бібліотека {
    дія створити_модуль_інтернет(М: адреса<Машина>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна притримувач = покласти_притримувач(М);



      змінна предмет_модуля = створити_предмет_модуля(М, створити_назву(М, "інтернет")) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути предмет_модуля;
      }
      притримати(М, притримувач, предмет_модуля);

      змінна предмет_структури_Звʼязок = створити_предмет_структури_Звʼязок(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути предмет_структури_Звʼязок;
      }
      притримати(М, притримувач, предмет_структури_Звʼязок);
      змінна результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "Звʼязок"), предмет_структури_Звʼязок, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути результат_зміни_властивості;
      }

      змінна предмет_структури_Обслуговувач = створити_предмет_структури_Обслуговувач(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути предмет_структури_Обслуговувач;
      }
      притримати(М, притримувач, предмет_структури_Обслуговувач);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "Обслуговувач"), предмет_структури_Обслуговувач, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути результат_зміни_властивості;
      }

      змінна предмет_дії_обслуговувати = створити_дію_модуля_інтернет_обслуговувати(М, предмет_структури_Обслуговувач, предмет_структури_Звʼязок);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути предмет_дії_обслуговувати;
      }
      притримати(М, притримувач, предмет_дії_обслуговувати);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "обслуговувати"), предмет_дії_обслуговувати, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути результат_зміни_властивості;
      }

      змінна предмет_дії_звʼязатись = створити_дію_модуля_інтернет_звʼязатись(М, предмет_структури_Звʼязок);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути предмет_дії_звʼязатись;
      }
      притримати(М, притримувач, предмет_дії_звʼязатись);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "звʼязатись"), предмет_дії_звʼязатись, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути результат_зміни_властивості;
      }

      змінна предмет_дії_надіслати = створити_дію_модуля_інтернет_надіслати(М, предмет_структури_Звʼязок);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути предмет_дії_надіслати;
      }
      притримати(М, притримувач, предмет_дії_надіслати);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "надіслати"), предмет_дії_надіслати, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути результат_зміни_властивості;
      }

      змінна предмет_дії_закінчити = створити_дію_модуля_інтернет_закінчити(М, предмет_структури_Звʼязок);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути предмет_дії_закінчити;
      }
      притримати(М, притримувач, предмет_дії_закінчити);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "закінчити"), предмет_дії_закінчити, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути результат_зміни_властивості;
      }

      забрати_притримувач(М);
      вернути предмет_модуля;
    }

    місцева дія взяти_модуль_біб_інтернет(М: адреса<Машина>) -> ПредметАбоСтанПадіння<Предмет> {

      змінна результат = створити_предмет_тексту(М, "мавка:бібліотека/інтернет/інтернет.ц") як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат як адреса<Предмет>;
      }
      змінна предмет_шляху = результат;
      змінна взятий_предмет: адреса<Предмет> = пусто;
      якщо отримати_взятий_предмет(М, предмет_шляху як адреса<Предмет>, взятий_предмет::адреса) {
        вернути взятий_предмет як адреса<Предмет>;
      }
      результат = створити_модуль_інтернет(М);
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат;
      }
      покласти_взятий_предмет(М, предмет_шляху як адреса<Предмет>, результат як адреса<Предмет>);
      вернути результат;
    }
  }
}