взяти визначення МаМа;
взяти визначення мавка/бібліотека;

структура Рушій;
структура Обслуговувач;
структура Клієнт;

синонім ВідкликНаПідключенняОбслуговувача = (рушій: адреса<Рушій>, обслуговувач: адреса<Обслуговувач>, аргумент: невідома_адреса, оф: ц32, адр: ю8, прт: ю8) -> ніщо;
синонім ВідкликНаДаніОбслуговувача = (рушій: адреса<Рушій>, обслуговувач: адреса<Обслуговувач>, аргумент: невідома_адреса, оф: ц32, розмір: позитивне, дані: памʼять<п8>) -> ніщо;
синонім ВідкликНаВідключенняОбслуговувача = (рушій: адреса<Рушій>, обслуговувач: адреса<Обслуговувач>, аргумент: невідома_адреса, оф: ц32) -> ніщо;
синонім ВідкликНаЗупинкуОбслуговувача = (рушій: адреса<Рушій>, обслуговувач: адреса<Обслуговувач>, аргумент: невідома_адреса) -> ніщо;

синонім ВідкликНаПідключенняКлієнта = (рушій: адреса<Рушій>, клієнт: адреса<Клієнт>, аргумент: невідома_адреса) -> ніщо;
синонім ВідкликНаДаніКлієнта = (рушій: адреса<Рушій>, клієнт: адреса<Клієнт>, аргумент: невідома_адреса, розмір: позитивне, дані: памʼять<п8>) -> ніщо;
синонім ВідкликНаВідключенняКлієнта = (рушій: адреса<Рушій>, клієнт: адреса<Клієнт>, аргумент: невідома_адреса) -> ніщо;

зовнішня дія мавка_біб_отримати_рушій(): адреса<Рушій>;
зовнішня дія мавка_біб_запустити_обслуговувач(рушій: адреса<Рушій>, а: ю8, п: ц32, аргумент: невідома_адреса, відклик_на_підключення: ВідкликНаПідключенняОбслуговувача, відклик_на_дані: ВідкликНаДаніОбслуговувача, відклик_на_відключення: ВідкликНаВідключенняОбслуговувача, відклик_на_зупинку: ВідкликНаЗупинкуОбслуговувача): ц32;
зовнішня дія мавка_біб_зупинити_обслуговувач(рушій: адреса<Рушій>, оф: ц32): ц32;
зовнішня дія мавка_біб_підключити_клієнт(рушій: адреса<Рушій>, а: ю8, п: ц32, аргумент: невідома_адреса, відклик_на_підключення: ВідкликНаПідключенняКлієнта, відклик_на_дані: ВідкликНаДаніКлієнта, відклик_на_відключення: ВідкликНаВідключенняКлієнта): ц32;
зовнішня дія мавка_біб_відключити_клієнт(рушій: адреса<Рушій>, оф: ц32): ц32;
зовнішня дія мавка_біб_надіслати(рушій: адреса<Рушій>, оф: ц32, розмір: позитивне, дані: памʼять<п8>): ц32;

секція мавка {
  секція бібліотека {
    структура ДаніОбслуговувача {
      обчислювач: адреса<Обчислювач>;
      предмет_обслуговувача: адреса<Предмет>;
      глобально_притриманий_предмет_обслуговувача: адреса<ГлобальноПритриманийПредмет>;
    }

    структура ДаніКлієнта {
      обчислювач: адреса<Обчислювач>;
      предмет_клієнта: адреса<Предмет>;
      глобально_притриманий_предмет_клієнта: адреса<ГлобальноПритриманийПредмет>;
    }

    дія обробник_запланованого_виконання_відклику_на_підключення_обслуговувача(обчислювач: адреса<Обчислювач>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>): предмет_або_стан_падіння {
      ціль предмет_обслуговувача = аргументи[0];
      вернути предмет_виконати_властивість(обчислювач, предмет_обслуговувача, назва(обчислювач, "обробник_підключення"), кількість_аргументів, аргументи, пусто, Місцезнаходження { пусто, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_дані_обслуговувача(обчислювач: адреса<Обчислювач>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>): предмет_або_стан_падіння {
      ціль предмет_обслуговувача = аргументи[0];
      вернути предмет_виконати_властивість(обчислювач, предмет_обслуговувача, назва(обчислювач, "обробник_повідомлення"), кількість_аргументів, аргументи, пусто, Місцезнаходження { пусто, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_відключення_обслуговувача(обчислювач: адреса<Обчислювач>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>): предмет_або_стан_падіння {
      ціль предмет_обслуговувача = аргументи[0];
      вернути предмет_виконати_властивість(обчислювач, предмет_обслуговувача, назва(обчислювач, "обробник_відключення"), кількість_аргументів, аргументи, пусто, Місцезнаходження { пусто, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_зупинку_обслуговувача(обчислювач: адреса<Обчислювач>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>): предмет_або_стан_падіння {
      ціль предмет_обслуговувача = аргументи[0];
      вернути предмет_виконати_властивість(обчислювач, предмет_обслуговувача, назва(обчислювач, "обробник_зупинки"), кількість_аргументів, аргументи, пусто, Місцезнаходження { пусто, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_підключення_підключення(обчислювач: адреса<Обчислювач>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>): предмет_або_стан_падіння {
      ціль предмет_підключення = аргументи[0];
      вернути предмет_виконати_властивість(обчислювач, предмет_підключення, назва(обчислювач, "обробник_підключення"), кількість_аргументів, аргументи, пусто, Місцезнаходження { пусто, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_дані_підключення(обчислювач: адреса<Обчислювач>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>): предмет_або_стан_падіння {
      ціль предмет_підключення = аргументи[0];
      вернути предмет_виконати_властивість(обчислювач, предмет_підключення, назва(обчислювач, "обробник_повідомлення"), кількість_аргументів, аргументи, пусто, Місцезнаходження { пусто, 0 });
    }

    дія обробник_запланованого_виконання_відклику_на_відключення_підключення(обчислювач: адреса<Обчислювач>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>): предмет_або_стан_падіння {
      ціль предмет_підключення = аргументи[0];
      вернути предмет_виконати_властивість(обчислювач, предмет_підключення, назва(обчислювач, "обробник_відключення"), кількість_аргументів, аргументи, пусто, Місцезнаходження { пусто, 0 });
    }

    дія відклик_на_підключення_обслуговувача(рушій: адреса<Рушій>, обслуговувач: адреса<Обслуговувач>, аргумент: невідома_адреса, оф: ц32, адр: ю8, прт: ю8) {
      ціль дані_обслуговувача = аргумент як адреса<ДаніОбслуговувача>;
      ціль обчислювач = дані_обслуговувача.обчислювач;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(обчислювач, 4);
      аргументи[0] = дані_обслуговувача.предмет_обслуговувача;
      аргументи[1] = створити_число(обчислювач, д64(оф));
      аргументи[2] = створити_юнікод_з_ю8(обчислювач, адр);
      аргументи[3] = створити_юнікод_з_ю8(обчислювач, прт);
      запланувати_виконання(обчислювач, обробник_запланованого_виконання_відклику_на_підключення_обслуговувача, пусто, пусто, 4, аргументи);
    }

    дія відклик_на_відключення_обслуговувача(рушій: адреса<Рушій>, обслуговувач: адреса<Обслуговувач>, аргумент: невідома_адреса, оф: ц32) {
      ціль дані_обслуговувача = аргумент як адреса<ДаніОбслуговувача>;
      ціль обчислювач = дані_обслуговувача.обчислювач;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(обчислювач, 2);
      аргументи[0] = дані_обслуговувача.предмет_обслуговувача;
      аргументи[1] = створити_число(обчислювач, д64(оф));
      запланувати_виконання(обчислювач, обробник_запланованого_виконання_відклику_на_відключення_обслуговувача, пусто, пусто, 2, аргументи);
    }

    дія відклик_на_зупинку_обслуговувача(рушій: адреса<Рушій>, обслуговувач: адреса<Обслуговувач>, аргумент: невідома_адреса) {
      ціль дані_обслуговувача = аргумент як адреса<ДаніОбслуговувача>;
      ціль обчислювач = дані_обслуговувача.обчислювач;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(обчислювач, 1);
      аргументи[0] = дані_обслуговувача.предмет_обслуговувача;
      запланувати_виконання(обчислювач, обробник_запланованого_виконання_відклику_на_зупинку_обслуговувача, пусто, пусто, 1, аргументи);
      відпустити_глобально(обчислювач, дані_обслуговувача.глобально_притриманий_предмет_обслуговувача);
      звільнити(обчислювач, дані_обслуговувача);
    }

    дія відклик_на_дані_обслуговувача(рушій: адреса<Рушій>, обслуговувач: адреса<Обслуговувач>, аргумент: невідома_адреса, оф: ц32, розмір: позитивне, дані: памʼять<п8>) {
      ціль дані_обслуговувача = аргумент як адреса<ДаніОбслуговувача>;
      ціль обчислювач = дані_обслуговувача.обчислювач;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(обчислювач, 3);
      аргументи[0] = дані_обслуговувача.предмет_обслуговувача;
      аргументи[1] = створити_число(обчислювач, д64(оф));
      аргументи[2] = створити_байти_без_копіювання(обчислювач, розмір, дані);
      запланувати_виконання(обчислювач, обробник_запланованого_виконання_відклику_на_дані_обслуговувача, пусто, пусто, 3, аргументи);
    }

    дія рідна_дія_метода_складеного_предмета_Обслуговувач_запустити(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      ціль рушій = мавка_біб_отримати_рушій();

      змінна дані_обслуговувача = виділити<ДаніОбслуговувача>(обчислювач);
      дані_обслуговувача.обчислювач = обчислювач;
      дані_обслуговувача.предмет_обслуговувача = предмет_я;
      дані_обслуговувача.глобально_притриманий_предмет_обслуговувача = притримати_глобально(обчислювач, предмет_я);

      ціль притримувач = покласти_притримувач(обчислювач);

      ціль предмет_адреси = предмет_отримати_властивість(обчислювач, предмет_я, назва(обчислювач, "адреса"), Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        звільнити(обчислювач, дані_обслуговувача);
        забрати_притримувач(обчислювач);
        вернути предмет_адреси;
      }
      притримати(обчислювач, притримувач, предмет_адреси);

      ціль предмет_порта = предмет_отримати_властивість(обчислювач, предмет_я, назва(обчислювач, "порт"), Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        звільнити(обчислювач, дані_обслуговувача);
        забрати_притримувач(обчислювач);
        вернути предмет_порта;
      }
      забрати_притримувач(обчислювач);

      якщо перевірити_чи_предмет_є_текстом(обчислювач, предмет_адреси) == ні {
        звільнити(обчислювач, дані_обслуговувача);
        вернути падіння(обчислювач, "Адреса має бути текстом");
      }
      якщо перевірити_чи_предмет_є_числом(обчислювач, предмет_порта) == ні {
        звільнити(обчислювач, дані_обслуговувача);
        вернути падіння(обчислювач, "Порт має бути числом");
      }

      змінна адреса_т8 = отримати_значення_тексту(обчислювач, предмет_адреси);
      змінна адреса_ю8 = ю8 { 0, пусто };
      якщо перекодувати_т8_в_ю8(обчислювач, адреса_т8, адреса_ю8::адреса) == ні {
        звільнити(обчислювач, дані_обслуговувача);
        вернути падіння(обчислювач, "Не вдалось отримати ю8 з тексту адреси");
      }

      ціль порт = ц32(отримати_значення_числа(обчислювач, предмет_порта));

      ціль результат_запуску = мавка_біб_запустити_обслуговувач(рушій, адреса_ю8, порт, дані_обслуговувача, відклик_на_підключення_обслуговувача, відклик_на_дані_обслуговувача, відклик_на_відключення_обслуговувача, відклик_на_зупинку_обслуговувача);
      звільнити_памʼять(обчислювач, адреса_ю8.дані);
      якщо результат_запуску == 0ц32-1 {
        // потім: помилка
        звільнити(обчислювач, дані_обслуговувача);
      }

      вернути пусто;
    }

    дія рідна_дія_метода_складеного_предмета_Обслуговувач_зупинити(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      ціль рушій = мавка_біб_отримати_рушій();
      ціль результат_зупинки = мавка_біб_зупинити_обслуговувач(рушій, 0);
      якщо результат_зупинки == 0ц32-1 {
        // потім: помилка
      }
      вернути пусто;
    }

    дія рідна_дія_метода_складеного_предмета_Обслуговувач_надіслати(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_клієнт = ні;
      змінна аргумент_клієнт: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_повідомлення = ні;
      змінна аргумент_повідомлення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_клієнт = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва(обчислювач, "клієнт"), аргумент_клієнт::адреса);
        знайдено_аргумент_повідомлення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва(обчислювач, "повідомлення"), аргумент_повідомлення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_клієнт == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_клієнт = так;
            аргумент_клієнт = аргументи[0];
          }
        }
        якщо знайдено_аргумент_повідомлення == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_повідомлення = так;
            аргумент_повідомлення = аргументи[1];
          }
        }
      }
      якщо перевірити_чи_предмет_є_числом(обчислювач, аргумент_клієнт) == ні {
        вернути падіння(обчислювач, "Клієнт має бути числом");
      }
      якщо перевірити_чи_предмет_є_байтами(обчислювач, аргумент_повідомлення) == ні {
        вернути падіння(обчислювач, "Повідомлення має бути байтами");
      }
      ціль клієнт_д64 = отримати_значення_числа(обчислювач, аргумент_клієнт);
      ціль клієнт = ц32(клієнт_д64);
      ціль байти = отримати_значення_байтів(обчислювач, аргумент_повідомлення);
      ціль результат_надсилання = мавка_біб_надіслати(мавка_біб_отримати_рушій(), клієнт, байти.розмір, байти.дані);
      якщо результат_надсилання == 0ц32-1 {
        // потім: помилка
      }
      вернути пусто;
    }

    дія створити_предмет_структури_Обслуговувач(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
      ціль притримувач = покласти_притримувач(обчислювач);

      ціль кількість_параметрів: позитивне = 6;
      змінна параметри = виділити_памʼять<адреса<Предмет>>(обчислювач, кількість_параметрів);

      ціль параметр_оф = створити_параметр(обчислювач, назва(обчислювач, "оф"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_оф;
      }
      параметри[0] = параметр_оф;
      притримати(обчислювач, притримувач, параметр_оф);

      ціль параметр_адреса = створити_параметр(обчислювач, назва(обчислювач, "адреса"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_адреса;
      }
      параметри[1] = параметр_адреса;
      притримати(обчислювач, притримувач, параметр_адреса);

      ціль параметр_порт = створити_параметр(обчислювач, назва(обчислювач, "порт"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_порт;
      }
      параметри[2] = параметр_порт;
      притримати(обчислювач, притримувач, параметр_порт);

      ціль параметр_обробник_підключення = створити_параметр(обчислювач, назва(обчислювач, "обробник_підключення"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_обробник_підключення;
      }
      параметри[3] = параметр_обробник_підключення;
      притримати(обчислювач, притримувач, параметр_обробник_підключення);

      ціль параметр_обробник_відключення = створити_параметр(обчислювач, назва(обчислювач, "обробник_відключення"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_обробник_відключення;
      }
      параметри[4] = параметр_обробник_відключення;
      притримати(обчислювач, притримувач, параметр_обробник_відключення);

      ціль параметр_обробник_повідомлення = створити_параметр(обчислювач, назва(обчислювач, "обробник_повідомлення"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_обробник_повідомлення;
      }
      параметри[5] = параметр_обробник_повідомлення;
      притримати(обчислювач, притримувач, параметр_обробник_повідомлення);

      ціль предмет_структури_Обслуговувач = створити_структуру(обчислювач, назва(обчислювач, "Обслуговувач"), отримати_предмет_структури_предмет(обчислювач), кількість_параметрів, параметри);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_структури_Обслуговувач;
      }

      ціль предмет_дії_метода_запустити = створити_рідну_дію(обчислювач, назва(обчислювач, т8"запустити"), 0, пусто, пусто, рідна_дія_метода_складеного_предмета_Обслуговувач_запустити);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_метода_запустити;
      }
      притримати(обчислювач, притримувач, предмет_дії_метода_запустити);
      змінна результат_запису_метода = предмет_записати_метод(обчислювач, предмет_структури_Обслуговувач, назва(обчислювач, "запустити"), предмет_дії_метода_запустити, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_запису_метода;
      }

      ціль предмет_дії_метода_зупинити = створити_рідну_дію(обчислювач, назва(обчислювач, т8"зупинити"), 0, пусто, пусто, рідна_дія_метода_складеного_предмета_Обслуговувач_зупинити);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_метода_зупинити;
      }
      притримати(обчислювач, притримувач, предмет_дії_метода_зупинити);
      результат_запису_метода = предмет_записати_метод(обчислювач, предмет_структури_Обслуговувач, назва(обчислювач, "зупинити"), предмет_дії_метода_зупинити, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_запису_метода;
      }

      ціль предмет_дії_метода_надіслати = створити_рідну_дію(обчислювач, назва(обчислювач, т8"надіслати"), 0, пусто, пусто, рідна_дія_метода_складеного_предмета_Обслуговувач_надіслати);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_метода_надіслати;
      }
      притримати(обчислювач, притримувач, предмет_дії_метода_надіслати);
      результат_запису_метода = предмет_записати_метод(обчислювач, предмет_структури_Обслуговувач, назва(обчислювач, "надіслати"), предмет_дії_метода_надіслати, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_запису_метода;
      }

      забрати_притримувач(обчислювач);
      вернути предмет_структури_Обслуговувач;
    }

    дія відклик_на_підключення_клієнта(рушій: адреса<Рушій>, клієнт: адреса<Клієнт>, аргумент: невідома_адреса) {
      ціль дані_клієнта = аргумент як адреса<ДаніКлієнта>;
      ціль обчислювач = дані_клієнта.обчислювач;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(обчислювач, 1);
      аргументи[0] = дані_клієнта.предмет_клієнта;
      запланувати_виконання(обчислювач, обробник_запланованого_виконання_відклику_на_підключення_підключення, пусто, пусто, 1, аргументи);
    }

    дія відклик_на_дані_клієнта(рушій: адреса<Рушій>, клієнт: адреса<Клієнт>, аргумент: невідома_адреса, розмір: позитивне, дані: памʼять<п8>) {
      ціль дані_клієнта = аргумент як адреса<ДаніКлієнта>;
      ціль обчислювач = дані_клієнта.обчислювач;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(обчислювач, 2);
      аргументи[0] = дані_клієнта.предмет_клієнта;
      аргументи[1] = створити_байти_без_копіювання(обчислювач, розмір, дані);
      запланувати_виконання(обчислювач, обробник_запланованого_виконання_відклику_на_дані_підключення, пусто, пусто, 2, аргументи);
    }

    дія відклик_на_відключення_клієнта(рушій: адреса<Рушій>, клієнт: адреса<Клієнт>, аргумент: невідома_адреса) {
      ціль дані_клієнта = аргумент як адреса<ДаніКлієнта>;
      ціль обчислювач = дані_клієнта.обчислювач;
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(обчислювач, 1);
      аргументи[0] = дані_клієнта.предмет_клієнта;
      запланувати_виконання(обчислювач, обробник_запланованого_виконання_відклику_на_відключення_підключення, пусто, пусто, 1, аргументи);
      звільнити(обчислювач, дані_клієнта);
    }

    дія рідна_дія_метода_складеного_предмета_Клієнт_підключитись(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      ціль рушій = мавка_біб_отримати_рушій();

      змінна дані_клієнта = виділити<ДаніКлієнта>(обчислювач);
      дані_клієнта.обчислювач = обчислювач;
      дані_клієнта.предмет_клієнта = предмет_я;
      дані_клієнта.глобально_притриманий_предмет_клієнта = притримати_глобально(обчислювач, предмет_я);

      ціль притримувач = покласти_притримувач(обчислювач);

      ціль предмет_адреси = предмет_отримати_властивість(обчислювач, предмет_я, назва(обчислювач, "адреса"), Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        звільнити(обчислювач, дані_клієнта);
        забрати_притримувач(обчислювач);
        вернути предмет_адреси;
      }
      притримати(обчислювач, притримувач, предмет_адреси);

      ціль предмет_порта = предмет_отримати_властивість(обчислювач, предмет_я, назва(обчислювач, "порт"), Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        звільнити(обчислювач, дані_клієнта);
        забрати_притримувач(обчислювач);
        вернути предмет_порта;
      }
      забрати_притримувач(обчислювач);

      якщо перевірити_чи_предмет_є_текстом(обчислювач, предмет_адреси) == ні {
        звільнити(обчислювач, дані_клієнта);
        вернути падіння(обчислювач, "Адреса має бути текстом");
      }
      якщо перевірити_чи_предмет_є_числом(обчислювач, предмет_порта) == ні {
        звільнити(обчислювач, дані_клієнта);
        вернути падіння(обчислювач, "Порт має бути числом");
      }

      змінна адреса_т8 = отримати_значення_тексту(обчислювач, предмет_адреси);
      змінна адреса_ю8 = ю8 { 0, пусто };
      якщо перекодувати_т8_в_ю8(обчислювач, адреса_т8, адреса_ю8::адреса) == ні {
        звільнити(обчислювач, дані_клієнта);
        вернути падіння(обчислювач, "Не вдалось отримати ю8 з тексту адреси");
      }

      ціль порт = ц32(отримати_значення_числа(обчислювач, предмет_порта));

      ціль результат_підключення = мавка_біб_підключити_клієнт(рушій, адреса_ю8, порт, дані_клієнта, відклик_на_підключення_клієнта, відклик_на_дані_клієнта, відклик_на_відключення_клієнта);
      звільнити_памʼять(обчислювач, адреса_ю8.дані);
      якщо результат_підключення == 0ц32-1 {
        // потім: помилка
        звільнити(обчислювач, дані_клієнта);
      }

      ціль результат_зміни_властивості = предмет_змінити_властивість(обчислювач, предмет_я, назва(обчислювач, "оф"), створити_число(обчислювач, д64(результат_підключення)), Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути результат_зміни_властивості;
      }

      вернути пусто;
    }

    дія рідна_дія_метода_складеного_предмета_Клієнт_відключитись(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      ціль рушій = мавка_біб_отримати_рушій();

      ціль предмет_оф = предмет_отримати_властивість(обчислювач, предмет_я, назва(обчислювач, "оф"), Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути предмет_оф;
      }
      якщо перевірити_чи_предмет_є_числом(обчислювач, предмет_оф) == ні {
        вернути падіння(обчислювач, "Клієнт має бути числом");
      }
      ціль клієнт_д64 = отримати_значення_числа(обчислювач, предмет_оф);
      ціль клієнт = ц32(клієнт_д64);

      ціль результат_зупинки = мавка_біб_відключити_клієнт(рушій, клієнт);
      якщо результат_зупинки == 0ц32-1 {
        // потім: помилка
      }

      вернути пусто;
    }

    дія рідна_дія_метода_складеного_предмета_Клієнт_надіслати(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_повідомлення = ні;
      змінна аргумент_повідомлення: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_повідомлення = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва(обчислювач, "повідомлення"), аргумент_повідомлення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_повідомлення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_повідомлення = так;
            аргумент_повідомлення = аргументи[0];
          }
        }
      }
      ціль предмет_оф = предмет_отримати_властивість(обчислювач, предмет_я, назва(обчислювач, "оф"), Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути предмет_оф;
      }
      якщо перевірити_чи_предмет_є_числом(обчислювач, предмет_оф) == ні {
        вернути падіння(обчислювач, "Клієнт має бути числом");
      }
      якщо перевірити_чи_предмет_є_байтами(обчислювач, аргумент_повідомлення) == ні {
        вернути падіння(обчислювач, "Повідомлення має бути байтами");
      }
      ціль клієнт_д64 = отримати_значення_числа(обчислювач, предмет_оф);
      ціль клієнт = ц32(клієнт_д64);
      ціль байти = отримати_значення_байтів(обчислювач, аргумент_повідомлення);
      ціль результат_надсилання = мавка_біб_надіслати(мавка_біб_отримати_рушій(), клієнт, байти.розмір, байти.дані);
      якщо результат_надсилання == 0ц32-1 {
        // потім: помилка
      }
      вернути пусто;
    }

    дія створити_предмет_структури_Клієнт(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
      ціль притримувач = покласти_притримувач(обчислювач);

      ціль кількість_параметрів: позитивне = 6;
      змінна параметри = виділити_памʼять<адреса<Предмет>>(обчислювач, кількість_параметрів);

      ціль параметр_оф = створити_параметр(обчислювач, назва(обчислювач, "оф"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_оф;
      }
      параметри[0] = параметр_оф;
      притримати(обчислювач, притримувач, параметр_оф);

      ціль параметр_адреса = створити_параметр(обчислювач, назва(обчислювач, "адреса"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_адреса;
      }
      параметри[1] = параметр_адреса;
      притримати(обчислювач, притримувач, параметр_адреса);

      ціль параметр_порт = створити_параметр(обчислювач, назва(обчислювач, "порт"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_порт;
      }
      параметри[2] = параметр_порт;
      притримати(обчислювач, притримувач, параметр_порт);

      ціль параметр_обробник_підключення = створити_параметр(обчислювач, назва(обчислювач, "обробник_підключення"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_обробник_підключення;
      }
      параметри[3] = параметр_обробник_підключення;
      притримати(обчислювач, притримувач, параметр_обробник_підключення);

      ціль параметр_обробник_відключення = створити_параметр(обчислювач, назва(обчислювач, "обробник_відключення"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_обробник_відключення;
      }
      параметри[4] = параметр_обробник_відключення;
      притримати(обчислювач, притримувач, параметр_обробник_відключення);

      ціль параметр_обробник_повідомлення = створити_параметр(обчислювач, назва(обчислювач, "обробник_повідомлення"), пусто, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути параметр_обробник_повідомлення;
      }
      параметри[5] = параметр_обробник_повідомлення;
      притримати(обчислювач, притримувач, параметр_обробник_повідомлення);

      ціль предмет_структури_Клієнт = створити_структуру(обчислювач, назва(обчислювач, "Клієнт"), отримати_предмет_структури_предмет(обчислювач), кількість_параметрів, параметри);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_структури_Клієнт;
      }

      ціль предмет_дії_метода_підключитись = створити_рідну_дію(обчислювач, назва(обчислювач, т8"підключитись"), 0, пусто, пусто, рідна_дія_метода_складеного_предмета_Клієнт_підключитись);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_метода_підключитись;
      }
      притримати(обчислювач, притримувач, предмет_дії_метода_підключитись);
      змінна результат_запису_метода = предмет_записати_метод(обчислювач, предмет_структури_Клієнт, назва(обчислювач, "підключитись"), предмет_дії_метода_підключитись, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_запису_метода;
      }

      ціль предмет_дії_метода_відключитись = створити_рідну_дію(обчислювач, назва(обчислювач, т8"відключитись"), 0, пусто, пусто, рідна_дія_метода_складеного_предмета_Клієнт_відключитись);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_метода_відключитись;
      }
      притримати(обчислювач, притримувач, предмет_дії_метода_відключитись);
      результат_запису_метода = предмет_записати_метод(обчислювач, предмет_структури_Клієнт, назва(обчислювач, "відключитись"), предмет_дії_метода_відключитись, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_запису_метода;
      }

      ціль предмет_дії_метода_надіслати = створити_рідну_дію(обчислювач, назва(обчислювач, т8"надіслати"), 0, пусто, пусто, рідна_дія_метода_складеного_предмета_Клієнт_надіслати);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_метода_надіслати;
      }
      притримати(обчислювач, притримувач, предмет_дії_метода_надіслати);
      результат_запису_метода = предмет_записати_метод(обчислювач, предмет_структури_Клієнт, назва(обчислювач, "надіслати"), предмет_дії_метода_надіслати, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_запису_метода;
      }

      забрати_притримувач(обчислювач);
      вернути предмет_структури_Клієнт;
    }
  }
}

секція мавка {
  секція бібліотека {
    дія рідна_дія_модуля_інтернет_створити_обслуговувач(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_адреса = ні;
      змінна аргумент_адреса: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_порт = ні;
      змінна аргумент_порт: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_адреса = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва(обчислювач, "адреса"), аргумент_адреса::адреса);
        знайдено_аргумент_порт = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва(обчислювач, "порт"), аргумент_порт::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_адреса == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_адреса = так;
            аргумент_адреса = аргументи[0];
          }
        }
        якщо знайдено_аргумент_порт == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_порт = так;
            аргумент_порт = аргументи[1];
          }
        }
      }
      ціль предмет_структури_Обслуговувач = предмет_отримати_властивість(обчислювач, предмет_я, назва(обчислювач, "Обслуговувач"), Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути предмет_структури_Обслуговувач;
      }
      ціль кількість_аргументів_виконання: позитивне = 3;
      ціль аргументи_виконання = виділити_памʼять<адреса<Предмет>>(обчислювач, кількість_аргументів_виконання);
      аргументи_виконання[0] = пусто як адреса<Предмет>;
      аргументи_виконання[1] = аргумент_адреса;
      аргументи_виконання[2] = аргумент_порт;
      ціль результат = предмет_виконати(обчислювач, предмет_структури_Обслуговувач, пусто, кількість_аргументів_виконання, аргументи_виконання, пусто, Місцезнаходження { пусто, 0 });
      звільнити_памʼять(обчислювач, аргументи_виконання);
      вернути результат;
    }

    дія рідна_дія_модуля_інтернет_створити_клієнт(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_адреса = ні;
      змінна аргумент_адреса: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_порт = ні;
      змінна аргумент_порт: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_адреса = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва(обчислювач, "адреса"), аргумент_адреса::адреса);
        знайдено_аргумент_порт = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, назва(обчислювач, "порт"), аргумент_порт::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_адреса == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_адреса = так;
            аргумент_адреса = аргументи[0];
          }
        }
        якщо знайдено_аргумент_порт == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_порт = так;
            аргумент_порт = аргументи[1];
          }
        }
      }
      ціль предмет_структури_Клієнт = предмет_отримати_властивість(обчислювач, предмет_я, назва(обчислювач, "Клієнт"), Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути предмет_структури_Клієнт;
      }
      ціль кількість_аргументів_виконання: позитивне = 3;
      ціль аргументи_виконання = виділити_памʼять<адреса<Предмет>>(обчислювач, кількість_аргументів_виконання);
      аргументи_виконання[0] = пусто як адреса<Предмет>;
      аргументи_виконання[1] = аргумент_адреса;
      аргументи_виконання[2] = аргумент_порт;
      ціль результат = предмет_виконати(обчислювач, предмет_структури_Клієнт, пусто, кількість_аргументів_виконання, аргументи_виконання, пусто, Місцезнаходження { пусто, 0 });
      звільнити_памʼять(обчислювач, аргументи_виконання);
      вернути результат;
    }

    дія створити_дію_модуля_інтернет_створити_обслуговувач(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
      вернути створити_рідну_дію(обчислювач, назва(обчислювач, т8"створити_обслуговувач"), 0, пусто, пусто, рідна_дія_модуля_інтернет_створити_обслуговувач);
    }

    дія створити_дію_модуля_інтернет_створити_клієнт(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
      вернути створити_рідну_дію(обчислювач, назва(обчислювач, т8"створити_клієнт"), 0, пусто, пусто, рідна_дія_модуля_інтернет_створити_клієнт);
    }

    дія створити_модуль_інтернет(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
      ціль притримувач = покласти_притримувач(обчислювач);

      ціль предмет_модуля = створити_модуль(обчислювач, назва(обчислювач, "інтернет"), 0, пусто);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_модуля;
      }
      притримати(обчислювач, притримувач, предмет_модуля);

      ціль предмет_дії_створити_обслуговувач = створити_дію_модуля_інтернет_створити_обслуговувач(обчислювач);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_створити_обслуговувач;
      }
      притримати(обчислювач, притримувач, предмет_дії_створити_обслуговувач);
      змінна результат_зміни_властивості = предмет_змінити_властивість(обчислювач, предмет_модуля, назва(обчислювач, "створити_обслуговувач"), предмет_дії_створити_обслуговувач, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_зміни_властивості;
      }

      ціль предмет_дії_створити_клієнт = створити_дію_модуля_інтернет_створити_клієнт(обчислювач);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_дії_створити_клієнт;
      }
      притримати(обчислювач, притримувач, предмет_дії_створити_клієнт);
      результат_зміни_властивості = предмет_змінити_властивість(обчислювач, предмет_модуля, назва(обчислювач, "створити_клієнт"), предмет_дії_створити_клієнт, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_зміни_властивості;
      }

      ціль предмет_структури_Обслуговувач = створити_предмет_структури_Обслуговувач(обчислювач);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_структури_Обслуговувач;
      }
      притримати(обчислювач, притримувач, предмет_структури_Обслуговувач);
      результат_зміни_властивості = предмет_змінити_властивість(обчислювач, предмет_модуля, назва(обчислювач, "Обслуговувач"), предмет_структури_Обслуговувач, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_зміни_властивості;
      }

      ціль предмет_структури_Клієнт = створити_предмет_структури_Клієнт(обчислювач);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути предмет_структури_Клієнт;
      }
      притримати(обчислювач, притримувач, предмет_структури_Клієнт);
      результат_зміни_властивості = предмет_змінити_властивість(обчислювач, предмет_модуля, назва(обчислювач, "Клієнт"), предмет_структури_Клієнт, Місцезнаходження { пусто, 0 });
      якщо перевірити_чи_стан_падіння(обчислювач) {
        забрати_притримувач(обчислювач);
        вернути результат_зміни_властивості;
      }

      забрати_притримувач(обчислювач);
      вернути предмет_модуля;
    }

    зовнішня дія взяти_модуль_біб_інтернет(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
      ціль М = обчислювач;
      змінна результат = створити_текст(обчислювач, "мавка:бібліотека/інтернет/інтернет.ц");
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути результат;
      }
      ціль предмет_шляху = результат;
      змінна взятий_предмет: адреса<МаМа::Предмет> = пусто;
      якщо МаМа::отримати_взятий_предмет(М, предмет_шляху як адреса<МаМа::Предмет>, взятий_предмет::адреса) {
        вернути взятий_предмет як адреса<Предмет>;
      }
      результат = створити_модуль_інтернет(обчислювач);
      якщо перевірити_чи_стан_падіння(обчислювач) {
        вернути результат;
      }
      МаМа::покласти_взятий_предмет(М, предмет_шляху як адреса<МаМа::Предмет>, результат як адреса<МаМа::Предмет>);
      вернути результат;
    }
  }
}