взяти визначення мавка/бібліотека;

зовнішня дія mavka_read_from_stdin(prefix: адреса<char>, prefix_size: size_t, output: адреса<адреса<char>>): позитивне;

дія прочитати_з_stdin(префікс: памʼять<п8>, розмір_префіксу: позитивне, вихід: адреса<памʼять<п8>>): позитивне {
  вернути mavka_read_from_stdin(префікс як адреса<char>, size_t(розмір_префіксу), вихід як адреса<адреса<char>>);
}

секція мавка {
  секція бібліотека {
    дія нативна_дія_бібліотеки_мавки_читати_юнікод(предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_префікс = ні;
      змінна ціль аргумент_префікс: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_префікс = знайти_іменований_аргумент(обчислювач, іменовані_аргументи, обчислювач.М.БН.С.префікс як адреса<Назва>, аргумент_префікс::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_префікс == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_префікс = так;
            аргумент_префікс = аргументи[0];
          }
        }
      }
      змінна ціль префікс = ю8 { пусто, 0 };
      якщо знайдено_аргумент_префікс {
        якщо перевірити_чи_предмет_є_юнікодом(аргумент_префікс, обчислювач) {
          якщо скопіювати_значення_предмета_юнікоду_як_Ю8(аргумент_префікс, обчислювач, префікс::адреса) == ні {
            вернути результат_падіння(обчислювач, пусто, пусто);
          }
        } інакше {
          вернути результат_падіння(обчислювач, створити_текст_з_Ю8(обчислювач, ю8"Префікс має бути юнікодом"), пусто);
        }
      }
      ціль значення: памʼять<п8> = пусто;
      ціль довжина_значення = прочитати_з_stdin(префікс.дані, префікс.розмір, значення::адреса);
      звільнити(обчислювач, префікс.дані як адреса);
      якщо значення == пусто {
        вернути результат_успіх(обчислювач, пусто);
      } інакше {
        ціль предмет_юнікоду = створити_юнікод_з_Ю8(обчислювач, ю8 { значення, МаМа::порахувати_розмір_Ю8(значення) });
        звільнити(обчислювач, значення як адреса);
        вернути результат_успіх(обчислювач, предмет_юнікоду);
      }
    }

    місцева дія заповнити_модуль_читати_юнікод(обчислювач: адреса<Обчислювач>, предмет_модуля: адреса<Предмет>) {
      предмет_змінити_властивість(предмет_модуля, обчислювач, назва_з_Ю8(обчислювач, ю8"чародія_виконати"), створити_нативну_дію(обчислювач, назва_з_Ю8(обчислювач, ю8"читати_юнікод"), нативна_дія_бібліотеки_мавки_читати_юнікод, пусто, пусто));
    }
  }
}