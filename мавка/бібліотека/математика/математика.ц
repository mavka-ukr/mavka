взяти визначення мавка;
взяти визначення мавка/бібліотека;

зовнішня дія мавка_система_синус_д64(значення: д64): д64;
зовнішня дія мавка_система_косинус_д64(значення: д64): д64;
зовнішня дія мавка_система_тангенс_д64(значення: д64): д64;
зовнішня дія мавка_система_арксинус_д64(значення: д64): д64;
зовнішня дія мавка_система_арккосинус_д64(значення: д64): д64;
зовнішня дія мавка_система_арктангенс_д64(значення: д64): д64;
зовнішня дія мавка_система_арктангенс2_д64(а: д64, б: д64): д64;
зовнішня дія мавка_система_абсолютне_д64(значення: д64): д64;
зовнішня дія мавка_система_експонента_д64(значення: д64): д64;
зовнішня дія мавка_система_корінь_д64(значення: д64): д64;
зовнішня дія мавка_система_степінь_д64(а: д64, б: д64): д64;
зовнішня дія мавка_система_стеля_д64(значення: д64): д64;
зовнішня дія мавка_система_підлога_д64(значення: д64): д64;
зовнішня дія мавка_система_округлити_д64(значення: д64): д64;
зовнішня дія мавка_система_остача_від_ділення_д64(а: д64, б: д64): д64;

секція мавка {
  секція бібліотека {
    дія рідна_дія_модуля_математики_синус(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_синус_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_косинус(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_косинус_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_тангенс(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_тангенс_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_арксинус(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_арксинус_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_арккосинус(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_арккосинус_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_арктангенс(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_арктангенс_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_арктангенс2(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_а = ні;
      змінна аргумент_а: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_б = ні;
      змінна аргумент_б: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_а = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "а"), аргумент_а::адреса);
        знайдено_аргумент_б = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "б"), аргумент_б::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_а == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_а = так;
            аргумент_а = аргументи[0];
          }
        }
        якщо знайдено_аргумент_б == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_б = так;
            аргумент_б = аргументи[1];
          }
        }
      }
      якщо знайдено_аргумент_а == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо знайдено_аргумент_б == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_а) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_б) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа_а = отримати_значення_числа(М, аргумент_а як адреса<ПредметЧисла>);
      змінна значення_числа_б = отримати_значення_числа(М, аргумент_б як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_арктангенс2_д64(значення_числа_а, значення_числа_б)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_абсолютне(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_абсолютне_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_експонента(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_експонента_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_корінь(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_корінь_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_степінь(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_а = ні;
      змінна аргумент_а: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_б = ні;
      змінна аргумент_б: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_а = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "а"), аргумент_а::адреса);
        знайдено_аргумент_б = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "б"), аргумент_б::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_а == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_а = так;
            аргумент_а = аргументи[0];
          }
        }
        якщо знайдено_аргумент_б == ні {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_б = так;
            аргумент_б = аргументи[1];
          }
        }
      }
      якщо знайдено_аргумент_а == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо знайдено_аргумент_б == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_а) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_б) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа_а = отримати_значення_числа(М, аргумент_а як адреса<ПредметЧисла>);
      змінна значення_числа_б = отримати_значення_числа(М, аргумент_б як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_степінь_д64(значення_числа_а, значення_числа_б)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_стеля(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_стеля_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_підлога(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_підлога_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_округлити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_числом(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується числове значення");
      }
      змінна значення_числа = отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>);
      вернути створити_предмет_числа(М, мавка_система_округлити_д64(значення_числа)) як адреса<Предмет>;
    }

    дія рідна_дія_модуля_математики_найбільше(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_списком(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується спискове значення");
      }
      змінна предмет_списку = аргумент_значення як адреса<ПредметСписку>;
      змінна результат: адреса<Предмет> = пусто;
      якщо предмет_списку.елементи.розмір > 0 {
        результат = предмет_списку.елементи.дані[0] як адреса<Предмет>;
      }
      змінна п: позитивне = 1;
      поки п < предмет_списку.елементи.розмір {
        змінна значення = предмет_списку.елементи.дані[п] як адреса<Предмет>;
        змінна результат_більше = предмет_більше(М, значення, результат, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
        якщо перевірити_чи_стан_падіння(М) {
          вернути результат_більше;
        }
        якщо перевірити_чи_предмет_виражається_логічним_так(М, результат_більше) == так {
          результат = значення;
        }
        п += 1;
      }
      вернути результат;
    }

    дія рідна_дія_модуля_математики_найменше(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути падіння(М, "Недостатньо аргументів");
      }
      якщо перевірити_чи_предмет_є_списком(М, аргумент_значення) == ні {
        вернути падіння(М, "Очікується спискове значення");
      }
      змінна предмет_списку = аргумент_значення як адреса<ПредметСписку>;
      змінна результат: адреса<Предмет> = пусто;
      якщо предмет_списку.елементи.розмір > 0 {
        результат = предмет_списку.елементи.дані[0] як адреса<Предмет>;
      }
      змінна п: позитивне = 1;
      поки п < предмет_списку.елементи.розмір {
        змінна значення = предмет_списку.елементи.дані[п] як адреса<Предмет>;
        змінна результат_менше = предмет_менше(М, значення, результат, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
        якщо перевірити_чи_стан_падіння(М) {
          вернути результат_менше;
        }
        якщо перевірити_чи_предмет_виражається_логічним_так(М, результат_менше) == так {
          результат = значення;
        }
        п += 1;
      }
      вернути результат;
    }

    дія створити_модуль_математика(М: адреса<Машина>): предмет_або_стан_падіння {
      змінна притримувач = покласти_притримувач(М);



      змінна предмет_модуля = створити_предмет_модуля(М, створити_назву(М, "математика")) як адреса<Предмет>;
      притримати(М, притримувач, предмет_модуля);

      змінна предмет_числа_ЧИСЛО_Е = створити_предмет_числа(М, ЧИСЛО_Е) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_числа_ЧИСЛО_Е;
      }
      притримати(М, притримувач, предмет_числа_ЧИСЛО_Е);
      змінна результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "Е"), предмет_числа_ЧИСЛО_Е, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_числа_ЧИСЛО_ЛОГ2Е = створити_предмет_числа(М, ЧИСЛО_ЛОГ2Е) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_числа_ЧИСЛО_ЛОГ2Е;
      }
      притримати(М, притримувач, предмет_числа_ЧИСЛО_ЛОГ2Е);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "ЛОГ2Е"), предмет_числа_ЧИСЛО_ЛОГ2Е, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_числа_ЧИСЛО_ЛОГ10Е = створити_предмет_числа(М, ЧИСЛО_ЛОГ10Е) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_числа_ЧИСЛО_ЛОГ10Е;
      }
      притримати(М, притримувач, предмет_числа_ЧИСЛО_ЛОГ10Е);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "ЛОГ10Е"), предмет_числа_ЧИСЛО_ЛОГ10Е, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_числа_ЧИСЛО_ЛОГ2 = створити_предмет_числа(М, ЧИСЛО_ЛОГ2) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_числа_ЧИСЛО_ЛОГ2;
      }
      притримати(М, притримувач, предмет_числа_ЧИСЛО_ЛОГ2);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "ЛОГ2"), предмет_числа_ЧИСЛО_ЛОГ2, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_числа_ЧИСЛО_ЛОГ10 = створити_предмет_числа(М, ЧИСЛО_ЛОГ10) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_числа_ЧИСЛО_ЛОГ10;
      }
      притримати(М, притримувач, предмет_числа_ЧИСЛО_ЛОГ10);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "ЛОГ10"), предмет_числа_ЧИСЛО_ЛОГ10, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_числа_ЧИСЛО_ПІ = створити_предмет_числа(М, ЧИСЛО_ПІ) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_числа_ЧИСЛО_ПІ;
      }
      притримати(М, притримувач, предмет_числа_ЧИСЛО_ПІ);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "ПІ"), предмет_числа_ЧИСЛО_ПІ, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_числа_ЧИСЛО_КОРІНЬ2 = створити_предмет_числа(М, ЧИСЛО_КОРІНЬ2) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_числа_ЧИСЛО_КОРІНЬ2;
      }
      притримати(М, притримувач, предмет_числа_ЧИСЛО_КОРІНЬ2);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "КОРІНЬ2"), предмет_числа_ЧИСЛО_КОРІНЬ2, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_числа_ЧИСЛО_КОРІНЬ1_2 = створити_предмет_числа(М, ЧИСЛО_КОРІНЬ1_2) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_числа_ЧИСЛО_КОРІНЬ1_2;
      }
      притримати(М, притримувач, предмет_числа_ЧИСЛО_КОРІНЬ1_2);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "КОРІНЬ1_2"), предмет_числа_ЧИСЛО_КОРІНЬ1_2, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }

      змінна предмет_дії_синус = створити_предмет_рідної_дії(М, створити_назву(М, "синус"), 0, пусто, пусто, рідна_дія_модуля_математики_синус, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_синус;
      }
      притримати(М, притримувач, предмет_дії_синус);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "синус"), предмет_дії_синус, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_косинус = створити_предмет_рідної_дії(М, створити_назву(М, "косинус"), 0, пусто, пусто, рідна_дія_модуля_математики_косинус, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_косинус;
      }
      притримати(М, притримувач, предмет_дії_косинус);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "косинус"), предмет_дії_косинус, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_тангенс = створити_предмет_рідної_дії(М, створити_назву(М, "тангенс"), 0, пусто, пусто, рідна_дія_модуля_математики_тангенс, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_тангенс;
      }
      притримати(М, притримувач, предмет_дії_тангенс);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "тангенс"), предмет_дії_тангенс, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_арксинус = створити_предмет_рідної_дії(М, створити_назву(М, "арксинус"), 0, пусто, пусто, рідна_дія_модуля_математики_арксинус, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_арксинус;
      }
      притримати(М, притримувач, предмет_дії_арксинус);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "арксинус"), предмет_дії_арксинус, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_арккосинус = створити_предмет_рідної_дії(М, створити_назву(М, "арккосинус"), 0, пусто, пусто, рідна_дія_модуля_математики_арккосинус, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_арккосинус;
      }
      притримати(М, притримувач, предмет_дії_арккосинус);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "арккосинус"), предмет_дії_арккосинус, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_арктангенс = створити_предмет_рідної_дії(М, створити_назву(М, "арктангенс"), 0, пусто, пусто, рідна_дія_модуля_математики_арктангенс, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_арктангенс;
      }
      притримати(М, притримувач, предмет_дії_арктангенс);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "арктангенс"), предмет_дії_арктангенс, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_арктангенс2 = створити_предмет_рідної_дії(М, створити_назву(М, "арктангенс2"), 0, пусто, пусто, рідна_дія_модуля_математики_арктангенс2, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_арктангенс2;
      }
      притримати(М, притримувач, предмет_дії_арктангенс2);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "арктангенс2"), предмет_дії_арктангенс2, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_абсолютне = створити_предмет_рідної_дії(М, створити_назву(М, "абсолютне"), 0, пусто, пусто, рідна_дія_модуля_математики_абсолютне, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_абсолютне;
      }
      притримати(М, притримувач, предмет_дії_абсолютне);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "абсолютне"), предмет_дії_абсолютне, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_експонента = створити_предмет_рідної_дії(М, створити_назву(М, "експонента"), 0, пусто, пусто, рідна_дія_модуля_математики_експонента, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_експонента;
      }
      притримати(М, притримувач, предмет_дії_експонента);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "експонента"), предмет_дії_експонента, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_корінь = створити_предмет_рідної_дії(М, створити_назву(М, "корінь"), 0, пусто, пусто, рідна_дія_модуля_математики_корінь, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_корінь;
      }
      притримати(М, притримувач, предмет_дії_корінь);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "корінь"), предмет_дії_корінь, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_степінь = створити_предмет_рідної_дії(М, створити_назву(М, "степінь"), 0, пусто, пусто, рідна_дія_модуля_математики_степінь, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_степінь;
      }
      притримати(М, притримувач, предмет_дії_степінь);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "степінь"), предмет_дії_степінь, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_стеля = створити_предмет_рідної_дії(М, створити_назву(М, "стеля"), 0, пусто, пусто, рідна_дія_модуля_математики_стеля, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_стеля;
      }
      притримати(М, притримувач, предмет_дії_стеля);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "стеля"), предмет_дії_стеля, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_підлога = створити_предмет_рідної_дії(М, створити_назву(М, "підлога"), 0, пусто, пусто, рідна_дія_модуля_математики_підлога, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_підлога;
      }
      притримати(М, притримувач, предмет_дії_підлога);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "підлога"), предмет_дії_підлога, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_округлити = створити_предмет_рідної_дії(М, створити_назву(М, "округлити"), 0, пусто, пусто, рідна_дія_модуля_математики_округлити, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_округлити;
      }
      притримати(М, притримувач, предмет_дії_округлити);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "округлити"), предмет_дії_округлити, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_найбільше = створити_предмет_рідної_дії(М, створити_назву(М, "найбільше"), 0, пусто, пусто, рідна_дія_модуля_математики_найбільше, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_найбільше;
      }
      притримати(М, притримувач, предмет_дії_найбільше);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "найбільше"), предмет_дії_найбільше, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }
      змінна предмет_дії_найменше = створити_предмет_рідної_дії(М, створити_назву(М, "найменше"), 0, пусто, пусто, рідна_дія_модуля_математики_найменше, пусто, пусто, пусто) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути предмет_дії_найменше;
      }
      притримати(М, притримувач, предмет_дії_найменше);
      результат_зміни_властивості = предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "найменше"), предмет_дії_найменше, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат_зміни_властивості;
      }

      забрати_притримувач(М);
      вернути предмет_модуля;
    }

    місцева дія взяти_модуль_біб_математика(М: адреса<Машина>): предмет_або_стан_падіння {

      змінна результат = створити_предмет_тексту(М, "мавка:бібліотека/математика/математика.ц") як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат як адреса<Предмет>;
      }
      змінна предмет_шляху = результат;
      змінна взятий_предмет: адреса<Предмет> = пусто;
      якщо отримати_взятий_предмет(М, предмет_шляху як адреса<Предмет>, взятий_предмет::адреса) {
        вернути взятий_предмет як адреса<Предмет>;
      }
      результат = створити_модуль_математика(М);
      якщо перевірити_чи_стан_падіння(М) {
        вернути результат;
      }
      покласти_взятий_предмет(М, предмет_шляху як адреса<Предмет>, результат як адреса<Предмет>);
      вернути результат;
    }
  }
}