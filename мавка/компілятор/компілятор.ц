взяти визначення ./компілятор;

зовнішня дія mavka_get_path_directory(path: адреса<unsigned_char>, output: адреса<адреса<unsigned_char>>): size_t;

секція мавка {
  дія отримати_батьківську_директорію(шлях: памʼять<п8>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути mavka_get_path_directory(шлях як адреса<unsigned_char>, вихід як адреса<адреса<unsigned_char>>);
  }

  дія отримати_батьківську_директорію_ю8(шлях: ю8, вихід: адреса<памʼять<п8>>): позитивне {
    // потім: втілити
    вернути 0;
  }

  місцева дія виділити_помилку_компіляції(обчислювач: адреса<Обчислювач>, місцезнаходження: розбирач::Місцезнаходження, повідомлення: памʼять<п8>): адреса<ПомилкаКомпіляції> {
    ціль помилка_компіляції = виділити<ПомилкаКомпіляції>(обчислювач);
    помилка_компіляції.місцезнаходження = пусто;
    помилка_компіляції.повідомлення = пусто;
    МаМа::виділити_копію_Ю8(обчислювач.М, повідомлення, порахувати_розмір_ю8сі(повідомлення), помилка_компіляції.повідомлення::адреса);
    якщо помилка_компіляції.повідомлення == пусто {
      МаМа::ПОМЕРТИ(обчислювач.М, ю8"Не вдалося виділити копію Ю8");
    }
    вернути помилка_компіляції;
  }

  місцева дія виділити_контекст_компіляції(обчислювач: адреса<Обчислювач>, значення_ю8: ю8, слова: розбирач::Слова): адреса<КонтекстКомпіляції> {
    ціль контекст_компіляції = виділити<КонтекстКомпіляції>(обчислювач);
    контекст_компіляції.значення_ю8 = значення_ю8;
    контекст_компіляції.слова = слова;
    контекст_компіляції.код_дії = пусто;
    вернути контекст_компіляції;
  }

  місцева дія скомпілювати_елемент_значення(обчислювач: адреса<Обчислювач>, контекст: адреса<КонтекстКомпіляції>, код: адреса<МаМа::Код>, елемент: адреса<розбирач::Гілка>): адреса<ПомилкаКомпіляції> {
    ціль М = обчислювач.М;
    якщо елемент.вид == розбирач::ВидГілкиЗвернутись {
      ціль дані = елемент.дані як розбирач::ДаніГілкиЗвернутись;
      якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор), ю8"я") == так {
        МаМа::покласти_вказівку_ПокластиЯ(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор), ю8"так") == так {
        МаМа::покласти_вказівку_ПокластиТак(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор), ю8"ні") == так {
        МаМа::покласти_вказівку_ПокластиНі(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор), ю8"пусто") == так {
        МаМа::покласти_вказівку_ПокластиПусто(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор), ю8"__ФАЙЛ_ЮНІКОД__") == так {
        ціль предмет_юнікоду = МаМа::виділити_предмет_юнікоду_з_ю8(М, код.шлях_до_файлу);
        ціль позиція_константи = МаМа::покласти_константу(М, предмет_юнікоду як адреса<МаМа::Предмет>);
        МаМа::покласти_вказівку_ПокластиКонстанту(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_константи);
      } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор), ю8"__ПАПКА_ЮНІКОД__") == так {
        ціль шлях_до_папки: памʼять<п8> = пусто;
        якщо отримати_батьківську_директорію_ю8(код.шлях_до_файлу, шлях_до_папки::адреса) == 0 {
          МаМа::ПОМЕРТИ(М, ю8"Не вдалося отримати батьківську директорію");
        }
        ціль предмет_юнікоду = МаМа::виділити_предмет_юнікоду_з_ю8(М, ю8 { шлях_до_папки, порахувати_розмір_ю8сі(шлях_до_папки) });
        звільнити(обчислювач, шлях_до_папки як адреса);
        ціль позиція_константи = МаМа::покласти_константу(М, предмет_юнікоду як адреса<МаМа::Предмет>);
        МаМа::покласти_вказівку_ПокластиКонстанту(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_константи);
      } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор), ю8"__РЯДОК__") == так {
        ціль предмет_числа = МаМа::виділити_предмет_числа(М, д64(розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження)));
        ціль позиція_константи = МаМа::покласти_константу(М, предмет_числа як адреса<МаМа::Предмет>);
        МаМа::покласти_вказівку_ПокластиКонстанту(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_константи);
      } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор), ю8"__СТОВПЕЦЬ__") == так {
        ціль предмет_числа = МаМа::виділити_предмет_числа(М, д64(розбирач::отримати_стовпець_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження)));
        ціль позиція_константи = МаМа::покласти_константу(М, предмет_числа як адреса<МаМа::Предмет>);
        МаМа::покласти_вказівку_ПокластиКонстанту(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_константи);
      } інакше {
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
        МаМа::покласти_вказівку_Звернутись(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      }
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиОтримати {
      ціль дані = елемент.дані як розбирач::ДаніГілкиОтримати;
      ціль помилка_компіляції_предмета = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.предмет);
      якщо помилка_компіляції_предмета != пусто {
        вернути помилка_компіляції_предмета;
      }
      ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
      МаМа::покласти_вказівку_ОтриматиВластивість(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиОтриматиЕлемент {
      ціль дані = елемент.дані як розбирач::ДаніГілкиОтриматиЕлемент;
      ціль результат_компіляції_предмета = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.предмет);
      якщо результат_компіляції_предмета != пусто {
        вернути результат_компіляції_предмета;
      }
      ціль результат_компіляції_ключа = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.ключ);
      якщо результат_компіляції_ключа != пусто {
        вернути результат_компіляції_ключа;
      }
      МаМа::покласти_вказівку_ОтриматиЕлемент(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиВиконати {
      ціль дані = елемент.дані як розбирач::ДаніГілкиВиконати;
      змінна ціль назва_прохання: адреса<МаМа::Назва> = пусто;
      змінна ціль позиція_назви_прохання: позитивне = 0;
      якщо дані.предмет.вид == розбирач::ВидГілкиОтримати {
        ціль дані_отримання = дані.предмет.дані як розбирач::ДаніГілкиОтримати;
        ціль помилка_компіляції_предмета = скомпілювати_елемент_значення(обчислювач, контекст, код, дані_отримання.предмет);
        якщо помилка_компіляції_предмета != пусто {
          вернути помилка_компіляції_предмета;
        }
        назва_прохання = МаМа::назва_з_Ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані_отримання.ідентифікатор));
        позиція_назви_прохання = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані_отримання.ідентифікатор));
      } інакше {
        ціль помилка_компіляції_предмета = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.предмет);
        якщо помилка_компіляції_предмета != пусто {
          вернути помилка_компіляції_предмета;
        }
      }
      змінна ціль па: позитивне = 0;
      змінна ціль кількість_аргументів_без_назви: позитивне = 0;
      змінна ціль вже_був_аргумент_з_назвою = ні;
      поки па < дані.кількість_аргументів {
        ціль аргумент = дані.аргументи[па];
        якщо аргумент.ідентифікатор.заповнено == позитивне(ні) {
          якщо вже_був_аргумент_з_назвою {
            вернути виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Позиційні аргументи не можна ставити після іменованих");
          }
          кількість_аргументів_без_назви = кількість_аргументів_без_назви + 1;
        } інакше {
          вже_був_аргумент_з_назвою = так;
        }
        па = па + 1;
      }
      змінна ціль має_аргументи_з_назвами = вже_був_аргумент_з_назвою;
      якщо має_аргументи_з_назвами {
        МаМа::покласти_вказівку_ПокластиРеєстрАргументівЗНазвами(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      }
      па = 0;
      поки па < дані.кількість_аргументів {
        ціль аргумент = дані.аргументи[па];
        ціль помилка_компіляції_аргумента = скомпілювати_елемент_значення(обчислювач, контекст, код, аргумент.значення);
        якщо помилка_компіляції_аргумента != пусто {
          вернути помилка_компіляції_аргумента;
        }
        якщо аргумент.ідентифікатор.заповнено == позитивне(так) {
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, аргумент.ідентифікатор.значення));
          МаМа::покласти_вказівку_ЗареєструватиАргументЗНазвою(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
        }
        па = па + 1;
      }
      якщо має_аргументи_з_назвами {
        якщо назва_прохання == пусто {
          МаМа::покласти_вказівку_ВиконатиЗНазвами(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), кількість_аргументів_без_назви);
        } інакше {
          МаМа::покласти_вказівку_ВиконатиВластивістьЗНазвами(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви_прохання, кількість_аргументів_без_назви);
        }
      } інакше {
        якщо назва_прохання == пусто {
         МаМа::покласти_вказівку_Виконати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), кількість_аргументів_без_назви);
        } інакше {
          МаМа::покласти_вказівку_ВиконатиВластивість(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви_прохання, кількість_аргументів_без_назви);
        }
      }
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиДія {
      ціль дані = елемент.дані як розбирач::ДаніГілкиДія;
      МаМа::покласти_вказівку_ПокластиРеєстрПараметрів(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      змінна ціль па: позитивне = 0;
      поки па < дані.кількість_параметрів {
        ціль параметр = дані.параметри[па];
        ціль позиція_назви_параметра = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, параметр.ідентифікатор));
        змінна ціль птп: позитивне = 0;
        якщо параметр.тип.заповнено == позитивне(так) {
          поки птп < параметр.тип.значення.кількість_гілок {
            ціль тип = параметр.тип.значення.гілки[птп];
            ціль помилка_компіляції_типу = скомпілювати_елемент_значення(обчислювач, контекст, код, тип);
            якщо помилка_компіляції_типу != пусто {
              вернути помилка_компіляції_типу;
            }
            птп = птп + 1;
          }
        }
        якщо параметр.значення != пусто {
          ціль код_значення_параметра = МаМа::виділити_код(М, код.шлях_до_файлу);
          ціль контекст_значення_параметра = виділити_контекст_компіляції(обчислювач, контекст.значення_ю8, контекст.слова);
          ціль помилка_компіляції_значення_параметра = скомпілювати_елемент_значення(обчислювач, контекст_значення_параметра, код_значення_параметра, параметр.значення);
          якщо помилка_компіляції_значення_параметра != пусто {
            вернути помилка_компіляції_значення_параметра;
          }
          МаМа::покласти_вказівку_Вернути(М, код_значення_параметра, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          ціль позиція_підкоду = М.сховище_кодів.розмір;
          МаМа::покласти_в_накопичувач<адреса<МаМа::Код>>(М, М.сховище_кодів::адреса, код_значення_параметра);
          МаМа::покласти_вказівку_ТриматиКод(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_підкоду);
        }
        МаМа::покласти_вказівку_ЗареєструватиПараметр(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви_параметра, птп);
        па = па + 1;
      }
      ціль код_дії = МаМа::виділити_код(М, код.шлях_до_файлу);
      ціль контекст_дії = виділити_контекст_компіляції(обчислювач, контекст.значення_ю8, контекст.слова);
      ціль помилка_компіляції_тіла_дії = скомпілювати_тіло(обчислювач, контекст_дії, код_дії, дані.тіло, так);
      якщо помилка_компіляції_тіла_дії != пусто {
        вернути помилка_компіляції_тіла_дії;
      }
      ціль позиція_підкоду = М.сховище_кодів.розмір;
      МаМа::покласти_в_накопичувач<адреса<МаМа::Код>>(М, М.сховище_кодів::адреса, код_дії);
      якщо дані.ідентифікатор.заповнено == позитивне(так) {
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
        МаМа::покласти_вказівку_ТриматиНазву(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      }
      МаМа::покласти_вказівку_СтворитиДію(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_підкоду);
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиСтруктура {
      ціль дані = елемент.дані як розбирач::ДаніГілкиСтруктура;
      якщо дані.предок == пусто {
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, ю8"предмет");
        МаМа::покласти_вказівку_Звернутись(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      } інакше {
        ціль помилка_компіляції_предка = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.предок);
        якщо помилка_компіляції_предка != пусто {
          вернути помилка_компіляції_предка;
        }
      }
      МаМа::покласти_вказівку_ПокластиРеєстрПараметрів(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      змінна ціль па: позитивне = 0;
      поки па < дані.кількість_параметрів {
        ціль параметр = дані.параметри[па];
        ціль позиція_назви_параметра = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, параметр.ідентифікатор));
        змінна ціль птп: позитивне = 0;
        якщо параметр.тип.заповнено == позитивне(так) {
          поки птп < параметр.тип.значення.кількість_гілок {
            ціль тип = параметр.тип.значення.гілки[птп];
            ціль помилка_компіляції_типу = скомпілювати_елемент_значення(обчислювач, контекст, код, тип);
            якщо помилка_компіляції_типу != пусто {
              вернути помилка_компіляції_типу;
            }
            птп = птп + 1;
          }
        }
        якщо параметр.значення != пусто {
          ціль код_значення_параметра = МаМа::виділити_код(М, код.шлях_до_файлу);
          ціль контекст_значення_параметра = виділити_контекст_компіляції(обчислювач, контекст.значення_ю8, контекст.слова);
          ціль помилка_компіляції_значення_параметра = скомпілювати_елемент_значення(обчислювач, контекст_значення_параметра, код_значення_параметра, параметр.значення);
          якщо помилка_компіляції_значення_параметра != пусто {
            вернути помилка_компіляції_значення_параметра;
          }
          МаМа::покласти_вказівку_Вернути(М, код_значення_параметра, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          ціль позиція_підкоду = М.сховище_кодів.розмір;
          МаМа::покласти_в_накопичувач<адреса<МаМа::Код>>(М, М.сховище_кодів::адреса, код_значення_параметра);
          МаМа::покласти_вказівку_ТриматиКод(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_підкоду);
        }
        МаМа::покласти_вказівку_ЗареєструватиПараметр(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви_параметра, птп);
        па = па + 1;
      }
      якщо дані.ідентифікатор.заповнено == позитивне(так) {
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
        МаМа::покласти_вказівку_ТриматиНазву(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      }
      МаМа::покласти_вказівку_СтворитиСтруктуру(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиЧисло {
      ціль дані = елемент.дані як розбирач::ДаніГілкиЧисло;
      ціль слово = контекст.слова.дані[дані.позиція_слова];
      ціль результат_розбору_числа = МаМа::різне::числа::розібрати_десяткове_з_ю8<д64>(розбирач::отримати_ю8_слова(контекст.значення_ю8, контекст.слова, слово));
      якщо результат_розбору_числа.успіх == позитивне(ні) {
        МаМа::надрукувати_Ю8(М, результат_розбору_числа.помилка);
      }
      ціль предмет_числа = МаМа::виділити_предмет_числа(М, результат_розбору_числа.значення);
      ціль позиція_константи = МаМа::покласти_константу(М, предмет_числа як адреса<МаМа::Предмет>);
      МаМа::покласти_вказівку_ПокластиКонстанту(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_константи);
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиТекст {
      ціль дані = елемент.дані як розбирач::ДаніГілкиТекст;
      ціль значення_тексту_ю8 = розбирач::отримати_ю8_тексту(контекст.значення_ю8, контекст.слова, елемент);
      змінна ціль позиція_константи: позитивне = 0;
      якщо дані.ідентифікатор.заповнено == позитивне(ні) {
        якщо значення_тексту_ю8.розмір == 0 {
          ціль предмет_тексту = МаМа::виділити_предмет_тексту(М, "");
          позиція_константи = МаМа::покласти_константу(М, предмет_тексту як адреса<МаМа::Предмет>);
        } інакше {
          ціль вихід_КД = виділити_памʼять<п8>(обчислювач, значення_тексту_ю8.розмір + 1);
          ціль розмір_перекодованого_виходу_КД = КД::перекодувати_з_Ю8(
            значення_тексту_ю8.дані,
            значення_тексту_ю8.розмір,
            вихід_КД
          );
          вихід_КД[розмір_перекодованого_виходу_КД] = 0;
          якщо розмір_перекодованого_виходу_КД == 0 {
            ціль помилка_компіляції = виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Невідомий символ КД");
            вернути помилка_компіляції;
          }
          ціль предмет_тексту = МаМа::виділити_предмет_тексту(М, текст { вихід_КД, розмір_перекодованого_виходу_КД });
          звільнити_памʼять(обчислювач, вихід_КД);
          позиція_константи = МаМа::покласти_константу(М, предмет_тексту як адреса<МаМа::Предмет>);
        }
      } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення), ю8"ю") == так {
        ціль значення_ю32сі: памʼять<п32> = пусто;
        ціль розмір_Ю32 = МаМа::перекодувати_Ю8_в_Ю32(М, значення_тексту_ю8.дані, значення_тексту_ю8.розмір, значення_ю32сі::адреса);
        якщо значення_ю32сі == пусто {
          МаМа::ПОМЕРТИ(М, ю8"Невідомий символ Ю32");
        }
        ціль предмет_юнікоду = МаМа::виділити_предмет_юнікоду(М, значення_ю32сі);
        звільнити_памʼять(обчислювач, значення_ю32сі);
        позиція_константи = МаМа::покласти_константу(М, предмет_юнікоду як адреса<МаМа::Предмет>);
      } інакше {
        ціль помилка_компіляції = виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Невідомий тип тексту");
        вернути помилка_компіляції;
      }
      МаМа::покласти_вказівку_ПокластиКонстанту(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_константи);
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиСимвол {
      ціль дані = елемент.дані як розбирач::ДаніГілкиСимвол;
      ціль значення_символу_ю8 = розбирач::отримати_ю8_символу(контекст.значення_ю8, контекст.слова, елемент);
      змінна ціль позиція_константи: позитивне = 0;
      якщо дані.ідентифікатор.заповнено == позитивне(ні) {
        якщо значення_символу_ю8.розмір == 0 {
          ціль помилка_компіляції = виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Пустий символ");
          вернути помилка_компіляції;
        } інакше {
          ціль вихід_КД = виділити_памʼять<п8>(обчислювач, значення_символу_ю8.розмір + 1);
          ціль розмір_перекодованого_виходу_КД = КД::перекодувати_з_Ю8(
            значення_символу_ю8.дані,
            значення_символу_ю8.розмір,
            вихід_КД
          );
          якщо розмір_перекодованого_виходу_КД == 0 {
            ціль помилка_компіляції = виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Невідомий символ КД");
            вернути помилка_компіляції;
          }
          вихід_КД[розмір_перекодованого_виходу_КД] = 0;
          якщо розмір_перекодованого_виходу_КД > 1 {
            ціль помилка_компіляції = виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Більше одного символу");
            вернути помилка_компіляції;
          }
          ціль предмет_числа = МаМа::виділити_предмет_числа(М, д64(вихід_КД[0]));
          звільнити_памʼять(обчислювач, вихід_КД);
          позиція_константи = МаМа::покласти_константу(М, предмет_числа як адреса<МаМа::Предмет>);
        }
      } інакше якщо перевірити_чи_ю8_рівні(розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення), ю8"ю") == так {
        ціль значення_ю32сі: памʼять<п32> = пусто;
        ціль розмір_Ю32 = МаМа::перекодувати_Ю8_в_Ю32(М, значення_символу_ю8.дані, значення_символу_ю8.розмір, значення_ю32сі::адреса);
        якщо значення_ю32сі == пусто {
          МаМа::ПОМЕРТИ(М, ю8"Невідомий символ Ю32");
        }
        якщо значення_ю32сі[0] == 0 {
          ціль помилка_компіляції = виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Пустий символ");
          вернути помилка_компіляції;
        }
        якщо значення_ю32сі[1] != 0 {
          ціль помилка_компіляції = виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Більше одного символу");
          вернути помилка_компіляції;
        }
        ціль предмет_числа = МаМа::виділити_предмет_числа(М, д64(значення_ю32сі[0]));
        звільнити_памʼять(обчислювач, значення_ю32сі);
        позиція_константи = МаМа::покласти_константу(М, предмет_числа як адреса<МаМа::Предмет>);
      } інакше {
        ціль помилка_компіляції = виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Невідомий тип символу");
        вернути помилка_компіляції;
      }
      МаМа::покласти_вказівку_ПокластиКонстанту(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_константи);
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиОперація {
      ціль дані = елемент.дані як розбирач::ДаніГілкиОперація;
      ціль помилка_компіляції_ліво = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.ліво);
      якщо помилка_компіляції_ліво != пусто {
        вернути помилка_компіляції_ліво;
      }
      якщо дані.операція == розбирач::ВидОпераціїІ {
        ціль позиція_вказівки_стрибнути_якщо_ні = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_СтрибнутиЯкщоНіЗалишивши(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
        МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        ціль помилка_компіляції_право = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.право);
        якщо помилка_компіляції_право != пусто {
          вернути помилка_компіляції_право;
        }
        код.накопичувач_вказівок.дані[позиція_вказівки_стрибнути_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїАБО {
        ціль позиція_вказівки_стрибнути_якщо_так = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_СтрибнутиЯкщоТакЗалишивши(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
        МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        ціль помилка_компіляції_право = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.право);
        якщо помилка_компіляції_право != пусто {
          вернути помилка_компіляції_право;
        }
        код.накопичувач_вказівок.дані[позиція_вказівки_стрибнути_якщо_так + 1] = код.накопичувач_вказівок.розмір;
        вернути пусто;
      }
      ціль помилка_компіляції_право = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.право);
      якщо помилка_компіляції_право != пусто {
        вернути помилка_компіляції_право;
      }
      якщо дані.операція == розбирач::ВидОпераціїДодавання {
        МаМа::покласти_вказівку_Додати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїВіднімання {
        МаМа::покласти_вказівку_Відняти(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїМноження {
        МаМа::покласти_вказівку_Помножити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїДілення {
        МаМа::покласти_вказівку_Поділити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїМодуль {
        МаМа::покласти_вказівку_ОтриматиОстачуДілення(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїДіленняНаціло {
        МаМа::покласти_вказівку_ОтриматиНеповнуЧасткуДілення(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїПіднесенняДоСтепеня {
        МаМа::покласти_вказівку_ПіднестиДоСтепеня(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїЗсувВліво {
        МаМа::покласти_вказівку_ЗсунутиВліво(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїЗсувВправо {
        МаМа::покласти_вказівку_ЗсунутиВправо(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїЗсувВправоЗнаковий {
        МаМа::покласти_вказівку_ЗсунутиВправоЗіЗаповненням(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїДІ {
        МаМа::покласти_вказівку_ДвійковеІ(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїДАБО {
        МаМа::покласти_вказівку_ДвійковеАБО(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїВАБО {
        МаМа::покласти_вказівку_ДвійковеВиключнеАБО(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїМенше {
        МаМа::покласти_вказівку_Менше(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїБільше {
        МаМа::покласти_вказівку_Більше(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїМеншеРівне {
        МаМа::покласти_вказівку_НеБільше(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїБільшеРівне {
        МаМа::покласти_вказівку_НеМенше(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїРівне {
        МаМа::покласти_вказівку_Рівно(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїНерівне {
        МаМа::покласти_вказівку_НеРівно(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїМістить {
        МаМа::покласти_вказівку_Містить(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїНеМістить {
        МаМа::покласти_вказівку_НеМістить(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїЄ {
        МаМа::покласти_вказівку_Є(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше якщо дані.операція == розбирач::ВидОпераціїНеЄ {
        МаМа::покласти_вказівку_НеЄ(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      } інакше {
        МаМа::надрукувати_п64(М, п64(дані.операція));
        вернути виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Невідома операція!");
      }
    } інакше якщо елемент.вид == розбирач::ВидГілкиЗначенняЯкщо {
      ціль дані = елемент.дані як розбирач::ДаніГілкиЗначенняЯкщо;
      ціль помилка_компіляції_умови = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.умова);
      якщо помилка_компіляції_умови != пусто {
        вернути помилка_компіляції_умови;
      }
      ціль позиція_вказівки_стрибнути_якщо_ні = код.накопичувач_вказівок.розмір;
      МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
      ціль помилка_компіляції_так = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.значення_так);
      якщо помилка_компіляції_так != пусто {
        вернути помилка_компіляції_так;
      }
      ціль позиція_вказівки_виходу_з_так = код.накопичувач_вказівок.розмір;
      МаМа::покласти_вказівку_Стрибнути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
      код.накопичувач_вказівок.дані[позиція_вказівки_стрибнути_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
      ціль помилка_компіляції_ні = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.значення_ні);
      якщо помилка_компіляції_ні != пусто {
        вернути помилка_компіляції_ні;
      }
      код.накопичувач_вказівок.дані[позиція_вказівки_виходу_з_так + 1] = код.накопичувач_вказівок.розмір;
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиСамоОперація {
      ціль дані = елемент.дані як розбирач::ДаніГілкиСамоОперація;
      ціль помилка_компіляції_предмета = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.предмет);
      якщо помилка_компіляції_предмета != пусто {
        вернути помилка_компіляції_предмета;
      }
      якщо дані.операція == розбирач::ВидСамоОпераціїЛогічнеНі {
        МаМа::покласти_вказівку_Заперечити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      }
      якщо дані.операція == розбирач::ВидСамоОпераціїДвійковеНі {
        МаМа::покласти_вказівку_ДвійковеНЕ(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      }
      якщо дані.операція == розбирач::ВидСамоОпераціїПлюс {
        МаМа::покласти_вказівку_Числове(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      }
      якщо дані.операція == розбирач::ВидСамоОпераціїМінус {
        МаМа::покласти_вказівку_Відʼємне(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        вернути пусто;
      }
      ціль помилка_компіляції = виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Самооперація не підтримується");
      вернути помилка_компіляції;
    } інакше якщо елемент.вид == розбирач::ВидГілкиМодуль {
      ціль дані = елемент.дані як розбирач::ДаніГілкиМодуль;
      ціль код_модуля = МаМа::виділити_код(М, код.шлях_до_файлу);
      ціль контекст_модуля = виділити_контекст_компіляції(обчислювач, контекст.значення_ю8, контекст.слова);
      ціль помилка_компіляції_тіла_модуля = скомпілювати_тіло(обчислювач, контекст_модуля, код_модуля, дані.тіло, ні);
      якщо помилка_компіляції_тіла_модуля != пусто {
        вернути помилка_компіляції_тіла_модуля;
      }
      ціль позиція_підкоду = М.сховище_кодів.розмір;
      МаМа::покласти_в_накопичувач<адреса<МаМа::Код>>(М, М.сховище_кодів::адреса, код_модуля);
      якщо дані.ідентифікатор.заповнено == позитивне(так) {
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
        МаМа::покласти_вказівку_ТриматиНазву(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      }
      МаМа::покласти_вказівку_СтворитиМодуль(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_підкоду);
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиСписок {
      ціль дані = елемент.дані як розбирач::ДаніГілкиСписок;
      МаМа::покласти_вказівку_СтворитиСписок(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
      змінна ціль пе: позитивне = 0;
      поки пе < дані.кількість_елементів {
        ціль елемент_списку = дані.елементи[пе];
        ціль помилка_компіляції_елементу_списку = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент_списку);
        якщо помилка_компіляції_елементу_списку != пусто {
          вернути помилка_компіляції_елементу_списку;
        }
        МаМа::покласти_вказівку_ПокластиВСписок(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        пе += 1;
      }
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиСловник {
      ціль дані = елемент.дані як розбирач::ДаніГілкиСловник;
      МаМа::покласти_вказівку_СтворитиСловник(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
      змінна ціль пе: позитивне = 0;
      поки пе < дані.кількість_елементів {
        ціль елемент_словника = дані.елементи[пе];
        ціль помилка_компіляції_ключа_словника_списку = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент_словника.ключ);
        якщо помилка_компіляції_ключа_словника_списку != пусто {
          вернути помилка_компіляції_ключа_словника_списку;
        }
        ціль помилка_компіляції_значення_словника_списку = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент_словника.значення);
        якщо помилка_компіляції_значення_словника_списку != пусто {
          вернути помилка_компіляції_значення_словника_списку;
        }
        МаМа::покласти_вказівку_ПокластиВСловник(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        пе += 1;
      }
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиВидалити {
      ціль дані = елемент.дані як розбирач::ДаніГілкиВидалити;
      ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
      МаМа::покласти_вказівку_Видалити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиВидалитиВластивість {
      ціль дані = елемент.дані як розбирач::ДаніГілкиВидалитиВластивість;
      ціль помилка_компіляції_предмета = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.предмет);
      якщо помилка_компіляції_предмета != пусто {
        вернути помилка_компіляції_предмета;
      }
      ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
      МаМа::покласти_вказівку_ВидалитиВластивість(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиВидалитиЕлемент {
      ціль дані = елемент.дані як розбирач::ДаніГілкиВидалитиЕлемент;
      ціль помилка_компіляції_предмета = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.предмет);
      якщо помилка_компіляції_предмета != пусто {
        вернути помилка_компіляції_предмета;
      }
      ціль помилка_компіляції_ключа = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.ключ);
      якщо помилка_компіляції_ключа != пусто {
        вернути помилка_компіляції_ключа;
      }
      МаМа::покласти_вказівку_ВидалитиЕлемент(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      вернути пусто;
    } інакше якщо елемент.вид == розбирач::ВидГілкиЧекати {
      ціль дані = елемент.дані як розбирач::ДаніГілкиЧекати;
      вернути виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Інструкція \"чекати\" наразі не підтримується");
    }
    МаМа::надрукувати_п64(М, п64(елемент.вид));
    вернути виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Невідомий вид розбирач::Гілка!");
  }

  місцева дія скомпілювати_тіло(обчислювач: адреса<Обчислювач>, контекст: адреса<КонтекстКомпіляції>, код: адреса<МаМа::Код>, тіло: розбирач::Гілки, вернути_в_кінці: логічне): адреса<ПомилкаКомпіляції> {
    ціль М = обчислювач.М;
    // потім: обробляти вернути_в_кінці в кожному елементі
    змінна ціль пе: позитивне = 0;
    поки пе < тіло.розмір {
      ціль елемент = тіло.дані[пе];
      якщо елемент.вид == розбирач::ВидГілкиНіщо {
        вернути виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Виявлено розбирач::ВидГілкиНіщо!");
      } інакше якщо елемент.вид == розбирач::ВидГілкиВизначити {
        ціль дані = елемент.дані як розбирач::ДаніГілкиВизначити;
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
        МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      } інакше якщо елемент.вид == розбирач::ВидГілкиВизначитиЗзовні {
        ціль дані = елемент.дані як розбирач::ДаніГілкиВизначитиЗзовні;
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
        МаМа::покласти_вказівку_ВизначитиЗзовні(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      } інакше якщо елемент.вид == розбирач::ВидГілкиЗвернутись {
        ціль дані = елемент.дані як розбирач::ДаніГілкиЗвернутись;
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиОтримати {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиОтриматиЕлемент {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиЗмінити {
        ціль дані = елемент.дані як розбирач::ДаніГілкиЗмінити;
        ціль помилка_компіляції_предмета = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.предмет);
        якщо помилка_компіляції_предмета != пусто {
          вернути помилка_компіляції_предмета;
        }
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор));
        МаМа::покласти_вказівку_ЗмінитиВластивість(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
      } інакше якщо елемент.вид == розбирач::ВидГілкиЗмінитиЕлемент {
        ціль дані = елемент.дані як розбирач::ДаніГілкиЗмінитиЕлемент;
        ціль помилка_компіляції_предмета = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.предмет);
        якщо помилка_компіляції_предмета != пусто {
          вернути помилка_компіляції_предмета;
        }
        ціль помилка_компіляції_позиції = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.ключ);
        якщо помилка_компіляції_позиції != пусто {
          вернути помилка_компіляції_позиції;
        }
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        МаМа::покласти_вказівку_ЗмінитиЕлемент(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      } інакше якщо елемент.вид == розбирач::ВидГілкиВиконати {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиДія {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль дані = елемент.дані як розбирач::ДаніГілкиДія;
        якщо дані.ідентифікатор.заповнено == позитивне(ні) {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        } інакше {
          якщо дані.структура_ == пусто {
            ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
            МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
          } інакше {
            ціль помилка_компіляції_структури = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.структура_);
            якщо помилка_компіляції_структури != пусто {
              вернути помилка_компіляції_структури;
            }
            ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
            МаМа::покласти_вказівку_ЗаписатиМетод(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиСтруктура {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль дані = елемент.дані як розбирач::ДаніГілкиСтруктура;
        якщо дані.ідентифікатор.заповнено == позитивне(ні) {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        } інакше {
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
          МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиЧисло {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиТекст {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиСимвол {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиОперація {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиЯкщо {
        ціль дані = елемент.дані як розбирач::ДаніГілкиЯкщо;
        ціль помилка_компіляції_умови = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.умова);
        якщо помилка_компіляції_умови != пусто {
          вернути помилка_компіляції_умови;
        }
        ціль позиція_вказівки_якщо_ні = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
        ціль контекст_циклу = виділити_контекст_компіляції(обчислювач, контекст.значення_ю8, контекст.слова);
        якщо дані.тіло.розмір != 0 {
          ціль помилка_компіляції_тіла = скомпілювати_тіло(обчислювач, контекст_циклу, код, дані.тіло, ні);
          якщо помилка_компіляції_тіла != пусто {
            вернути помилка_компіляції_тіла;
          }
        }
        ціль позиція_вказівки_якщо_так = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_Стрибнути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
        код.накопичувач_вказівок.дані[позиція_вказівки_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        якщо дані.тіло_інакше.розмір != 0 {
          ціль помилка_компіляції_тіла_інакше = скомпілювати_тіло(обчислювач, контекст_циклу, код, дані.тіло_інакше, ні);
          якщо помилка_компіляції_тіла_інакше != пусто {
            вернути помилка_компіляції_тіла_інакше;
          }
        }
        код.накопичувач_вказівок.дані[позиція_вказівки_якщо_так + 1] = код.накопичувач_вказівок.розмір;
      } інакше якщо елемент.вид == розбирач::ВидГілкиПоки {
        ціль дані = елемент.дані як розбирач::ДаніГілкиПоки;
        ціль позиція_вказівки_початку_поки = код.накопичувач_вказівок.розмір;
        змінна ціль позиція_вказівки_якщо_ні = 0п64;
        якщо дані.умова != пусто {
          ціль помилка_компіляції_умови = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.умова);
          якщо помилка_компіляції_умови != пусто {
            вернути помилка_компіляції_умови;
          }
          позиція_вказівки_якщо_ні = код.накопичувач_вказівок.розмір;
          МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
        }
        ціль контекст_циклу = виділити_контекст_компіляції(обчислювач, контекст.значення_ю8, контекст.слова);
        ціль помилка_компіляції_тіла = скомпілювати_тіло(обчислювач, контекст_циклу, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        МаМа::покласти_вказівку_Стрибнути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_вказівки_початку_поки);
        якщо дані.умова != пусто {
          код.накопичувач_вказівок.дані[позиція_вказівки_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиВернути {
        ціль дані = елемент.дані як розбирач::ДаніГілкиВернути;
        якщо дані.значення == пусто {
          МаМа::покласти_вказівку_ПокластиПусто(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        } інакше {
          ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.значення);
          якщо помилка_компіляції_значення != пусто {
            вернути помилка_компіляції_значення;
          }
        }
        МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      } інакше якщо елемент.вид == розбирач::ВидГілкиЗначенняЯкщо {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиСамоОперація {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиМодуль {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль дані = елемент.дані як розбирач::ДаніГілкиМодуль;
        якщо дані.ідентифікатор.заповнено == позитивне(ні) {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        } інакше {
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення));
          МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиСписок {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиСловник {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиВзяти {
        ціль дані = елемент.дані як розбирач::ДаніГілкиВзяти;
        змінна ціль позиція_назви_типу = МаМа::позиція_назви_з_ю8(М, ю8"модуль");
        якщо дані.тип.заповнено == позитивне(так) {
          позиція_назви_типу = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.тип.значення));
        }
        змінна ціль позиція_останьої_назви: позитивне = 0;
        змінна ціль пш: позитивне = 0;
        поки пш < дані.довжина_шляху {
          ціль елемент_шляху = дані.шлях[пш];
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент_шляху));
          МаМа::покласти_вказівку_НакопичитиНазву(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
          якщо пш == дані.довжина_шляху - 1 {
            позиція_останьої_назви = позиція_назви;
          }
          пш += 1;
        }
        МаМа::покласти_вказівку_Взяти(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви_типу);
        якщо дані.ідентифікатор_як.заповнено == позитивне(ні) {
          якщо дані.кількість_елементів == 0 {
            МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_останьої_назви);
          } інакше {
            змінна ціль пе: позитивне = 0;
            поки пе < дані.кількість_елементів {
              ціль елемент = дані.елементи[пе];
              МаМа::покласти_вказівку_Дублювати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
              МаМа::покласти_вказівку_ОтриматиВластивість(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент.ідентифікатор)));
              якщо елемент.ідентифікатор_як.заповнено == позитивне(ні) {
                МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження),МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент.ідентифікатор)));
              } інакше {
                МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент.ідентифікатор_як.значення)));
              }
              пе += 1;
            }
          }
        } інакше {
          МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор_як.значення)));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиСпробувати {
        ціль дані = елемент.дані як розбирач::ДаніГілкиСпробувати;
        ціль позиція_вказівки_почати_спробу = код.накопичувач_вказівок.розмір;
        якщо дані.ідентифікатор_зловити.заповнено == позитивне(ні) {
          МаМа::покласти_вказівку_ПочатиСпробу(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
        } інакше {
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор_зловити.значення));
          МаМа::покласти_вказівку_ПочатиСпробуЗНазвою(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0, позиція_назви);
        }
        ціль помилка_компіляції_тіла = скомпілювати_тіло(обчислювач, контекст, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        ціль позиція_вказівки_закінчити_спробу = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_ЗакінчитиСпробу(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
        код.накопичувач_вказівок.дані[позиція_вказівки_почати_спробу + 1] = код.накопичувач_вказівок.розмір;
        ціль помилка_компіляції_тіла_зловити = скомпілювати_тіло(обчислювач, контекст, код, дані.тіло_зловити, ні);
        якщо помилка_компіляції_тіла_зловити != пусто {
          вернути помилка_компіляції_тіла_зловити;
        }
        код.накопичувач_вказівок.дані[позиція_вказівки_закінчити_спробу + 1] = код.накопичувач_вказівок.розмір;
      } інакше якщо елемент.вид == розбирач::ВидГілкиВпасти {
        ціль дані = елемент.дані як розбирач::ДаніГілкиВпасти;
        якщо дані.значення == пусто {
          МаМа::покласти_вказівку_ПокластиПусто(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        } інакше {
          ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.значення);
          якщо помилка_компіляції_значення != пусто {
            вернути помилка_компіляції_значення;
          }
        }
        МаМа::покласти_вказівку_Впасти(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      } інакше якщо елемент.вид == розбирач::ВидГілкиДати {
        ціль дані = елемент.дані як розбирач::ДаніГілкиДати;
        змінна ціль пед: позитивне = 0;
        поки пед < дані.кількість_елементів {
          ціль елемент = дані.елементи[пед];
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент.ідентифікатор));
          змінна ціль позиція_назви_як = позиція_назви;
          якщо елемент.ідентифікатор_як.заповнено == позитивне(так) {
            позиція_назви_як = МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, елемент.ідентифікатор_як.значення));
          }
          МаМа::покласти_вказівку_Звернутись(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви);
          МаМа::покласти_вказівку_Дати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_назви_як);
          пед += 1;
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиПеребрати {
        ціль дані = елемент.дані як розбирач::ДаніГілкиПеребрати;
        ціль помилка_компіляції_предмета = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.предмет);
        якщо помилка_компіляції_предмета != пусто {
          вернути помилка_компіляції_предмета;
        }
        МаМа::покласти_вказівку_ОтриматиПеребір(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        ціль позиція_вказівки_початку_перебору = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_ПеребратиДалі(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        ціль позиція_вказівки_якщо_ні = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
        МаМа::покласти_вказівку_Дублювати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        МаМа::покласти_вказівку_ОтриматиВластивість(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), МаМа::позиція_назви_з_ю8(М, ю8"значення"));
        МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення)));
        ціль помилка_компіляції_тіла = скомпілювати_тіло(обчислювач, контекст, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        МаМа::покласти_вказівку_Стрибнути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_вказівки_початку_перебору);
        код.накопичувач_вказівок.дані[позиція_вказівки_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_ПокластиПусто(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення)));
      } інакше якщо елемент.вид == розбирач::ВидГілкиПеребратиДіапазон {
        ціль дані = елемент.дані як розбирач::ДаніГілкиПеребратиДіапазон;
        ціль помилка_компіляції_від = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.від);
        якщо помилка_компіляції_від != пусто {
          вернути помилка_компіляції_від;
        }
        ціль помилка_компіляції_до = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.до);
        якщо помилка_компіляції_до != пусто {
          вернути помилка_компіляції_до;
        }
        ціль позиція_вказівки_початку_циклу = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_ДублюватиПопереднє(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        МаМа::покласти_вказівку_ДублюватиПопереднє(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        якщо дані.включно != 0 {
          МаМа::покласти_вказівку_НеБільше(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        } інакше {
          МаМа::покласти_вказівку_Менше(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
        ціль позиція_вказівки_якщо_ні = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
        МаМа::покласти_вказівку_ДублюватиПопереднє(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        МаМа::покласти_вказівку_Визначити(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), МаМа::позиція_назви_з_ю8(М, розбирач::отримати_ю8_ідентифікатора(контекст.значення_ю8, контекст.слова, дані.ідентифікатор.значення)));
        ціль контекст_циклу = виділити_контекст_компіляції(обчислювач, контекст.значення_ю8, контекст.слова);
        ціль помилка_компіляції_тіла = скомпілювати_тіло(обчислювач, контекст_циклу, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        МаМа::покласти_вказівку_ЗбільшитиПопереднє(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        МаМа::покласти_вказівку_Стрибнути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_вказівки_початку_циклу);
        код.накопичувач_вказівок.дані[позиція_вказівки_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
      } інакше якщо елемент.вид == розбирач::ВидГілкиЦикл {
        ціль дані = елемент.дані як розбирач::ДаніГілкиЦикл;
        ціль помилка_компіляції_старту = скомпілювати_тіло(обчислювач, контекст, код, дані.старт, ні);
        якщо помилка_компіляції_старту != пусто {
          вернути помилка_компіляції_старту;
        }
        ціль позиція_вказівки_початку_циклу = код.накопичувач_вказівок.розмір;
        змінна ціль позиція_вказівки_якщо_ні = 0п64;
        якщо дані.умова != пусто {
          ціль помилка_компіляції_умови = скомпілювати_елемент_значення(обчислювач, контекст, код, дані.умова);
          якщо помилка_компіляції_умови != пусто {
            вернути помилка_компіляції_умови;
          }
          позиція_вказівки_якщо_ні = код.накопичувач_вказівок.розмір;
          МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), 0);
        }
        ціль контекст_циклу = виділити_контекст_компіляції(обчислювач, контекст.значення_ю8, контекст.слова);
        ціль помилка_компіляції_тіла = скомпілювати_тіло(обчислювач, контекст_циклу, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        ціль помилка_компіляції_ітерації = скомпілювати_тіло(обчислювач, контекст_циклу, код, дані.ітерація, ні);
        якщо помилка_компіляції_ітерації != пусто {
          вернути помилка_компіляції_ітерації;
        }
        МаМа::покласти_вказівку_Стрибнути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_вказівки_початку_циклу);
        якщо дані.умова != пусто {
          код.накопичувач_вказівок.дані[позиція_вказівки_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиВічнийЦикл {
        ціль дані = елемент.дані як розбирач::ДаніГілкиВічнийЦикл;
        ціль позиція_вказівки_початку_циклу = код.накопичувач_вказівок.розмір;
        ціль контекст_циклу = виділити_контекст_компіляції(обчислювач, контекст.значення_ю8, контекст.слова);
        ціль помилка_компіляції_тіла = скомпілювати_тіло(обчислювач, контекст_циклу, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        МаМа::покласти_вказівку_Стрибнути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження), позиція_вказівки_початку_циклу);
      } інакше якщо елемент.вид == розбирач::ВидГілкиВидалити {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиВидалитиВластивість {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиВидалитиЕлемент {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше якщо елемент.вид == розбирач::ВидГілкиЧекати {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(обчислювач, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.розмір - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, розбирач::отримати_рядок_з_місцезнаходження(контекст.значення_ю8, контекст.слова, елемент.місцезнаходження));
        }
      } інакше {
        МаМа::надрукувати_п64(М, п64(елемент.вид));
        вернути виділити_помилку_компіляції(обчислювач, елемент.місцезнаходження, ю8сі"Невідомий вид розбирач::Гілка!");
      }
      пе = пе + 1;
    }
    вернути пусто;
  }

  місцева дія звільнити_контекст_компіляції(обчислювач: адреса<Обчислювач>, контекст: адреса<КонтекстКомпіляції>) {
    звільнити(обчислювач, контекст);
  }
}