взяти визначення МаМа;
взяти визначення мавка;

секція мавка {
  // позначка: прохід по типах предмета
  зовнішня дія вивести_предмет(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, глибина: позитивне) {
    ціль М = обчислювач;
    якщо предмет == пусто {
      вивести_ю8(обчислювач, ю8"пусто");
    } інакше якщо предмет.тип == М.предмет_структури_Структура {
      вивести_ю8(обчислювач, ю8"<структура>");
    } інакше якщо предмет.тип == М.предмет_структури_Код {
      вивести_ю8(обчислювач, ю8"<код>");
    } інакше якщо предмет.тип == М.предмет_структури_Середовище {
      вивести_ю8(обчислювач, ю8"<середовище>");
    } інакше якщо предмет.тип == М.предмет_структури_Дія {
      вивести_ю8(обчислювач, ю8"<дія>");
    } інакше якщо предмет.тип == М.предмет_структури_логічне {
      ціль предмет_логічного = предмет як адреса<МаМа::ПредметЛогічного>;
      якщо предмет_логічного.значення == позитивне(так) {
        вивести_ю8(обчислювач, ю8"так");
      } інакше {
        вивести_ю8(обчислювач, ю8"ні");
      }
    } інакше якщо предмет.тип == М.предмет_структури_число {
      ціль предмет_числа = предмет як адреса<МаМа::ПредметЧисла>;
      вивести_д64(обчислювач, предмет_числа.значення);
    } інакше якщо предмет.тип == М.предмет_структури_текст {
      ціль предмет_тексту = предмет як адреса<МаМа::ПредметТексту>;
      якщо глибина > 0 {
        вивести_ю8(обчислювач, ю8"\"");
        змінна ціль текст_з_закодованими_недрукованими = т8 { 0, пусто };
        якщо отримати_з_т8_т8_з_закодованими_недрукованими(обчислювач, предмет_тексту.значення, текст_з_закодованими_недрукованими::адреса) == ні {
          // потім: помилка
        }
        вивести_т8(обчислювач, текст_з_закодованими_недрукованими);
        звільнити_памʼять(обчислювач, текст_з_закодованими_недрукованими.дані);
        вивести_ю8(обчислювач, ю8"\"");
      } інакше {
        вивести_т8(обчислювач, предмет_тексту.значення);
      }
    } інакше якщо предмет.тип == М.предмет_структури_юнікод {
      ціль предмет_юнікоду = предмет як адреса<МаМа::ПредметЮнікоду>;
      якщо глибина > 0 {
        вивести_ю8(обчислювач, ю8"ю\"");
        змінна ціль юнікод_з_закодованими_недрукованими = ю32 { 0, пусто };
        якщо отримати_з_ю32_ю32_з_закодованими_недрукованими(обчислювач, предмет_юнікоду.значення, юнікод_з_закодованими_недрукованими::адреса) == ні {
          // потім: помилка
        }
        вивести_ю32(обчислювач, юнікод_з_закодованими_недрукованими);
        звільнити_памʼять(обчислювач, юнікод_з_закодованими_недрукованими.дані);
        вивести_ю8(обчислювач, ю8"\"");
      } інакше {
        вивести_ю32(обчислювач, предмет_юнікоду.значення);
      }
    } інакше якщо предмет.тип == М.предмет_структури_список {
      ціль предмет_списку = предмет як адреса<МаМа::ПредметСписку>;
      вивести_ю8(обчислювач, ю8"[");
      змінна ціль п: позитивне = 0;
      поки п < предмет_списку.елементи.розмір {
        вивести_предмет(обчислювач, предмет_списку.елементи.дані[п], глибина + 1);
        якщо п < (предмет_списку.елементи.розмір - 1) {
          вивести_ю8(обчислювач, ю8", ");
        }
        п += 1;
      }
      вивести_ю8(обчислювач, ю8"]");
    } інакше якщо предмет.тип == М.предмет_структури_словник {
      вивести_ю8(обчислювач, ю8"<словник>");
    } інакше якщо предмет.тип == М.предмет_структури_байти {
      вивести_ю8(обчислювач, ю8"<байти>");
    } інакше якщо предмет.тип == М.предмет_структури_Модуль {
      вивести_ю8(обчислювач, ю8"<модуль>");
    } інакше якщо предмет.тип == М.предмет_структури_ресурс {
      вивести_ю8(обчислювач, ю8"<ресурс>");
    } інакше якщо предмет.тип == М.предмет_структури_Тип {
      вивести_ю8(обчислювач, ю8"<тип>");
    } інакше якщо предмет.тип == М.предмет_структури_Параметр {
      вивести_ю8(обчислювач, ю8"<параметр>");
    } інакше якщо предмет.тип == М.предмет_структури_ДіапазонЧисел {
      вивести_ю8(обчислювач, ю8"<ДіапазонЧисел>");
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірДіапазонуЧисел {
      вивести_ю8(обчислювач, ю8"<ПеребірДіапазонуЧисел>");
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірСписку {
      вивести_ю8(обчислювач, ю8"<ПеребірСписку>");
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірТексту {
      вивести_ю8(обчислювач, ю8"<ПеребірТексту>");
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірЮнікоду {
      вивести_ю8(обчислювач, ю8"<ПеребірЮнікоду>");
    } інакше якщо предмет.тип == М.предмет_структури_Розширення {
      вивести_ю8(обчислювач, ю8"<Розширення>");
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірБайтів {
      вивести_ю8(обчислювач, ю8"<ПеребірБайтів>");
    } інакше {
      якщо предмет.тип == пусто {
        вивести_ю8(обчислювач, ю8"<предмет>");
      } інакше {
        вивести_т8(обчислювач, предмет.тип.назва.значення);
        вивести_т8(обчислювач, "(");
        ціль складений_предмет = предмет як адреса<МаМа::СкладенийПредмет>;
        змінна ціль п: позитивне = 0;
        поки п < складений_предмет.властивості.елементи.розмір {
          вивести_т8(обчислювач, складений_предмет.властивості.елементи.дані[п].ключ.значення);
          вивести_т8(обчислювач, "=");
          вивести_предмет(обчислювач, складений_предмет.властивості.елементи.дані[п].значення, глибина + 1);
          якщо п < складений_предмет.властивості.елементи.розмір - 1 {
            вивести_т8(обчислювач, ", ");
          }
          п += 1;
        }
        вивести_т8(обчислювач, ")");
      }
    }
  }

  дія рідна_дія_друк(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння {
    змінна ціль п: позитивне = 0;
    поки п < кількість_аргументів {
      вивести_предмет(обчислювач, аргументи[п], 0);
      вивести_ю8(обчислювач, ю8"\n");
      п += 1;
    }
    вернути пусто;
  }

  дія рідна_дія_дізнатись_назву(М: адреса<МаМа::Машина>, предмет_дії: адреса<МаМа::ПредметДії>, предмет_я: адреса<МаМа::Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<МаМа::Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<МаМа::ІменованийАргумент>, місцезнаходження: МаМа::Місцезнаходження): МаМа::предмет_або_стан_падіння {
    змінна ціль аргумент_значення: адреса<МаМа::Предмет> = пусто;
    змінна ціль знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = МаМа::знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, МаМа::назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    ціль предмет_модуля = аргумент_значення як адреса<МаМа::ПредметМодуля>;
    вернути предмет_модуля.назва як адреса<МаМа::Предмет>;
  }

  дія створити_предмет_рідної_дії_дізнатись_назву(М: адреса<МаМа::Машина>): МаМа::предмет_або_стан_падіння {
    ціль допустимі_структури_типу_параметра_значення = виділити_памʼять<адреса<МаМа::ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_значення[0] = М.предмет_структури_Модуль;
    ціль тип_параметра_значення = МаМа::створити_предмет_типу(М, ні, МаМа::Послідовність<адреса<МаМа::ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_значення });
    ціль параметр_значення = МаМа::створити_предмет_параметра(М, МаМа::назва(М, "значення"), тип_параметра_значення, пусто);
    ціль дані_параметрів_дії_дізнатись_назву = виділити_памʼять<адреса<МаМа::ПредметПараметра>>(М, 1);
    дані_параметрів_дії_дізнатись_назву[0] = параметр_значення;
    вернути МаМа::створити_предмет_рідної_дії(М, МаМа::назва(М, "дізнатись_назву"), МаМа::Послідовність<адреса<МаМа::ПредметПараметра>> { 1, дані_параметрів_дії_дізнатись_назву }, пусто, рідна_дія_дізнатись_назву, пусто, пусто, пусто) як адреса<МаМа::Предмет>;
  }

  дія рідна_дія_дізнатись_структуру(М: адреса<МаМа::Машина>, предмет_дії: адреса<МаМа::ПредметДії>, предмет_я: адреса<МаМа::Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<МаМа::Предмет>>, кількість_іменованих_аргументів: позитивне, іменовані_аргументи: памʼять<МаМа::ІменованийАргумент>, місцезнаходження: МаМа::Місцезнаходження): МаМа::предмет_або_стан_падіння {
    змінна ціль аргумент_значення: адреса<МаМа::Предмет> = пусто;
    змінна ціль знайдено_аргумент_значення = ні;
    якщо кількість_іменованих_аргументів > 0 {
      знайдено_аргумент_значення = МаМа::знайти_іменований_аргумент(М, кількість_іменованих_аргументів, іменовані_аргументи, МаМа::назва(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_значення == ні {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    якщо аргумент_значення == пусто {
      вернути пусто;
    }
    вернути аргумент_значення.тип як адреса<Предмет>;
  }

  дія створити_предмет_рідної_дії_дізнатись_структуру(М: адреса<МаМа::Машина>): МаМа::предмет_або_стан_падіння {
    ціль параметр_значення = МаМа::створити_предмет_параметра(М, МаМа::назва(М, "значення"), пусто, пусто);
    ціль дані_параметрів_дії_дізнатись_структуру = виділити_памʼять<адреса<МаМа::ПредметПараметра>>(М, 1);
    дані_параметрів_дії_дізнатись_структуру[0] = параметр_значення;
    вернути МаМа::створити_предмет_рідної_дії(М, МаМа::назва(М, "дізнатись_структуру"), МаМа::Послідовність<адреса<МаМа::ПредметПараметра>> { 1, дані_параметрів_дії_дізнатись_структуру }, пусто, рідна_дія_дізнатись_структуру, пусто, пусто, пусто) як адреса<МаМа::Предмет>;
  }

  зовнішня дія визначити_глобальні(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння {
    ціль результат_створення_рідної_дії_друк = створити_рідну_дію(обчислювач, назва(обчислювач, "друк") як адреса<Предмет>, 0, пусто, пусто, рідна_дія_друк);
    якщо перевірити_чи_стан_падіння(обчислювач) {
      вернути результат_створення_рідної_дії_друк;
    }
    змінна ціль результат_зміни_в_глобальному_середовищі = змінити_в_глобальному_середовищі(обчислювач, назва(обчислювач, "друк"), результат_створення_рідної_дії_друк);
    якщо перевірити_чи_стан_падіння(обчислювач) {
      вернути результат_зміни_в_глобальному_середовищі;
    }

    ціль М = обчислювач;

    ціль предмет_дії_дізнатись_назву = створити_предмет_рідної_дії_дізнатись_назву(М);
    результат_зміни_в_глобальному_середовищі = змінити_в_глобальному_середовищі(обчислювач, назва(обчислювач, "дізнатись_назву"), предмет_дії_дізнатись_назву);
    якщо перевірити_чи_стан_падіння(обчислювач) {
      вернути результат_зміни_в_глобальному_середовищі;
    }

    ціль предмет_дії_дізнатись_структуру = створити_предмет_рідної_дії_дізнатись_структуру(М);
    результат_зміни_в_глобальному_середовищі = змінити_в_глобальному_середовищі(обчислювач, назва(обчислювач, "дізнатись_структуру"), предмет_дії_дізнатись_структуру);
    якщо перевірити_чи_стан_падіння(обчислювач) {
      вернути результат_зміни_в_глобальному_середовищі;
    }

    вернути пусто;
  }
}