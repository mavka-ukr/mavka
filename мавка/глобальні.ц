взяти визначення МаМа;
взяти визначення мавка;

секція мавка {
  // позначка: прохід по типах предмета
  зовнішня дія вивести_предмет(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, глибина: позитивне) {
    ціль М = обчислювач;
    якщо предмет == пусто {
      вивести_ю8(обчислювач, ю8"пусто");
    } інакше якщо предмет.тип == М.предмет_структури_Структура {
      вивести_ю8(обчислювач, ю8"<структура>");
    } інакше якщо предмет.тип == М.предмет_структури_Код {
      вивести_ю8(обчислювач, ю8"<код>");
    } інакше якщо предмет.тип == М.предмет_структури_Середовище {
      вивести_ю8(обчислювач, ю8"<середовище>");
    } інакше якщо предмет.тип == М.предмет_структури_Дія {
      вивести_ю8(обчислювач, ю8"<дія>");
    } інакше якщо предмет.тип == М.предмет_структури_логічне {
      ціль предмет_логічного = предмет як адреса<МаМа::ПредметЛогічного>;
      якщо предмет_логічного.значення == позитивне(так) {
        вивести_ю8(обчислювач, ю8"так");
      } інакше {
        вивести_ю8(обчислювач, ю8"ні");
      }
    } інакше якщо предмет.тип == М.предмет_структури_число {
      ціль предмет_числа = предмет як адреса<МаМа::ПредметЧисла>;
      вивести_д64(обчислювач, предмет_числа.значення);
    } інакше якщо предмет.тип == М.предмет_структури_текст {
      ціль предмет_тексту = предмет як адреса<МаМа::ПредметТексту>;
      якщо глибина > 0 {
        вивести_ю8(обчислювач, ю8"\"");
      }
      вивести_т8(обчислювач, предмет_тексту.значення);
      якщо глибина > 0 {
        вивести_ю8(обчислювач, ю8"\"");
      }
    } інакше якщо предмет.тип == М.предмет_структури_юнікод {
      ціль предмет_юнікоду = предмет як адреса<МаМа::ПредметЮнікоду>;
      якщо глибина > 0 {
        вивести_ю8(обчислювач, ю8"ю\"");
      }
      вивести_ю32(обчислювач, предмет_юнікоду.значення);
      якщо глибина > 0 {
        вивести_ю8(обчислювач, ю8"\"");
      }
    } інакше якщо предмет.тип == М.предмет_структури_список {
      ціль предмет_списку = предмет як адреса<МаМа::ПредметСписку>;
      вивести_ю8(обчислювач, ю8"[");
      змінна ціль п: позитивне = 0;
      поки п < предмет_списку.елементи.розмір {
        вивести_предмет(обчислювач, предмет_списку.елементи.дані[п], глибина + 1);
        якщо п < (предмет_списку.елементи.розмір - 1) {
          вивести_ю8(обчислювач, ю8", ");
        }
        п += 1;
      }
      вивести_ю8(обчислювач, ю8"]");
    } інакше якщо предмет.тип == М.предмет_структури_словник {
      вивести_ю8(обчислювач, ю8"<словник>");
    } інакше якщо предмет.тип == М.предмет_структури_байти {
      вивести_ю8(обчислювач, ю8"<байти>");
    } інакше якщо предмет.тип == М.предмет_структури_Модуль {
      вивести_ю8(обчислювач, ю8"<модуль>");
    } інакше якщо предмет.тип == М.предмет_структури_ресурс {
      вивести_ю8(обчислювач, ю8"<ресурс>");
    } інакше якщо предмет.тип == М.предмет_структури_Тип {
      вивести_ю8(обчислювач, ю8"<тип>");
    } інакше якщо предмет.тип == М.предмет_структури_Параметр {
      вивести_ю8(обчислювач, ю8"<параметр>");
    } інакше якщо предмет.тип == М.предмет_структури_ДіапазонЧисел {
      вивести_ю8(обчислювач, ю8"<ДіапазонЧисел>");
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірДіапазонуЧисел {
      вивести_ю8(обчислювач, ю8"<ПеребірДіапазонуЧисел>");
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірСписку {
      вивести_ю8(обчислювач, ю8"<ПеребірСписку>");
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірТексту {
      вивести_ю8(обчислювач, ю8"<ПеребірТексту>");
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірЮнікоду {
      вивести_ю8(обчислювач, ю8"<ПеребірЮнікоду>");
    } інакше якщо предмет.тип == М.предмет_структури_Розширення {
      вивести_ю8(обчислювач, ю8"<Розширення>");
    } інакше {
      якщо предмет.тип == пусто {
        вивести_ю8(обчислювач, ю8"<предмет>");
      } інакше {
        вивести_т8(обчислювач, предмет.тип.назва.значення);
        вивести_т8(обчислювач, "(");
        ціль складений_предмет = предмет як адреса<МаМа::СкладенийПредмет>;
        змінна ціль п: позитивне = 0;
        поки п < складений_предмет.властивості.елементи.розмір {
          вивести_т8(обчислювач, складений_предмет.властивості.елементи.дані[п].ключ.значення);
          вивести_т8(обчислювач, "=");
          вивести_предмет(обчислювач, складений_предмет.властивості.елементи.дані[п].значення, глибина + 1);
          якщо п < складений_предмет.властивості.елементи.розмір - 1 {
            вивести_т8(обчислювач, ", ");
          }
          п += 1;
        }
        вивести_т8(обчислювач, ")");
      }
    }
  }

  дія рідна_дія_друк(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): Результат {
    змінна ціль п: позитивне = 0;
    поки п < кількість_аргументів {
      вивести_предмет(обчислювач, аргументи[п], 0);
      вивести_ю8(обчислювач, ю8"\n");
      п += 1;
    }
    вернути Результат { позитивне(ні), пусто };
  }

  зовнішня дія визначити_глобальні(обчислювач: адреса<Обчислювач>): Результат {
    ціль результат_створення_рідної_дії_друк = створити_рідну_дію(обчислювач, назва(обчислювач, "друк") як адреса<Предмет>, 0, пусто, пусто, рідна_дія_друк);
    якщо результат_створення_рідної_дії_друк.стан_падіння == позитивне(так) {
      вернути результат_створення_рідної_дії_друк;
    }
    ціль результат_зміни_в_глобальному_середовищі = змінити_в_глобальному_середовищі(обчислювач, назва(обчислювач, "друк"), результат_створення_рідної_дії_друк.значення);
    якщо результат_зміни_в_глобальному_середовищі.стан_падіння == позитивне(так) {
      вернути результат_зміни_в_глобальному_середовищі;
    }
    вернути Результат { позитивне(ні), пусто };
  }
}