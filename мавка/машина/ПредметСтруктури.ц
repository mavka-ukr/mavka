взяти визначення мавка;

секція мавка {
}

секція мавка {
  дія записати_параметр_структури_Структура_назва(М: адреса<Машина>) {
    змінна параметр_назва = створити_предмет_параметра(М, створити_назву(М, "назва"), пусто);
    М.предмет_структури_Структура.параметри.дані[0] = параметр_назва;
  }

  дія записати_параметр_структури_Структура_предок(М: адреса<Машина>) {
    змінна параметр_предок = створити_предмет_параметра(М, створити_назву(М, "предок"), пусто);
    М.предмет_структури_Структура.параметри.дані[1] = параметр_предок;
  }

  дія записати_параметр_структури_Структура_параметри(М: адреса<Машина>) {
    змінна параметр_параметри = створити_предмет_параметра(М, створити_назву(М, "параметри"), пусто);
    М.предмет_структури_Структура.параметри.дані[2] = параметр_параметри;
  }

  місцева дія заповнити_предмет_структури_Структура(М: адреса<Машина>) {
    // параметри
    записати_параметр_структури_Структура_назва(М);
    записати_параметр_структури_Структура_предок(М);
    записати_параметр_структури_Структура_параметри(М);

    // методи
  }

  місцева дія створити_предмет_структури(М: адреса<Машина>, назва: адреса<ПредметТексту>, предок: адреса<ПредметСтруктури>, кількість_параметрів: позитивне, дані_параметрів: памʼять<адреса<ПредметПараметра>>): адреса<ПредметСтруктури> {
    змінна предмет_структури = створити_предмет<ПредметСтруктури>(М, М.предмет_структури_Структура);
    предмет_структури.властивості = зробити_реєстр_з_даними<адреса<ПредметТексту>, адреса<Предмет>, Машина>(М, М, перевірити_чи_предмети_назви_рівні);
    предмет_структури.середовище_створення = пусто;
    предмет_структури.назва = назва;
    предмет_структури.предок = предок;
    якщо предок == пусто {
      предмет_структури.параметри = Послідовність<адреса<ПредметПараметра>> { кількість_параметрів, дані_параметрів };
    } інакше {
      змінна нові_параметри = зробити_накопичувач<адреса<ПредметПараметра>>(М);
      змінна п: позитивне = 0;
      поки п < предок.параметри.розмір {
        змінна параметр = предок.параметри.дані[п];
        покласти_в_накопичувач<адреса<ПредметПараметра>>(М, нові_параметри::адреса, параметр);
        п += 1;
      }
      п = 0;
      поки п < кількість_параметрів {
        змінна параметр = дані_параметрів[п];
        покласти_в_накопичувач<адреса<ПредметПараметра>>(М, нові_параметри::адреса, параметр);
        п += 1;
      }
      предмет_структури.параметри = Послідовність<адреса<ПредметПараметра>> { нові_параметри.розмір, нові_параметри.дані };
      звільнити_памʼять(М, дані_параметрів);
    }
    предмет_структури.методи = зробити_реєстр_з_даними<адреса<ПредметТексту>, адреса<ПредметДії>, Машина>(М, М, перевірити_чи_предмети_назви_рівні);
    предмет_структури.власні_дії = зробити_реєстр_з_даними<адреса<ПредметТексту>, адреса<ПредметДії>, Машина>(М, М, перевірити_чи_предмети_назви_рівні);
    предмет_структури.заборонити_наслідування = ні;
    вернути предмет_структури;
  }

  місцева дія предмет_структури_виконати(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    // позначка: прохід по типах предмета
    якщо предмет_структури == М.предмет_структури_байти {
      вернути виконати_предмет_структури_байти(М, кількість_аргументів, аргументи, іменовані_аргументи, місцезнаходження);
    }
    якщо предмет_структури == М.предмет_структури_Буфер {
      вернути виконати_предмет_структури_Буфер(М, кількість_аргументів, аргументи, іменовані_аргументи, місцезнаходження);
    }
    якщо предмет_структури == М.предмет_структури_ДіапазонЧисел {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо створити предмет діапазону чисел") як адреса<Предмет>);
    }
    якщо предмет_структури == М.предмет_структури_Дія {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо створити предмет дії") як адреса<Предмет>);
    }
    якщо предмет_структури == М.предмет_структури_Код {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо створити предмет коду") як адреса<Предмет>);
    }
    якщо предмет_структури == М.предмет_структури_логічне {
      вернути виконати_предмет_структури_логічне(М, кількість_аргументів, аргументи, іменовані_аргументи, місцезнаходження);
    }
    якщо предмет_структури == М.предмет_структури_текст {
      вернути виконати_предмет_структури_текст(М, кількість_аргументів, аргументи, іменовані_аргументи, місцезнаходження);
    }
    змінна складений_предмет = створити_складений_предмет(М, предмет_структури);
    змінна п: позитивне = 0;
    поки п < предмет_структури.параметри.розмір {
      змінна параметр = предмет_структури.параметри.дані[п];
      змінна значення_аргумента: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        якщо знайти_іменований_аргумент(М, іменовані_аргументи, параметр.назва, значення_аргумента::адреса) {
          стрибнути х;
        }
      }
      якщо кількість_аргументів > п {
        значення_аргумента = аргументи[п];
      } інакше {
        якщо параметр.код_значення != пусто {
          змінна результат = виконати_код(М, параметр.код_значення, предмет_структури.середовище_створення);
          якщо М.стан_падіння == позитивне(так) {
            вернути пусто;
          } інакше {
            значення_аргумента = результат;
          }
        }
      }
      х:
      змінити_в_реєстрі<адреса<ПредметТексту>, адреса<Предмет>>(М, складений_предмет.властивості::адреса, параметр.назва, значення_аргумента);
      п += 1;
    }
    п = 0;
    поки п < предмет_структури.власні_дії.елементи.розмір {
      змінна елемент = предмет_структури.власні_дії.елементи.дані[п];
      змінити_в_реєстрі<адреса<ПредметТексту>, адреса<Предмет>>(М, складений_предмет.властивості::адреса, елемент.ключ, привласнити_дію(М, елемент.значення, складений_предмет як адреса<Предмет>) як адреса<Предмет>);
      п += 1;
    }
    вернути складений_предмет як адреса<Предмет>;
  }

  місцева дія предмет_структури_отримати_властивість(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "назва")) {
      вернути предмет_структури.назва як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "предок")) {
      вернути предмет_структури.предок як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "параметри")) {
      змінна предмет_списку_параметрів = створити_предмет_списку(М, предмет_структури.параметри.розмір);
      змінна п: позитивне = 0;
      поки п < предмет_структури.параметри.розмір {
        покласти_в_накопичувач<адреса<Предмет>>(М, предмет_списку_параметрів.елементи::адреса, предмет_структури.параметри.дані[п] як адреса<Предмет>);
        п += 1;
      }
      вернути предмет_списку_параметрів як адреса<Предмет>;
    }
    змінна елемент_властивості = ЕлементРеєстру<адреса<ПредметТексту>, адреса<Предмет>> { пусто, пусто };
    якщо знайти_в_реєстрі<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_структури.властивості::адреса, назва, елемент_властивості::адреса) {
      вернути елемент_властивості.значення;
    }
    якщо предмет_структури.тип != пусто {
      змінна метод: адреса<ПредметДії> = пусто;
      якщо знайти_метод_в_структурі(М, предмет_структури.тип, назва, метод::адреса) {
        вернути метод як адреса<Предмет>;
      }
    }
    вернути пусто;
  }

  місцева дія предмет_структури_змінити_властивість(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "назва")) {
      вернути пусто;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "предок")) {
      вернути пусто;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "параметри")) {
      вернути пусто;
    }
    змінити_в_реєстрі<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_структури.властивості::адреса, назва, значення);
  }

  місцева дія предмет_структури_видалити_властивість(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "назва")) {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "предок")) {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "параметри")) {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
    якщо видалити_з_реєстру<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_структури.властивості::адреса, назва) {
      вернути М.предмет_логічного_так як адреса<Предмет>;
    } інакше {
      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }
  }

  місцева дія предмет_структури_виконати_властивість(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна предмет_властивості = предмет_структури_отримати_властивість(М, предмет_структури, назва, місцезнаходження);
    якщо М.стан_падіння == позитивне(так) {
      вернути пусто;
    }
    якщо предмет_властивості == пусто {
      змінна накопичувач_т8_помилки = зробити_накопичувач<п8>(М);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "Неможливо виконати пусту властивість предмета структури \"");
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, назва.значення);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "\"");
      змінна предмет_помилки = створити_предмет_тексту(М, т8 { накопичувач_т8_помилки.розмір, накопичувач_т8_помилки.дані });
      звільнити_памʼять(М, накопичувач_т8_помилки.дані);
      вернути результат_стан_падіння(М, місцезнаходження, предмет_помилки як адреса<Предмет>);
    }
    вернути предмет_виконати(М, предмет_властивості, предмет_структури як адреса<Предмет>, кількість_аргументів, аргументи, іменовані_аргументи, місцезнаходження);
  }

  місцева дія предмет_структури_додати(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_додати"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_відняти(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_відняти"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_помножити(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_помножити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_поділити(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_поділити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_остача(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_остача"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_неповна_частка(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_неповна_частка"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_степінь(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_степінь"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_зсунути_вліво(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_вліво"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_зсунути_вправо(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_вправо"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_зсунути_вправо_2(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_вправо_2"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_двійкове_і(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_двійкове_і"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_двійкове_або(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_двійкове_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_двійкове_виключне_або(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_двійкове_виключне_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_двійкове_заперечення(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_двійкове_заперечення"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_менше(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_менше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_більше(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_більше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_містить(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_містить"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_числова_негація(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_числова_негація"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_отримати_число(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_число"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_збільшити(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_збільшити"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_зменшити(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_зменшити"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_зображення(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_зображення"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_текст(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_текст"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_отримати_байти(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_байти"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_отримати_елемент(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_отримати_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_змінити_елемент(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, ключ: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_змінити_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_видалити_елемент(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_видалити_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_отримати_перебір(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_перебір"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_структури_отримати_діапазон(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
    якщо включно {
      аргументи[0] = М.предмет_логічного_так як адреса<Предмет>;
    } інакше {
      аргументи[0] = М.предмет_логічного_ні як адреса<Предмет>;
    }
    аргументи[1] = до;
    змінна результат = предмет_структури_виконати_властивість(М, предмет_структури, створити_назву(М, "чародія_діапазон"), 2, аргументи, пусто, місцезнаходження);
    звільнити_памʼять(М, аргументи);
    вернути результат;
  }

  місцева дія предмет_структури_записати_метод(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, метод: адреса<ПредметДії>) -> ПредметАбоСтанПадіння<Предмет> {
    змінити_в_реєстрі<адреса<ПредметТексту>, адреса<ПредметДії>>(М, предмет_структури.методи::адреса, назва, метод);
    вернути метод як адреса<Предмет>;
  }

  місцева дія предмет_структури_записати_власну_дію(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>, назва: адреса<ПредметТексту>, метод: адреса<ПредметДії>) -> ПредметАбоСтанПадіння<Предмет> {
    змінити_в_реєстрі<адреса<ПредметТексту>, адреса<ПредметДії>>(М, предмет_структури.власні_дії::адреса, назва, метод);
    вернути метод як адреса<Предмет>;
  }
}