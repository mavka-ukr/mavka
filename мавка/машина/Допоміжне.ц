взяти визначення мавка;

секція мавка {
  місцева дія перевірити_чи_ю8_рівні(а: ю8, б: ю8): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }
    змінна п: позитивне = 0;
    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }
      п += 1;
    }
    вернути так;
  }

  місцева дія перевірити_чи_ю32_рівні(а: ю32, б: ю32): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }
    змінна п: позитивне = 0;
    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }
      п += 1;
    }
    вернути так;
  }

  місцева дія перевірити_чи_т8_рівні(а: т8, б: т8): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }
    змінна п: позитивне = 0;
    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }
      п += 1;
    }
    вернути так;
  }

  місцева дія перевірити_чи_ю8_закінчується_на(значення: ю8, шукане: ю8): логічне {
    якщо шукане.розмір > значення.розмір {
      вернути ні;
    }
    змінна п: позитивне = значення.розмір - шукане.розмір;
    змінна пп: позитивне = 0;
    поки п < значення.розмір {
      якщо значення.дані[п] != шукане.дані[пп] {
        вернути ні;
      }
      п += 1;
      пп += 1;
    }
    вернути так;
  }

  місцева дія виділити_копію_т8(М: адреса<Машина>, значення: т8, вихід: адреса<т8>): логічне {
    змінна копія = т8 {
      значення.розмір,
      виділити_памʼять<п8>(М, значення.розмір)
    };
    змінна п: позитивне = 0;
    поки п < значення.розмір {
      копія.дані[п] = значення.дані[п];
      п += 1;
    }
    вихід::вміст = копія;
    вернути так;
  }

  місцева дія виділити_копію_ю8(М: адреса<Машина>, значення: ю8, вихід: адреса<ю8>): логічне {
    змінна копія = ю8 {
      значення.розмір,
      виділити_памʼять<п8>(М, значення.розмір)
    };
    змінна п: позитивне = 0;
    поки п < значення.розмір {
      копія.дані[п] = значення.дані[п];
      п += 1;
    }
    вихід::вміст = копія;
    вернути так;
  }

  місцева дія виділити_копію_ю32(М: адреса<Машина>, значення: ю32, вихід: адреса<ю32>): логічне {
    змінна копія = ю32 {
      значення.розмір,
      виділити_памʼять<п32>(М, значення.розмір)
    };
    змінна п: позитивне = 0;
    поки п < значення.розмір {
      копія.дані[п] = значення.дані[п];
      п += 1;
    }
    вихід::вміст = копія;
    вернути так;
  }

  місцева дія виділити_копію_памʼяті(М: адреса<Машина>, розмір: позитивне, значення: памʼять<п8>, вихід: адреса<памʼять<п8>>): логічне {
    змінна копія = виділити_памʼять<п8>(М, розмір);
    змінна п: позитивне = 0;
    поки п < розмір {
      копія[п] = значення[п];
      п += 1;
    }
    вихід::вміст = копія;
    вернути так;
  }
}
