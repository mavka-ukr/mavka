взяти визначення мавка;

секція мавка {
  дія позначити_предмет(М: адреса<Машина>, предмет: адреса<Предмет>);
  дія позначити_предмет_структури(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>);
  дія позначити_предмет_коду(М: адреса<Машина>, предмет_коду: адреса<ПредметКоду>);
  дія позначити_предмет_середовища(М: адреса<Машина>, предмет_середовища: адреса<ПредметСередовища>);
  дія позначити_предмет_дії(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>);
  дія позначити_предмет_логічного(М: адреса<Машина>, предмет_логічного: адреса<ПредметЛогічного>);
  дія позначити_предмет_числа(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>);
  дія позначити_предмет_тексту(М: адреса<Машина>, предмет_тексту: адреса<ПредметТексту>);
  дія позначити_предмет_списку(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>);
  дія позначити_предмет_словника(М: адреса<Машина>, предмет_словника: адреса<ПредметСловника>);
  дія позначити_предмет_байтів(М: адреса<Машина>, предмет_байтів: адреса<ПредметБайтів>);
  дія позначити_предмет_буфера(М: адреса<Машина>, предмет_буфера: адреса<ПредметБуфера>);
  дія позначити_предмет_модуля(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>);
  дія позначити_предмет_параметра(М: адреса<Машина>, предмет_параметра: адреса<ПредметПараметра>);
  дія позначити_предмет_діапазону_чисел(М: адреса<Машина>, предмет_діапазону_чисел: адреса<ПредметДіапазонуЧисел>);
  дія позначити_предмет_перебору_діапазону_чисел(М: адреса<Машина>, предмет_перебору_діапазону_чисел: адреса<ПредметПереборуДіапазонуЧисел>);
  дія позначити_предмет_перебору_списку(М: адреса<Машина>, предмет_перебору_списку: адреса<ПредметПереборуСписку>);
  дія позначити_предмет_перебору_тексту(М: адреса<Машина>, предмет_перебору_тексту: адреса<ПредметПереборуТексту>);
  дія позначити_предмет_розширення(М: адреса<Машина>, предмет_розширення: адреса<ПредметРозширення>);
  дія позначити_предмет_перебору_байтів(М: адреса<Машина>, предмет_перебору_байтів: адреса<ПредметПереборуБайтів>);
  дія позначити_предмет_перебору_буфера(М: адреса<Машина>, предмет_перебору_буфера: адреса<ПредметПереборуБуфера>);
  дія позначити_предмет_шляху(М: адреса<Машина>, предмет_шляху: адреса<ПредметШляху>);
  дія позначити_складений_предмет(М: адреса<Машина>, складений_предмет: адреса<СкладенийПредмет>);

  // позначка: прохід по типах предмета
  дія позначити_предмет(М: адреса<Машина>, предмет: адреса<Предмет>) {
    якщо предмет == пусто {
    } інакше якщо предмет.тип == М.предмет_структури_Структура {
      позначити_предмет_структури(М, предмет як адреса<ПредметСтруктури>);
    } інакше якщо предмет.тип == М.предмет_структури_Код {
      позначити_предмет_коду(М, предмет як адреса<ПредметКоду>);
    } інакше якщо предмет.тип == М.предмет_структури_Середовище {
      позначити_предмет_середовища(М, предмет як адреса<ПредметСередовища>);
    } інакше якщо предмет.тип == М.предмет_структури_Дія {
      позначити_предмет_дії(М, предмет як адреса<ПредметДії>);
    } інакше якщо предмет.тип == М.предмет_структури_логічне {
      позначити_предмет_логічного(М, предмет як адреса<ПредметЛогічного>);
    } інакше якщо предмет.тип == М.предмет_структури_число {
      позначити_предмет_числа(М, предмет як адреса<ПредметЧисла>);
    } інакше якщо предмет.тип == М.предмет_структури_текст {
      позначити_предмет_тексту(М, предмет як адреса<ПредметТексту>);
    } інакше якщо предмет.тип == М.предмет_структури_список {
      позначити_предмет_списку(М, предмет як адреса<ПредметСписку>);
    } інакше якщо предмет.тип == М.предмет_структури_словник {
      позначити_предмет_словника(М, предмет як адреса<ПредметСловника>);
    } інакше якщо предмет.тип == М.предмет_структури_байти {
      позначити_предмет_байтів(М, предмет як адреса<ПредметБайтів>);
    } інакше якщо предмет.тип == М.предмет_структури_Буфер {
      позначити_предмет_буфера(М, предмет як адреса<ПредметБуфера>);
    } інакше якщо предмет.тип == М.предмет_структури_Модуль {
      позначити_предмет_модуля(М, предмет як адреса<ПредметМодуля>);
    } інакше якщо предмет.тип == М.предмет_структури_Параметр {
      позначити_предмет_параметра(М, предмет як адреса<ПредметПараметра>);
    } інакше якщо предмет.тип == М.предмет_структури_ДіапазонЧисел {
      позначити_предмет_діапазону_чисел(М, предмет як адреса<ПредметДіапазонуЧисел>);
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірДіапазонуЧисел {
      позначити_предмет_перебору_діапазону_чисел(М, предмет як адреса<ПредметПереборуДіапазонуЧисел>);
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірСписку {
      позначити_предмет_перебору_списку(М, предмет як адреса<ПредметПереборуСписку>);
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірТексту {
      позначити_предмет_перебору_тексту(М, предмет як адреса<ПредметПереборуТексту>);
    } інакше якщо предмет.тип == М.предмет_структури_Розширення {
      позначити_предмет_розширення(М, предмет як адреса<ПредметРозширення>);
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірБайтів {
      позначити_предмет_перебору_байтів(М, предмет як адреса<ПредметПереборуБайтів>);
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірБуфера {
      позначити_предмет_перебору_буфера(М, предмет як адреса<ПредметПереборуБуфера>);
    } інакше якщо предмет.тип == М.предмет_структури_Шлях {
      позначити_предмет_шляху(М, предмет як адреса<ПредметШляху>);
    } інакше {
      позначити_складений_предмет(М, предмет як адреса<СкладенийПредмет>);
    }
  }

  дія позначити_предмет_структури(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>) {
    якщо предмет_структури.позначено == позитивне(так) {
      вернути;
    }
    предмет_структури.позначено = позитивне(так);
    якщо предмет_структури.тип != пусто {
      позначити_предмет_структури(М, предмет_структури.тип);
    }
    змінна п: позитивне = 0;
    поки п < предмет_структури.властивості.елементи.розмір {
      позначити_предмет_тексту(М, предмет_структури.властивості.елементи.дані[п].ключ);
      позначити_предмет(М, предмет_структури.властивості.елементи.дані[п].значення);
      п += 1;
    }
    якщо предмет_структури.середовище_створення != пусто {
      позначити_предмет_середовища(М, предмет_структури.середовище_створення);
    }
    якщо предмет_структури.назва != пусто {
      позначити_предмет_тексту(М, предмет_структури.назва);
    }
    якщо предмет_структури.предок != пусто {
      позначити_предмет_структури(М, предмет_структури.предок);
    }
    п = 0;
    поки п < предмет_структури.параметри.розмір {
      позначити_предмет_параметра(М, предмет_структури.параметри.дані[п]);
      п += 1;
    }
    п = 0;
    поки п < предмет_структури.методи.елементи.розмір {
      позначити_предмет_тексту(М, предмет_структури.методи.елементи.дані[п].ключ);
      позначити_предмет_дії(М, предмет_структури.методи.елементи.дані[п].значення);
      п += 1;
    }
    п = 0;
    поки п < предмет_структури.власні_дії.елементи.розмір {
      позначити_предмет_тексту(М, предмет_структури.власні_дії.елементи.дані[п].ключ);
      позначити_предмет_дії(М, предмет_структури.власні_дії.елементи.дані[п].значення);
      п += 1;
    }
  }

  дія позначити_предмет_коду(М: адреса<Машина>, предмет_коду: адреса<ПредметКоду>) {
    якщо предмет_коду.позначено == позитивне(так) {
      вернути;
    }
    предмет_коду.позначено = позитивне(так);
    якщо предмет_коду.тип != пусто {
      позначити_предмет_структури(М, предмет_коду.тип);
    }
    змінна шлях = предмет_коду.шлях як адреса<ПредметТексту> як адреса<Предмет>;
    позначити_предмет(М, шлях);
    змінна п: позитивне = 0;
    поки п < предмет_коду.константи.розмір {
      позначити_предмет(М, предмет_коду.константи.дані[п]);
      п += 1;
    }
    якщо предмет_коду.байти != пусто {
      позначити_предмет_байтів(М, предмет_коду.байти);
    }
  }

  дія позначити_предмет_середовища(М: адреса<Машина>, предмет_середовища: адреса<ПредметСередовища>) {
    якщо предмет_середовища.позначено == позитивне(так) {
      вернути;
    }
    предмет_середовища.позначено = позитивне(так);
    якщо предмет_середовища.тип != пусто {
      позначити_предмет_структури(М, предмет_середовища.тип);
    }
    якщо предмет_середовища.зовнішнє != пусто {
      позначити_предмет_середовища(М, предмет_середовища.зовнішнє);
    }
    змінна п: позитивне = 0;
    поки п < предмет_середовища.підмети.елементи.розмір {
      позначити_предмет_тексту(М, предмет_середовища.підмети.елементи.дані[п].ключ);
      позначити_предмет(М, предмет_середовища.підмети.елементи.дані[п].значення);
      п += 1;
    }
    якщо предмет_середовища.предмет_модуля != пусто {
      позначити_предмет_модуля(М, предмет_середовища.предмет_модуля);
    }
    позначити_предмет(М, предмет_середовища.предмет_я);
  }

  дія позначити_предмет_дії(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>) {
    якщо предмет_дії.позначено == позитивне(так) {
      вернути;
    }
    предмет_дії.позначено = позитивне(так);
    якщо предмет_дії.тип != пусто {
      позначити_предмет_структури(М, предмет_дії.тип);
    }
    якщо предмет_дії.середовище_створення != пусто {
      позначити_предмет_середовища(М, предмет_дії.середовище_створення);
    }
    позначити_предмет(М, предмет_дії.предмет_я);
    якщо предмет_дії.назва != пусто {
      позначити_предмет_тексту(М, предмет_дії.назва);
    }
    змінна п: позитивне = 0;
    поки п < предмет_дії.параметри.розмір {
      позначити_предмет_параметра(М, предмет_дії.параметри.дані[п]);
      п += 1;
    }
    якщо предмет_дії.код != пусто {
      позначити_предмет_коду(М, предмет_дії.код);
    }
  }

  дія позначити_предмет_логічного(М: адреса<Машина>, предмет_логічного: адреса<ПредметЛогічного>) {
    якщо предмет_логічного.позначено == позитивне(так) {
      вернути;
    }
    предмет_логічного.позначено = позитивне(так);
    якщо предмет_логічного.тип != пусто {
      позначити_предмет_структури(М, предмет_логічного.тип);
    }
  }

  дія позначити_предмет_числа(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>) {
    якщо предмет_числа.позначено == позитивне(так) {
      вернути;
    }
    предмет_числа.позначено = позитивне(так);
    якщо предмет_числа.тип != пусто {
      позначити_предмет_структури(М, предмет_числа.тип);
    }
  }

  дія позначити_предмет_тексту(М: адреса<Машина>, предмет_тексту: адреса<ПредметТексту>) {
    якщо предмет_тексту.позначено == позитивне(так) {
      вернути;
    }
    предмет_тексту.позначено = позитивне(так);
    якщо предмет_тексту.тип != пусто {
      позначити_предмет_структури(М, предмет_тексту.тип);
    }
  }

  дія позначити_предмет_списку(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>) {
    якщо предмет_списку.позначено == позитивне(так) {
      вернути;
    }
    предмет_списку.позначено = позитивне(так);
    якщо предмет_списку.тип != пусто {
      позначити_предмет_структури(М, предмет_списку.тип);
    }
    змінна п: позитивне = 0;
    поки п < предмет_списку.елементи.розмір {
      позначити_предмет(М, предмет_списку.елементи.дані[п]);
      п += 1;
    }
  }

  дія позначити_предмет_словника(М: адреса<Машина>, предмет_словника: адреса<ПредметСловника>) {
    якщо предмет_словника.позначено == позитивне(так) {
      вернути;
    }
    предмет_словника.позначено = позитивне(так);
    якщо предмет_словника.тип != пусто {
      позначити_предмет_структури(М, предмет_словника.тип);
    }
    змінна п: позитивне = 0;
    поки п < предмет_словника.елементи.елементи.розмір {
      позначити_предмет(М, предмет_словника.елементи.елементи.дані[п].ключ);
      позначити_предмет(М, предмет_словника.елементи.елементи.дані[п].значення);
      п += 1;
    }
  }

  дія позначити_предмет_байтів(М: адреса<Машина>, предмет_байтів: адреса<ПредметБайтів>) {
    якщо предмет_байтів.позначено == позитивне(так) {
      вернути;
    }
    предмет_байтів.позначено = позитивне(так);
    якщо предмет_байтів.тип != пусто {
      позначити_предмет_структури(М, предмет_байтів.тип);
    }
  }

  дія позначити_предмет_буфера(М: адреса<Машина>, предмет_буфера: адреса<ПредметБуфера>) {
    якщо предмет_буфера.позначено == позитивне(так) {
      вернути;
    }
    предмет_буфера.позначено = позитивне(так);
    якщо предмет_буфера.тип != пусто {
      позначити_предмет_структури(М, предмет_буфера.тип);
    }
  }

  дія позначити_предмет_модуля(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>) {
    якщо предмет_модуля.позначено == позитивне(так) {
      вернути;
    }
    предмет_модуля.позначено = позитивне(так);
    якщо предмет_модуля.тип != пусто {
      позначити_предмет_структури(М, предмет_модуля.тип);
    }
    якщо предмет_модуля.назва != пусто {
      позначити_предмет_тексту(М, предмет_модуля.назва);
    }
    змінна п: позитивне = 0;
    поки п < предмет_модуля.властивості.елементи.розмір {
      позначити_предмет_тексту(М, предмет_модуля.властивості.елементи.дані[п].ключ);
      позначити_предмет(М, предмет_модуля.властивості.елементи.дані[п].значення);
      п += 1;
    }
    якщо предмет_модуля.назва_паку != пусто {
      позначити_предмет_тексту(М, предмет_модуля.назва_паку);
    }
  }

  дія позначити_предмет_параметра(М: адреса<Машина>, предмет_параметра: адреса<ПредметПараметра>) {
    якщо предмет_параметра.позначено == позитивне(так) {
      вернути;
    }
    предмет_параметра.позначено = позитивне(так);
    якщо предмет_параметра.тип != пусто {
      позначити_предмет_структури(М, предмет_параметра.тип);
    }
    якщо предмет_параметра.назва != пусто {
      позначити_предмет_тексту(М, предмет_параметра.назва);
    }
    якщо предмет_параметра.код_значення != пусто {
      позначити_предмет_коду(М, предмет_параметра.код_значення);
    }
  }

  дія позначити_предмет_діапазону_чисел(М: адреса<Машина>, предмет_діапазону_чисел: адреса<ПредметДіапазонуЧисел>) {
    якщо предмет_діапазону_чисел.позначено == позитивне(так) {
      вернути;
    }
    предмет_діапазону_чисел.позначено = позитивне(так);
    якщо предмет_діапазону_чисел.тип != пусто {
      позначити_предмет_структури(М, предмет_діапазону_чисел.тип);
    }
    позначити_предмет_числа(М, предмет_діапазону_чисел.від);
    позначити_предмет_числа(М, предмет_діапазону_чисел.до);
  }

  дія позначити_предмет_перебору_діапазону_чисел(М: адреса<Машина>, предмет_перебору_діапазону_чисел: адреса<ПредметПереборуДіапазонуЧисел>) {
    якщо предмет_перебору_діапазону_чисел.позначено == позитивне(так) {
      вернути;
    }
    предмет_перебору_діапазону_чисел.позначено = позитивне(так);
    якщо предмет_перебору_діапазону_чисел.тип != пусто {
      позначити_предмет_структури(М, предмет_перебору_діапазону_чисел.тип);
    }
    позначити_предмет_діапазону_чисел(М, предмет_перебору_діапазону_чисел.предмет_діапазону);
    якщо предмет_перебору_діапазону_чисел.поточне_значення != пусто {
      позначити_предмет_числа(М, предмет_перебору_діапазону_чисел.поточне_значення);
    }
  }

  дія позначити_предмет_перебору_списку(М: адреса<Машина>, предмет_перебору_списку: адреса<ПредметПереборуСписку>) {
    якщо предмет_перебору_списку.позначено == позитивне(так) {
      вернути;
    }
    предмет_перебору_списку.позначено = позитивне(так);
    якщо предмет_перебору_списку.тип != пусто {
      позначити_предмет_структури(М, предмет_перебору_списку.тип);
    }
    позначити_предмет_списку(М, предмет_перебору_списку.предмет_списку);
    позначити_предмет(М, предмет_перебору_списку.поточне_значення);
  }

  дія позначити_предмет_перебору_тексту(М: адреса<Машина>, предмет_перебору_тексту: адреса<ПредметПереборуТексту>) {
    якщо предмет_перебору_тексту.позначено == позитивне(так) {
      вернути;
    }
    предмет_перебору_тексту.позначено = позитивне(так);
    якщо предмет_перебору_тексту.тип != пусто {
      позначити_предмет_структури(М, предмет_перебору_тексту.тип);
    }
    позначити_предмет_тексту(М, предмет_перебору_тексту.предмет_тексту);
    якщо предмет_перебору_тексту.поточне_значення != пусто {
      позначити_предмет_числа(М, предмет_перебору_тексту.поточне_значення);
    }
  }

  дія позначити_предмет_розширення(М: адреса<Машина>, предмет_розширення: адреса<ПредметРозширення>) {
    якщо предмет_розширення.позначено == позитивне(так) {
      вернути;
    }
    предмет_розширення.позначено = позитивне(так);
    якщо предмет_розширення.тип != пусто {
      позначити_предмет_структури(М, предмет_розширення.тип);
    }
    позначити_предмет(М, предмет_розширення.значення);
    якщо предмет_розширення.притримувач != пусто {
      змінна п: позитивне = 0;
      поки п < предмет_розширення.притримувач.розмір {
        позначити_предмет(М, предмет_розширення.притримувач.дані[п]);
        п += 1;
      }
    }
  }

  дія позначити_предмет_перебору_байтів(М: адреса<Машина>, предмет_перебору_байтів: адреса<ПредметПереборуБайтів>) {
    якщо предмет_перебору_байтів.позначено == позитивне(так) {
      вернути;
    }
    предмет_перебору_байтів.позначено = позитивне(так);
    якщо предмет_перебору_байтів.тип != пусто {
      позначити_предмет_структури(М, предмет_перебору_байтів.тип);
    }
    позначити_предмет_байтів(М, предмет_перебору_байтів.предмет_байтів);
    якщо предмет_перебору_байтів.поточне_значення != пусто {
      позначити_предмет_числа(М, предмет_перебору_байтів.поточне_значення);
    }
  }

  дія позначити_предмет_перебору_буфера(М: адреса<Машина>, предмет_перебору_буфера: адреса<ПредметПереборуБуфера>) {
    якщо предмет_перебору_буфера.позначено == позитивне(так) {
      вернути;
    }
    предмет_перебору_буфера.позначено = позитивне(так);
    якщо предмет_перебору_буфера.тип != пусто {
      позначити_предмет_структури(М, предмет_перебору_буфера.тип);
    }
    позначити_предмет_буфера(М, предмет_перебору_буфера.предмет_буфера);
    якщо предмет_перебору_буфера.поточне_значення != пусто {
      позначити_предмет_числа(М, предмет_перебору_буфера.поточне_значення);
    }
  }

  дія позначити_предмет_шляху(М: адреса<Машина>, предмет_шляху: адреса<ПредметШляху>) {
    якщо предмет_шляху.позначено == позитивне(так) {
      вернути;
    }
    предмет_шляху.позначено = позитивне(так);
    якщо предмет_шляху.тип != пусто {
      позначити_предмет_структури(М, предмет_шляху.тип);
    }
    позначити_предмет_байтів(М, предмет_шляху.байти);
  }

  дія позначити_складений_предмет(М: адреса<Машина>, складений_предмет: адреса<СкладенийПредмет>) {
    якщо складений_предмет.позначено == позитивне(так) {
      вернути;
    }
    складений_предмет.позначено = позитивне(так);
    якщо складений_предмет.тип != пусто {
      позначити_предмет_структури(М, складений_предмет.тип);
    }
    змінна п: позитивне = 0;
    поки п < складений_предмет.властивості.елементи.розмір {
      позначити_предмет_тексту(М, складений_предмет.властивості.елементи.дані[п].ключ);
      позначити_предмет(М, складений_предмет.властивості.елементи.дані[п].значення);
      п += 1;
    }
  }

  дія позначити(М: адреса<Машина>) {
    змінна п: позитивне = 0;
    поки п < М.взяті_предмети.елементи.розмір {
      позначити_предмет(М, М.взяті_предмети.елементи.дані[п].ключ);
      позначити_предмет(М, М.взяті_предмети.елементи.дані[п].значення);
      п += 1;
    }

    позначити_предмет_середовища(М, М.предмет_глобального_середовища);

    // позначка: прохід по типах предмета
    позначити_предмет_структури(М, М.предмет_структури_предмет);
    позначити_предмет_структури(М, М.предмет_структури_Структура);
    позначити_предмет_структури(М, М.предмет_структури_Код);
    позначити_предмет_структури(М, М.предмет_структури_Середовище);
    позначити_предмет_структури(М, М.предмет_структури_Дія);
    позначити_предмет_структури(М, М.предмет_структури_логічне);
    позначити_предмет_структури(М, М.предмет_структури_число);
    позначити_предмет_структури(М, М.предмет_структури_текст);
    позначити_предмет_структури(М, М.предмет_структури_список);
    позначити_предмет_структури(М, М.предмет_структури_словник);
    позначити_предмет_структури(М, М.предмет_структури_байти);
    позначити_предмет_структури(М, М.предмет_структури_Буфер);
    позначити_предмет_структури(М, М.предмет_структури_Модуль);
    позначити_предмет_структури(М, М.предмет_структури_Параметр);
    позначити_предмет_структури(М, М.предмет_структури_ДіапазонЧисел);
    позначити_предмет_структури(М, М.предмет_структури_ПеребірДіапазонуЧисел);
    позначити_предмет_структури(М, М.предмет_структури_ПеребірСписку);
    позначити_предмет_структури(М, М.предмет_структури_ПеребірТексту);
    позначити_предмет_структури(М, М.предмет_структури_Розширення);
    позначити_предмет_структури(М, М.предмет_структури_ПеребірБайтів);
    позначити_предмет_структури(М, М.предмет_структури_ПеребірБуфера);
    позначити_предмет_структури(М, М.предмет_структури_Шлях);

    позначити_предмет_логічного(М, М.предмет_логічного_так);
    позначити_предмет_логічного(М, М.предмет_логічного_ні);

    п = 0;
    поки п < М.історія.розмір {
      позначити_предмет(М, М.історія.дані[п].місцезнаходження.шлях_або_код як адреса<ПредметШляху> як адреса<Предмет>);
      якщо М.історія.дані[п].предмет_дії != пусто {
        позначити_предмет_дії(М, М.історія.дані[п].предмет_дії);
      }
      якщо М.історія.дані[п].середовище != пусто {
        позначити_предмет_середовища(М, М.історія.дані[п].середовище);
      }
      п += 1;
    }
    п = 0;
    поки п < М.накопичувач_предметів.розмір {
      позначити_предмет(М, М.накопичувач_предметів.дані[п]);
      п += 1;
    }
    п = 0;
    поки п < М.притримувачі_предметів.розмір {
      змінна пп: позитивне = 0;
      поки пп < М.притримувачі_предметів.дані[п].розмір {
        позначити_предмет(М, М.притримувачі_предметів.дані[п].дані[пп]);
        пп += 1;
      }
      п += 1;
    }
    якщо (М.місцезнаходження_падіння.шлях_або_код як адреса<ПредметШляху>) != пусто {
      позначити_предмет(М, М.місцезнаходження_падіння.шлях_або_код як адреса<ПредметШляху> як адреса<Предмет>);
    }

    змінна елемент_черги: адреса<ЕлементЧерги<ЗапланованеВиконання>> = М.черга_запланованих_виконань.перший_елемент;
    поки елемент_черги != пусто {
      п = 0;
      поки п < елемент_черги.значення.кількість_аргументів {
        позначити_предмет(М, елемент_черги.значення.аргументи[п]);
        п += 1;
      }
      елемент_черги = елемент_черги.наступний_елемент;
    }

    змінна елемент_списку: адреса<ЕлементДвосторонньоПовʼязаногоСписоку<адреса<Предмет>>> = М.глобально_притримані_предмети.перший_елемент;
    поки елемент_списку != пусто {
      позначити_предмет(М, елемент_списку.значення);
      елемент_списку = елемент_списку.наступний_елемент;
    }
  }

  дія звільнити_предмет_структури(М: адреса<Машина>, предмет_структури: адреса<ПредметСтруктури>) {
    звільнити_реєстр<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_структури.властивості);
    звільнити_памʼять(М, предмет_структури.параметри.дані);
    звільнити_реєстр<адреса<ПредметТексту>, адреса<ПредметДії>>(М, предмет_структури.методи);
    звільнити_реєстр<адреса<ПредметТексту>, адреса<ПредметДії>>(М, предмет_структури.власні_дії);
    звільнити(М, предмет_структури);
  }

  дія звільнити_предмет_коду(М: адреса<Машина>, предмет_коду: адреса<ПредметКоду>) {
    звільнити_памʼять(М, предмет_коду.константи.дані);
    звільнити_памʼять(М, предмет_коду.місцезнаходження_вказівок.дані);
    звільнити(М, предмет_коду);
  }

  дія звільнити_предмет_середовища(М: адреса<Машина>, предмет_середовища: адреса<ПредметСередовища>) {
    звільнити_реєстр<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_середовища.підмети);
    звільнити(М, предмет_середовища);
  }

  дія звільнити_предмет_дії(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>) {
    якщо предмет_дії.відклик_перед_звільненням != пусто {
      предмет_дії.відклик_перед_звільненням(М, предмет_дії);
    }
    звільнити_памʼять(М, предмет_дії.параметри.дані);
    звільнити(М, предмет_дії);
  }

  дія звільнити_предмет_логічного(М: адреса<Машина>, предмет_логічного: адреса<ПредметЛогічного>) {
    звільнити(М, предмет_логічного);
  }

  дія звільнити_предмет_числа(М: адреса<Машина>, предмет_числа: адреса<ПредметЧисла>) {
    звільнити(М, предмет_числа);
  }

  дія звільнити_предмет_тексту(М: адреса<Машина>, предмет_тексту: адреса<ПредметТексту>) {
    звільнити_памʼять(М, предмет_тексту.значення.дані);
    звільнити(М, предмет_тексту);
  }

  дія звільнити_предмет_списку(М: адреса<Машина>, предмет_списку: адреса<ПредметСписку>) {
    звільнити_накопичувач<адреса<Предмет>>(М, предмет_списку.елементи);
    звільнити(М, предмет_списку);
  }

  дія звільнити_предмет_словника(М: адреса<Машина>, предмет_словника: адреса<ПредметСловника>) {
    звільнити_реєстр<адреса<Предмет>, адреса<Предмет>>(М, предмет_словника.елементи);
    звільнити(М, предмет_словника);
  }

  дія звільнити_предмет_байтів(М: адреса<Машина>, предмет_байтів: адреса<ПредметБайтів>) {
    звільнити_памʼять(М, предмет_байтів.дані);
    звільнити(М, предмет_байтів);
  }

  дія звільнити_предмет_буфера(М: адреса<Машина>, предмет_буфера: адреса<ПредметБуфера>) {
    звільнити_памʼять(М, предмет_буфера.значення.дані);
    звільнити(М, предмет_буфера);
  }

  дія звільнити_предмет_модуля(М: адреса<Машина>, предмет_модуля: адреса<ПредметМодуля>) {
    звільнити_реєстр<адреса<ПредметТексту>, адреса<Предмет>>(М, предмет_модуля.властивості);
    звільнити(М, предмет_модуля);
  }

  дія звільнити_предмет_параметра(М: адреса<Машина>, предмет_параметра: адреса<ПредметПараметра>) {
    звільнити(М, предмет_параметра);
  }

  дія звільнити_предмет_діапазону_чисел(М: адреса<Машина>, предмет_діапазону_чисел: адреса<ПредметДіапазонуЧисел>) {
    звільнити(М, предмет_діапазону_чисел);
  }

  дія звільнити_предмет_перебору_діапазону_чисел(М: адреса<Машина>, предмет_перебору_діапазону_чисел: адреса<ПредметПереборуДіапазонуЧисел>) {
    звільнити(М, предмет_перебору_діапазону_чисел);
  }

  дія звільнити_предмет_перебору_списку(М: адреса<Машина>, предмет_перебору_списку: адреса<ПредметПереборуСписку>) {
    звільнити(М, предмет_перебору_списку);
  }

  дія звільнити_предмет_перебору_тексту(М: адреса<Машина>, предмет_перебору_тексту: адреса<ПредметПереборуТексту>) {
    звільнити(М, предмет_перебору_тексту);
  }

  дія звільнити_предмет_розширення(М: адреса<Машина>, предмет_розширення: адреса<ПредметРозширення>) {
    якщо предмет_розширення.дія_перед_знищенням != пусто {
      предмет_розширення.дія_перед_знищенням(М, предмет_розширення);
    }
    звільнити(М, предмет_розширення);
  }

  дія звільнити_предмет_перебору_байтів(М: адреса<Машина>, предмет_перебору_байтів: адреса<ПредметПереборуБайтів>) {
    звільнити(М, предмет_перебору_байтів);
  }

  дія звільнити_предмет_перебору_буфера(М: адреса<Машина>, предмет_перебору_буфера: адреса<ПредметПереборуБуфера>) {
    звільнити(М, предмет_перебору_буфера);
  }

  дія звільнити_предмет_шляху(М: адреса<Машина>, предмет_шляху: адреса<ПредметШляху>) {
    звільнити(М, предмет_шляху);
  }

  дія звільнити_складений_предмет(М: адреса<Машина>, складений_предмет: адреса<СкладенийПредмет>) {
    звільнити_реєстр<адреса<ПредметТексту>, адреса<Предмет>>(М, складений_предмет.властивості);
    звільнити(М, складений_предмет);
  }

  // позначка: прохід по типах предмета
  місцева дія звільнити_предмет(М: адреса<Машина>, предмет: адреса<Предмет>) {
    якщо предмет == пусто {
      вернути;
    } інакше якщо предмет.тип == М.предмет_структури_Структура {
      звільнити_предмет_структури(М, предмет як адреса<ПредметСтруктури>);
    } інакше якщо предмет.тип == М.предмет_структури_Код {
      звільнити_предмет_коду(М, предмет як адреса<ПредметКоду>);
    } інакше якщо предмет.тип == М.предмет_структури_Середовище {
      звільнити_предмет_середовища(М, предмет як адреса<ПредметСередовища>);
    } інакше якщо предмет.тип == М.предмет_структури_Дія {
      звільнити_предмет_дії(М, предмет як адреса<ПредметДії>);
    } інакше якщо предмет.тип == М.предмет_структури_логічне {
      звільнити_предмет_логічного(М, предмет як адреса<ПредметЛогічного>);
    } інакше якщо предмет.тип == М.предмет_структури_число {
      звільнити_предмет_числа(М, предмет як адреса<ПредметЧисла>);
    } інакше якщо предмет.тип == М.предмет_структури_текст {
      звільнити_предмет_тексту(М, предмет як адреса<ПредметТексту>);
    } інакше якщо предмет.тип == М.предмет_структури_список {
      звільнити_предмет_списку(М, предмет як адреса<ПредметСписку>);
    } інакше якщо предмет.тип == М.предмет_структури_словник {
      звільнити_предмет_словника(М, предмет як адреса<ПредметСловника>);
    } інакше якщо предмет.тип == М.предмет_структури_байти {
      звільнити_предмет_байтів(М, предмет як адреса<ПредметБайтів>);
    } інакше якщо предмет.тип == М.предмет_структури_Буфер {
      звільнити_предмет_буфера(М, предмет як адреса<ПредметБуфера>);
    } інакше якщо предмет.тип == М.предмет_структури_Модуль {
      звільнити_предмет_модуля(М, предмет як адреса<ПредметМодуля>);
    } інакше якщо предмет.тип == М.предмет_структури_Параметр {
      звільнити_предмет_параметра(М, предмет як адреса<ПредметПараметра>);
    } інакше якщо предмет.тип == М.предмет_структури_ДіапазонЧисел {
      звільнити_предмет_діапазону_чисел(М, предмет як адреса<ПредметДіапазонуЧисел>);
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірДіапазонуЧисел {
      звільнити_предмет_перебору_діапазону_чисел(М, предмет як адреса<ПредметПереборуДіапазонуЧисел>);
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірСписку {
      звільнити_предмет_перебору_списку(М, предмет як адреса<ПредметПереборуСписку>);
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірТексту {
      звільнити_предмет_перебору_тексту(М, предмет як адреса<ПредметПереборуТексту>);
    } інакше якщо предмет.тип == М.предмет_структури_Розширення {
      звільнити_предмет_розширення(М, предмет як адреса<ПредметРозширення>);
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірБайтів {
      звільнити_предмет_перебору_байтів(М, предмет як адреса<ПредметПереборуБайтів>);
    } інакше якщо предмет.тип == М.предмет_структури_ПеребірБуфера {
      звільнити_предмет_перебору_буфера(М, предмет як адреса<ПредметПереборуБуфера>);
    } інакше якщо предмет.тип == М.предмет_структури_Шлях {
      звільнити_предмет_шляху(М, предмет як адреса<ПредметШляху>);
    } інакше {
      звільнити_складений_предмет(М, предмет як адреса<СкладенийПредмет>);
    }
  }

  місцева дія очистити(М: адреса<Машина>) {
//    вивести("Починається очистка! Кількість предметів: ");
//    надрукувати_позитивне(М.кількість_предметів);
    позначити(М);
    змінна наступний_предмет: адреса<Предмет> = пусто;
    змінна предмет = М.останній_предмет;
    поки предмет != пусто {
      змінна попередній_предмет = предмет.попередній_предмет;
      якщо предмет.позначено == позитивне(ні) {
        якщо наступний_предмет == пусто {
          М.останній_предмет = попередній_предмет;
        } інакше {
          наступний_предмет.попередній_предмет = попередній_предмет;
        }
        звільнити_предмет(М, предмет);
        М.кількість_предметів -= 1;
      } інакше {
        наступний_предмет = предмет;
      }
      предмет = попередній_предмет;
    }
    предмет = М.останній_предмет;
    поки предмет != пусто {
      змінна попередній_предмет = предмет.попередній_предмет;
      предмет.позначено = позитивне(ні);
      предмет = попередній_предмет;
    }
    М.кількість_предметів_для_очищення = (М.кількість_предметів * 5) + 1;
//    вивести("Очистку завершено! Кількість предметів: ");
//    надрукувати_позитивне(М.кількість_предметів);
  }
}