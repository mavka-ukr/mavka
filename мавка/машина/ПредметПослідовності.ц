взяти визначення мавка;

секція мавка {
  дія предмет_послідовності_виконати_метод_чародія_містить(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна п: натуральне = 0;
    поки п < предмет_послідовності.елементи.розмір {
      якщо перевірити_чи_предмети_рівні(М, предмет_послідовності.елементи.дані[п], значення) {
        вернути М.предмет_логічного_так як адреса<Предмет>;
      }
      п += 1;
    }
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  дія предмет_послідовності_виконати_метод_чародія_отримати_елемент(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, ключ: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна позиція = натуральне(ключ.значення);
    якщо предмет_послідовності.елементи.розмір > позиція {
      вернути предмет_послідовності.елементи.дані[позиція];
    }
    вернути пусто;
  }

  дія предмет_послідовності_виконати_метод_чародія_змінити_елемент(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, ключ: адреса<ПредметЧисла>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути пусто;
  }

  дія предмет_послідовності_виконати_метод_чародія_видалити_елемент(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, ключ: адреса<ПредметЧисла>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  дія предмет_послідовності_виконати_метод_чародія_перебір(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути створити_предмет_перебору_послідовності(М, предмет_послідовності) як адреса<Предмет>;
  }
}

секція мавка {
  дія предмет_послідовності_виконати_метод_фільтрувати(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, перевіряч: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна нові_елементи = зробити_накопичувач<адреса<Предмет>>(М);
    змінна п: натуральне = 0;
    поки п < предмет_послідовності.елементи.розмір {
      змінна елемент = предмет_послідовності.елементи.дані[п];
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
      аргументи[0] = елемент;
      аргументи[1] = предмет_послідовності як адреса<Предмет>;
      змінна результат = предмет_виконати(М, перевіряч, пусто, 2, аргументи, пусто, місцезнаходження);
      звільнити_памʼять(М, аргументи);
      якщо М.стан_падіння {
        звільнити_накопичувач<адреса<Предмет>>(М, нові_елементи);
        вернути пусто;
      }
      якщо перевірити_чи_предмет_виражається_логічним_так(М, результат) {
        покласти_в_накопичувач<адреса<Предмет>>(М, нові_елементи::адреса, елемент);
      }
      п += 1;
    }
    вернути створити_предмет_послідовності_без_копіювання(М, Послідовність<адреса<Предмет>> { нові_елементи.розмір, нові_елементи.дані }) як адреса<Предмет>;
  }

  дія предмет_послідовності_виконати_метод_знайти(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, перевіряч: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна п: натуральне = 0;
    поки п < предмет_послідовності.елементи.розмір {
      змінна елемент = предмет_послідовності.елементи.дані[п];
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
      аргументи[0] = елемент;
      аргументи[1] = предмет_послідовності як адреса<Предмет>;
      змінна результат = предмет_виконати(М, перевіряч, пусто, 2, аргументи, пусто, місцезнаходження);
      звільнити_памʼять(М, аргументи);
      якщо М.стан_падіння {
        вернути пусто;
      }
      якщо перевірити_чи_предмет_виражається_логічним_так(М, результат) {
        вернути елемент;
      }
      п += 1;
    }
    вернути пусто;
  }

  дія предмет_послідовності_виконати_метод_знайти_позицію(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, перевіряч: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна п: натуральне = 0;
    поки п < предмет_послідовності.елементи.розмір {
      змінна елемент = предмет_послідовності.елементи.дані[п];
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
      аргументи[0] = елемент;
      аргументи[1] = предмет_послідовності як адреса<Предмет>;
      змінна результат = предмет_виконати(М, перевіряч, пусто, 2, аргументи, пусто, місцезнаходження);
      звільнити_памʼять(М, аргументи);
      якщо М.стан_падіння {
        вернути пусто;
      }
      якщо перевірити_чи_предмет_виражається_логічним_так(М, результат) {
        вернути створити_предмет_числа(М, р64(п)) як адреса<Предмет>;
      }
      п += 1;
    }
    вернути створити_предмет_числа(М, р64(0) - р64(1)) як адреса<Предмет>;
  }

  дія предмет_послідовності_виконати_метод_перетворити(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, перетворювач: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна нові_елементи = зробити_накопичувач<адреса<Предмет>>(М);
    змінна п: натуральне = 0;
    поки п < предмет_послідовності.елементи.розмір {
      змінна елемент = предмет_послідовності.елементи.дані[п];
      змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
      аргументи[0] = елемент;
      аргументи[1] = предмет_послідовності як адреса<Предмет>;
      змінна результат = предмет_виконати(М, перетворювач, пусто, 2, аргументи, пусто, місцезнаходження);
      звільнити_памʼять(М, аргументи);
      якщо М.стан_падіння {
        звільнити_накопичувач<адреса<Предмет>>(М, нові_елементи);
        вернути пусто;
      }
      покласти_в_накопичувач<адреса<Предмет>>(М, нові_елементи::адреса, результат);
      п += 1;
    }
    вернути створити_предмет_послідовності_без_копіювання(М, Послідовність<адреса<Предмет>> { нові_елементи.розмір, нові_елементи.дані }) як адреса<Предмет>;
  }

  дія предмет_послідовності_виконати_метод_обернути(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна нові_елементи = зробити_накопичувач<адреса<Предмет>>(М);
    змінна п: натуральне = предмет_послідовності.елементи.розмір;
    поки п > 0 {
      п -= 1;
      змінна елемент = предмет_послідовності.елементи.дані[п];
      покласти_в_накопичувач<адреса<Предмет>>(М, нові_елементи::адреса, елемент);
    }
    вернути створити_предмет_послідовності_без_копіювання(М, Послідовність<адреса<Предмет>> { нові_елементи.розмір, нові_елементи.дані }) як адреса<Предмет>;
  }
}

секція мавка {
  дія рідна_дія_метода_чародія_містить(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
    якщо предмет_я.с != М.предмет_структури_послідовність {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_містить\" не для послідовності") як адреса<Предмет>);
    }
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо іменовані_аргументи != пусто {
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо не знайдено_аргумент_значення {
        аргумент_значення = аргументи[0];
        знайдено_аргумент_значення = так;
      }
    }
    змінна предмет_послідовності = предмет_я як адреса<ПредметПослідовності>;
    вернути предмет_послідовності_виконати_метод_чародія_містить(М, предмет_послідовності, аргумент_значення, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 });
  }

  дія записати_метод_структури_послідовність_чародія_містить(М: адреса<Машина>) {
    змінна параметр_значення = створити_предмет_параметра(М, створити_назву(М, "значення"), пусто);
    змінна дані_параметрів_дії_дізнатись_структуру = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_дії_дізнатись_структуру[0] = параметр_значення;
    змінна предмет_дії_метода_чародія_містить = створити_предмет_рідної_дії(М, створити_назву(М, "чародія_містить"), 1, дані_параметрів_дії_дізнатись_структуру, рідна_дія_метода_чародія_містить, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_послідовність, створити_назву(М, "чародія_містить"), предмет_дії_метода_чародія_містить);
  }

  дія рідна_дія_метода_чародія_отримати_елемент(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
    якщо предмет_я.с != М.предмет_структури_послідовність {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_отримати_елемент\" не для послідовності") як адреса<Предмет>);
    }
    змінна аргумент_ключ: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_ключ = ні;
    якщо іменовані_аргументи != пусто {
      знайдено_аргумент_ключ = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "ключ"), аргумент_ключ::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_ключ == ні {
        аргумент_ключ = аргументи[0];
        знайдено_аргумент_ключ = так;
      }
    }
    змінна предмет_послідовності = предмет_я як адреса<ПредметПослідовності>;
    вернути предмет_послідовності_виконати_метод_чародія_отримати_елемент(М, предмет_послідовності, аргумент_ключ як адреса<ПредметЧисла>, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 });
  }

  дія записати_метод_структури_послідовність_чародія_отримати_елемент(М: адреса<Машина>) {
    змінна параметр_ключ = створити_предмет_параметра(М, створити_назву(М, "ключ"), пусто);
    змінна дані_параметрів_дії_дізнатись_структуру = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_дії_дізнатись_структуру[0] = параметр_ключ;
    змінна предмет_дії_метода_чародія_отримати_елемент = створити_предмет_рідної_дії(М, створити_назву(М, "чародія_отримати_елемент"), 1, дані_параметрів_дії_дізнатись_структуру, рідна_дія_метода_чародія_отримати_елемент, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_послідовність, створити_назву(М, "чародія_отримати_елемент"), предмет_дії_метода_чародія_отримати_елемент);
  }

  дія рідна_дія_метода_чародія_змінити_елемент(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
    якщо предмет_я.с != М.предмет_структури_послідовність {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_змінити_елемент\" не для послідовності") як адреса<Предмет>);
    }
    змінна аргумент_ключ: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_ключ = ні;
    змінна аргумент_значення: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_значення = ні;
    якщо іменовані_аргументи != пусто {
      знайдено_аргумент_ключ = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "ключ"), аргумент_ключ::адреса);
      знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_ключ == ні {
        аргумент_ключ = аргументи[0];
        знайдено_аргумент_ключ = так;
      }
      якщо кількість_аргументів > 1 {
        якщо не знайдено_аргумент_значення {
          аргумент_значення = аргументи[1];
          знайдено_аргумент_значення = так;
        }

      }
    }
    змінна предмет_послідовності = предмет_я як адреса<ПредметПослідовності>;
    вернути предмет_послідовності_виконати_метод_чародія_змінити_елемент(М, предмет_послідовності, аргумент_ключ як адреса<ПредметЧисла>, аргумент_значення, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 });
  }

  дія записати_метод_структури_послідовність_чародія_змінити_елемент(М: адреса<Машина>) {
    змінна параметр_ключ = створити_предмет_параметра(М, створити_назву(М, "ключ"), пусто);
    змінна параметр_значення = створити_предмет_параметра(М, створити_назву(М, "значення"), пусто);
    змінна дані_параметрів_дії_дізнатись_структуру = виділити_памʼять<адреса<ПредметПараметра>>(М, 2);
    дані_параметрів_дії_дізнатись_структуру[0] = параметр_ключ;
    дані_параметрів_дії_дізнатись_структуру[1] = параметр_значення;
    змінна предмет_дії_метода_чародія_змінити_елемент = створити_предмет_рідної_дії(М, створити_назву(М, "чародія_змінити_елемент"), 2, дані_параметрів_дії_дізнатись_структуру, рідна_дія_метода_чародія_змінити_елемент, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_послідовність, створити_назву(М, "чародія_змінити_елемент"), предмет_дії_метода_чародія_змінити_елемент);
  }

  дія рідна_дія_метода_чародія_видалити_елемент(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
    якщо предмет_я.с != М.предмет_структури_послідовність {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_видалити_елемент\" не для послідовності") як адреса<Предмет>);
    }
    змінна аргумент_ключ: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_ключ = ні;
    якщо іменовані_аргументи != пусто {
      знайдено_аргумент_ключ = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "ключ"), аргумент_ключ::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_ключ == ні {
        аргумент_ключ = аргументи[0];
        знайдено_аргумент_ключ = так;
      }
    }
    змінна предмет_послідовності = предмет_я як адреса<ПредметПослідовності>;
    вернути предмет_послідовності_виконати_метод_чародія_видалити_елемент(М, предмет_послідовності, аргумент_ключ як адреса<ПредметЧисла>, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 });
  }

  дія записати_метод_структури_послідовність_чародія_видалити_елемент(М: адреса<Машина>) {
    змінна параметр_ключ = створити_предмет_параметра(М, створити_назву(М, "ключ"), пусто);
    змінна дані_параметрів_дії_дізнатись_структуру = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_дії_дізнатись_структуру[0] = параметр_ключ;
    змінна предмет_дії_метода_чародія_видалити_елемент = створити_предмет_рідної_дії(М, створити_назву(М, "чародія_видалити_елемент"), 1, дані_параметрів_дії_дізнатись_структуру, рідна_дія_метода_чародія_видалити_елемент, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_послідовність, створити_назву(М, "чародія_видалити_елемент"), предмет_дії_метода_чародія_видалити_елемент);
  }

  дія записати_параметр_структури_послідовність_довжина(М: адреса<Машина>) {
    змінна параметр_довжина = створити_предмет_параметра(М, створити_назву(М, "довжина"), пусто);
    М.предмет_структури_послідовність.параметри.дані[0] = параметр_довжина;
  }

  дія рідна_дія_метода_чародія_перебір(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
    якщо предмет_я.с != М.предмет_структури_послідовність {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Неможливо виконати дію \"чародія_перебір\" не для послідовності") як адреса<Предмет>);
    }
    змінна предмет_послідовності = предмет_я як адреса<ПредметПослідовності>;
    вернути предмет_послідовності_виконати_метод_чародія_перебір(М, предмет_послідовності, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 });
  }

  дія записати_метод_структури_послідовність_чародія_перебір(М: адреса<Машина>) {
    змінна предмет_дії_метода_чародія_перебір = створити_предмет_рідної_дії(М, створити_назву(М, "чародія_перебір"), 0, пусто, рідна_дія_метода_чародія_перебір, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_послідовність, створити_назву(М, "чародія_перебір"), предмет_дії_метода_чародія_перебір);
  }

  дія рідна_дія_метода_фільтрувати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
    змінна аргумент_перевіряч: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_перевіряч = ні;
    якщо іменовані_аргументи != пусто {
      знайдено_аргумент_перевіряч = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "перевіряч"), аргумент_перевіряч::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_перевіряч == ні {
        аргумент_перевіряч = аргументи[0];
        знайдено_аргумент_перевіряч = так;
      }
    }
    якщо знайдено_аргумент_перевіряч == ні {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Пропущено аргумент \"перевіряч\"") як адреса<Предмет>);
    }
    якщо предмет_я.с != М.предмет_структури_послідовність {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Неможливо виконати дію \"фільтрувати\" не для послідовності") як адреса<Предмет>);
    }
    змінна предмет_послідовності = предмет_я як адреса<ПредметПослідовності>;
    вернути предмет_послідовності_виконати_метод_фільтрувати(М, предмет_послідовності, аргумент_перевіряч, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 });
  }

  дія записати_метод_структури_послідовність_фільтрувати(М: адреса<Машина>) {
    змінна параметр_перевіряч = створити_предмет_параметра(М, створити_назву(М, "перевіряч"), пусто);
    змінна дані_параметрів_метода_фільтрувати = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_фільтрувати[0] = параметр_перевіряч;
    змінна предмет_дії_метода_фільтрувати = створити_предмет_рідної_дії(М, створити_назву(М, "фільтрувати"), 1, дані_параметрів_метода_фільтрувати, рідна_дія_метода_фільтрувати, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_послідовність, створити_назву(М, "фільтрувати"), предмет_дії_метода_фільтрувати);
  }

  дія рідна_дія_метода_знайти(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
    змінна аргумент_перевіряч: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_перевіряч = ні;
    якщо іменовані_аргументи != пусто {
      знайдено_аргумент_перевіряч = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "перевіряч"), аргумент_перевіряч::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_перевіряч == ні {
        аргумент_перевіряч = аргументи[0];
        знайдено_аргумент_перевіряч = так;
      }
    }
    якщо знайдено_аргумент_перевіряч == ні {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Пропущено аргумент \"перевіряч\"") як адреса<Предмет>);
    }
    якщо предмет_я.с != М.предмет_структури_послідовність {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Неможливо виконати дію \"знайти\" не для послідовності") як адреса<Предмет>);
    }
    змінна предмет_послідовності = предмет_я як адреса<ПредметПослідовності>;
    вернути предмет_послідовності_виконати_метод_знайти(М, предмет_послідовності, аргумент_перевіряч, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 });
  }

  дія записати_метод_структури_послідовність_знайти(М: адреса<Машина>) {
    змінна параметр_перевіряч = створити_предмет_параметра(М, створити_назву(М, "перевіряч"), пусто);
    змінна дані_параметрів_метода_знайти = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_знайти[0] = параметр_перевіряч;
    змінна предмет_дії_метода_знайти = створити_предмет_рідної_дії(М, створити_назву(М, "знайти"), 1, дані_параметрів_метода_знайти, рідна_дія_метода_знайти, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_послідовність, створити_назву(М, "знайти"), предмет_дії_метода_знайти);
  }

  дія рідна_дія_метода_знайти_позицію(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
    змінна аргумент_перевіряч: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_перевіряч = ні;
    якщо іменовані_аргументи != пусто {
      знайдено_аргумент_перевіряч = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "перевіряч"), аргумент_перевіряч::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_перевіряч == ні {
        аргумент_перевіряч = аргументи[0];
        знайдено_аргумент_перевіряч = так;
      }
    }
    якщо знайдено_аргумент_перевіряч == ні {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Пропущено аргумент \"перевіряч\"") як адреса<Предмет>);
    }
    якщо предмет_я.с != М.предмет_структури_послідовність {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Неможливо виконати дію \"знайти_позицію\" не для послідовності") як адреса<Предмет>);
    }
    змінна предмет_послідовності = предмет_я як адреса<ПредметПослідовності>;
    вернути предмет_послідовності_виконати_метод_знайти_позицію(М, предмет_послідовності, аргумент_перевіряч, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 });
  }

  дія записати_метод_структури_послідовність_знайти_позицію(М: адреса<Машина>) {
    змінна параметр_перевіряч = створити_предмет_параметра(М, створити_назву(М, "перевіряч"), пусто);
    змінна дані_параметрів_метода_знайти_позицію = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_знайти_позицію[0] = параметр_перевіряч;
    змінна предмет_дії_метода_знайти_позицію = створити_предмет_рідної_дії(М, створити_назву(М, "знайти_позицію"), 1, дані_параметрів_метода_знайти_позицію, рідна_дія_метода_знайти_позицію, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_послідовність, створити_назву(М, "знайти_позицію"), предмет_дії_метода_знайти_позицію);
  }

  дія рідна_дія_метода_перетворити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
    змінна аргумент_перетворювач: адреса<Предмет> = пусто;
    змінна знайдено_аргумент_перетворювач = ні;
    якщо іменовані_аргументи != пусто {
      знайдено_аргумент_перетворювач = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "перетворювач"), аргумент_перетворювач::адреса);
    }
    якщо кількість_аргументів > 0 {
      якщо знайдено_аргумент_перетворювач == ні {
        аргумент_перетворювач = аргументи[0];
        знайдено_аргумент_перетворювач = так;
      }
    }
    якщо знайдено_аргумент_перетворювач == ні {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Пропущено аргумент \"перетворювач\"") як адреса<Предмет>);
    }
    якщо предмет_я.с != М.предмет_структури_послідовність {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Неможливо виконати дію \"перетворити\" не для послідовності") як адреса<Предмет>);
    }
    змінна предмет_послідовності = предмет_я як адреса<ПредметПослідовності>;
    вернути предмет_послідовності_виконати_метод_перетворити(М, предмет_послідовності, аргумент_перетворювач, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 });
  }

  дія записати_метод_структури_послідовність_перетворити(М: адреса<Машина>) {
    змінна параметр_перетворювач = створити_предмет_параметра(М, створити_назву(М, "перетворювач"), пусто);
    змінна дані_параметрів_метода_перетворити = виділити_памʼять<адреса<ПредметПараметра>>(М, 1);
    дані_параметрів_метода_перетворити[0] = параметр_перетворювач;
    змінна предмет_дії_метода_перетворити = створити_предмет_рідної_дії(М, створити_назву(М, "перетворити"), 1, дані_параметрів_метода_перетворити, рідна_дія_метода_перетворити, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_послідовність, створити_назву(М, "перетворити"), предмет_дії_метода_перетворити);
  }

  дія рідна_дія_метода_обернути(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
    якщо предмет_я.с != М.предмет_структури_послідовність {
      вернути результат_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Неможливо виконати дію \"обернути\" не для послідовності") як адреса<Предмет>);
    }
    змінна предмет_послідовності = предмет_я як адреса<ПредметПослідовності>;
    вернути предмет_послідовності_виконати_метод_обернути(М, предмет_послідовності, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 });
  }

  дія записати_метод_структури_послідовність_обернути(М: адреса<Машина>) {
    змінна предмет_дії_метода_обернути = створити_предмет_рідної_дії(М, створити_назву(М, "обернути"), 0, пусто, рідна_дія_метода_обернути, пусто, пусто, пусто);
    предмет_структури_записати_метод(М, М.предмет_структури_послідовність, створити_назву(М, "обернути"), предмет_дії_метода_обернути);
  }

  місцева дія заповнити_предмет_структури_послідовність(М: адреса<Машина>) {
    // параметри
    записати_параметр_структури_послідовність_довжина(М);

    // методи
    записати_метод_структури_послідовність_чародія_містить(М);
    записати_метод_структури_послідовність_чародія_отримати_елемент(М);
    записати_метод_структури_послідовність_чародія_змінити_елемент(М);
    записати_метод_структури_послідовність_чародія_видалити_елемент(М);
    записати_метод_структури_послідовність_чародія_перебір(М);
    записати_метод_структури_послідовність_фільтрувати(М);
    записати_метод_структури_послідовність_знайти(М);
    записати_метод_структури_послідовність_знайти_позицію(М);
    записати_метод_структури_послідовність_перетворити(М);
    записати_метод_структури_послідовність_обернути(М);
  }

  місцева дія створити_предмет_послідовності(М: адреса<Машина>, елементи: Послідовність<адреса<Предмет>>): адреса<ПредметПослідовності> {
    змінна предмет_послідовності = створити_предмет<ПредметПослідовності>(М, М.предмет_структури_послідовність);
    предмет_послідовності.елементи = Послідовність<адреса<Предмет>> { елементи.розмір, виділити_памʼять<адреса<Предмет>>(М, елементи.розмір) };
    вернути предмет_послідовності;
  }

  місцева дія створити_предмет_послідовності_без_копіювання(М: адреса<Машина>, елементи: Послідовність<адреса<Предмет>>): адреса<ПредметПослідовності> {
    змінна предмет_послідовності = створити_предмет<ПредметПослідовності>(М, М.предмет_структури_послідовність);
    предмет_послідовності.елементи = елементи;
    вернути предмет_послідовності;
  }

  місцева дія предмет_послідовності_виконати(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_виконати"), кількість_аргументів, аргументи, іменовані_аргументи, місцезнаходження);
  }

  місцева дія предмет_послідовності_отримати_властивість(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "довжина")) {
      вернути створити_предмет_числа(М, р64(предмет_послідовності.елементи.розмір)) як адреса<Предмет>;
    }
    змінна метод: адреса<ПредметДії> = пусто;
    якщо знайти_метод_в_структурі(М, предмет_послідовності.с, назва, метод::адреса) {
      вернути метод як адреса<Предмет>;
    }
    вернути пусто;
  }

  місцева дія предмет_послідовності_змінити_властивість(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, назва: адреса<ПредметТексту>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути пусто;
  }

  місцева дія предмет_послідовності_видалити_властивість(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_послідовності_виконати_властивість(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, назва: адреса<ПредметТексту>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна предмет_властивості = предмет_послідовності_отримати_властивість(М, предмет_послідовності, назва, місцезнаходження);
    якщо М.стан_падіння {
      вернути пусто;
    }
    якщо предмет_властивості == пусто {
      змінна накопичувач_т8_помилки = зробити_накопичувач<н8>(М);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "Неможливо виконати пусту властивість предмета послідовності \"");
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, назва.значення);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "\"");
      змінна предмет_помилки = створити_предмет_тексту(М, т8 { накопичувач_т8_помилки.розмір, накопичувач_т8_помилки.дані });
      звільнити_памʼять(М, накопичувач_т8_помилки.дані);
      вернути результат_стан_падіння(М, місцезнаходження, предмет_помилки як адреса<Предмет>);
    }
    вернути предмет_виконати(М, предмет_властивості, предмет_послідовності як адреса<Предмет>, кількість_аргументів, аргументи, іменовані_аргументи, місцезнаходження);
  }

  місцева дія предмет_послідовності_додати(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_додати"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_відняти(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_відняти"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_помножити(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_помножити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_поділити(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_поділити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_остача(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_остача"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_неповна_частка(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_неповна_частка"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_степінь(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_степінь"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_зсунути_вліво(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_вліво"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_зсунути_вправо(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_вправо"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_зсунути_вправо_2(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_вправо_2"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_двійкове_і(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_двійкове_і"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_двійкове_або(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_двійкове_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_двійкове_виключне_або(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_двійкове_виключне_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_двійкове_заперечення(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_двійкове_заперечення"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_менше(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_менше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_більше(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_більше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_містить(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_метод_чародія_містить(М, предмет_послідовності, аргумент, місцезнаходження);
  }

  місцева дія предмет_послідовності_числова_негація(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_числова_негація"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_отримати_число(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_число"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_збільшити(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_збільшити"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_зменшити(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_зменшити"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_зображення(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_зображення"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_текст(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_текст"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_отримати_байти(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_байти"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_послідовності_отримати_елемент(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    якщо ключ == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ отримання елемента зі послідовності має бути числом") як адреса<Предмет>);
    }
    якщо ключ.с != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ отримання елемента зі послідовності має бути числом") як адреса<Предмет>);
    }
    змінна предмет_числа = ключ як адреса<ПредметЧисла>;
    вернути предмет_послідовності_виконати_метод_чародія_отримати_елемент(М, предмет_послідовності, предмет_числа, місцезнаходження);
  }

  місцева дія предмет_послідовності_змінити_елемент(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, ключ: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    якщо ключ == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ для зміни елемента послідовності має бути числом") як адреса<Предмет>);
    }
    якщо ключ.с != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ для зміни елемента послідовності має бути числом") як адреса<Предмет>);
    }
    змінна предмет_числа_ключа = ключ як адреса<ПредметЧисла>;
    вернути предмет_послідовності_виконати_метод_чародія_змінити_елемент(М, предмет_послідовності, предмет_числа_ключа, значення, місцезнаходження);
  }

  місцева дія предмет_послідовності_видалити_елемент(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    якщо ключ == пусто {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ видалення елемента зі послідовності має бути числом") як адреса<Предмет>);
    }
    якщо ключ.с != М.предмет_структури_число {
      вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Ключ видалення елемента зі послідовності має бути числом") як адреса<Предмет>);
    }
    змінна предмет_числа = ключ як адреса<ПредметЧисла>;
    вернути предмет_послідовності_виконати_метод_чародія_видалити_елемент(М, предмет_послідовності, предмет_числа, місцезнаходження);
  }

  місцева дія предмет_послідовності_отримати_перебір(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути створити_предмет_перебору_послідовності(М, предмет_послідовності) як адреса<Предмет>;
  }

  місцева дія предмет_послідовності_отримати_діапазон(М: адреса<Машина>, предмет_послідовності: адреса<ПредметПослідовності>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
    якщо включно {
      аргументи[0] = М.предмет_логічного_так як адреса<Предмет>;
    } інакше {
      аргументи[0] = М.предмет_логічного_ні як адреса<Предмет>;
    }
    аргументи[1] = до;
    змінна результат = предмет_послідовності_виконати_властивість(М, предмет_послідовності, створити_назву(М, "чародія_діапазон"), 2, аргументи, пусто, місцезнаходження);
    звільнити_памʼять(М, аргументи);
    вернути результат;
  }
}