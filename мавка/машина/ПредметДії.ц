взяти визначення мавка;

секція мавка {
}

секція мавка {
  дія записати_параметр_структури_Дія_назва(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_назва = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_назва[0] = М.предмет_структури_текст;
    змінна тип_параметра_назва = створити_предмет_типу(М, так, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_назва });
    змінна параметр_назва = створити_предмет_параметра(М, створити_назву(М, "назва"), тип_параметра_назва, пусто);
    М.предмет_структури_Дія.параметри.дані[0] = параметр_назва;
  }

  дія записати_параметр_структури_Дія_параметри(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_параметри = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_параметри[0] = М.предмет_структури_список;
    змінна тип_параметра_параметри = створити_предмет_типу(М, ні, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_параметри });
    змінна параметр_параметри = створити_предмет_параметра(М, створити_назву(М, "параметри"), тип_параметра_параметри, пусто);
    М.предмет_структури_Дія.параметри.дані[1] = параметр_параметри;
  }

  дія записати_параметр_структури_Дія_тип_результату(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_тип_результату = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_тип_результату[0] = М.предмет_структури_текст;
    змінна тип_параметра_тип_результату = створити_предмет_типу(М, так, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_тип_результату });
    змінна параметр_тип_результату = створити_предмет_параметра(М, створити_назву(М, "тип_результату"), тип_параметра_тип_результату, пусто);
    М.предмет_структури_Дія.параметри.дані[2] = параметр_тип_результату;
  }

  дія записати_параметр_структури_Дія_код(М: адреса<Машина>) {
    змінна допустимі_структури_типу_параметра_код = виділити_памʼять<адреса<ПредметСтруктури>>(М, 1);
    допустимі_структури_типу_параметра_код[0] = М.предмет_структури_Код;
    змінна тип_параметра_код = створити_предмет_типу(М, так, Послідовність<адреса<ПредметСтруктури>> { 1, допустимі_структури_типу_параметра_код });
    змінна параметр_код = створити_предмет_параметра(М, створити_назву(М, "код"), тип_параметра_код, пусто);
    М.предмет_структури_Дія.параметри.дані[3] = параметр_код;
  }

  дія записати_параметр_структури_Дія_я(М: адреса<Машина>) {
    змінна параметр_я = створити_предмет_параметра(М, створити_назву(М, "я"), пусто, пусто);
    М.предмет_структури_Дія.параметри.дані[4] = параметр_я;
  }

  місцева дія заповнити_предмет_структури_Дія(М: адреса<Машина>) {
    // параметри
    записати_параметр_структури_Дія_назва(М);
    записати_параметр_структури_Дія_параметри(М);
    записати_параметр_структури_Дія_тип_результату(М);
    записати_параметр_структури_Дія_код(М);
    записати_параметр_структури_Дія_я(М);

    // методи
  }

  місцева дія створити_предмет_дії(М: адреса<Машина>, назва: адреса<ПредметТексту>, кількість_параметрів: позитивне, дані_параметрів: памʼять<адреса<ПредметПараметра>>, тип_результату: адреса<ПредметТипу>, код: адреса<ПредметКоду>): адреса<ПредметДії> {
    змінна предмет_дії = створити_предмет<ПредметДії>(М, М.предмет_структури_Дія);
    предмет_дії.середовище_створення = пусто;
    предмет_дії.предмет_я = пусто;
    предмет_дії.назва = назва;
    предмет_дії.параметри = Послідовність<адреса<ПредметПараметра>> { кількість_параметрів, дані_параметрів };
    предмет_дії.тип_результату = тип_результату;
    предмет_дії.код = код;
    предмет_дії.рідна = пусто;
    предмет_дії.дані = пусто;
    предмет_дії.зробити_копію_даних = пусто;
    предмет_дії.відклик_перед_звільненням = пусто;
    вернути предмет_дії;
  }

  місцева дія створити_предмет_рідної_дії(М: адреса<Машина>, назва: адреса<ПредметТексту>, кількість_параметрів: позитивне, дані_параметрів: памʼять<адреса<ПредметПараметра>>, тип_результату: адреса<ПредметТипу>, рідна: РіднаДія, дані: невідома_адреса, зробити_копію_даних: ЗробитиКопіюДанихПредметаДії, відклик_перед_звільненням: ВідкликПередЗвільненнямПредметаДії): адреса<ПредметДії> {
    змінна предмет_дії = створити_предмет<ПредметДії>(М, М.предмет_структури_Дія);
    предмет_дії.середовище_створення = пусто;
    предмет_дії.предмет_я = пусто;
    предмет_дії.назва = назва;
    предмет_дії.параметри = Послідовність<адреса<ПредметПараметра>> { кількість_параметрів, дані_параметрів };
    предмет_дії.тип_результату = тип_результату;
    предмет_дії.код = пусто;
    предмет_дії.рідна = рідна;
    предмет_дії.дані = дані;
    предмет_дії.зробити_копію_даних = зробити_копію_даних;
    предмет_дії.відклик_перед_звільненням = відклик_перед_звільненням;
    вернути предмет_дії;
  }

  місцева дія предмет_дії_виконати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    якщо предмет_дії.предмет_я != пусто {
      предмет_я = предмет_дії.предмет_я;
    }
    змінна середовище_створення = предмет_дії.середовище_створення;
    якщо середовище_створення == пусто {
      середовище_створення = М.предмет_глобального_середовища;
    }
    змінна середовище = створити_предмет_середовища(М, середовище_створення, пусто, предмет_я);
    покласти_в_накопичувач<ЕлементІсторії>(М, М.історія::адреса, ЕлементІсторії {
      місцезнаходження = місцезнаходження,
      предмет_дії = предмет_дії,
      середовище = середовище
    });
    змінна п: позитивне = 0;
    поки п < предмет_дії.параметри.розмір {
      змінна параметр = предмет_дії.параметри.дані[п];
      змінна значення_аргумента: адреса<Предмет> = пусто;
      якщо іменовані_аргументи != пусто {
        якщо знайти_іменований_аргумент(М, іменовані_аргументи, параметр.назва, значення_аргумента::адреса) {
          стрибнути х;
        }
      }
      якщо кількість_аргументів > п {
        значення_аргумента = аргументи[п];
      } інакше {
        якщо параметр.код_значення == пусто {
          якщо параметр.тип_ != пусто {
            якщо параметр.тип_.може_бути_пусто == позитивне(ні) {
              вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Пропущено аргумент") як адреса<Предмет>);
            }
          }
        } інакше {
          змінна результат = виконати_код(М, параметр.код_значення, середовище);
          якщо М.стан_падіння == позитивне(так) {
            вернути результат;
          } інакше {
            значення_аргумента = результат;
          }
        }
      }
      х:
      якщо параметр.тип_ != пусто {
        якщо перевірити_тип(М, значення_аргумента, параметр.тип_) == ні {
          вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Невірний тип аргумента") як адреса<Предмет>);
        }
      }
      змінити_в_середовищі(М, середовище, параметр.назва, значення_аргумента);
      п += 1;
    }
    якщо предмет_дії.код != пусто {
      змінна результат = виконати_код(М, предмет_дії.код, середовище);
      якщо М.стан_падіння == позитивне(ні) {
        забрати_з_накопичувача<ЕлементІсторії>(М, М.історія::адреса, пусто);
      }
      вернути результат;
    } інакше якщо предмет_дії.рідна != пусто {
      змінна результат = предмет_дії.рідна(М, предмет_дії, предмет_я, кількість_аргументів, аргументи, іменовані_аргументи);
      якщо М.стан_падіння == позитивне(ні) {
        забрати_з_накопичувача<ЕлементІсторії>(М, М.історія::адреса, пусто);
      }
      вернути результат;
    }
    вернути результат_стан_падіння(М, місцезнаходження, створити_предмет_тексту(М, "Неможливо виконати дію") як адреса<Предмет>);
  }

  місцева дія предмет_дії_отримати_властивість(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "назва")) {
      вернути предмет_дії.назва як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "параметри")) {
      змінна предмет_списку_параметрів = створити_предмет_списку(М, предмет_дії.параметри.розмір);
      змінна п: позитивне = 0;
      поки п < предмет_дії.параметри.розмір {
        покласти_в_накопичувач<адреса<Предмет>>(М, предмет_списку_параметрів.елементи::адреса, предмет_дії.параметри.дані[п] як адреса<Предмет>);
        п += 1;
      }
      вернути предмет_списку_параметрів як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "тип_результату")) {
      вернути предмет_дії.тип_результату як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "код")) {
      вернути предмет_дії.код як адреса<Предмет>;
    }
    якщо перевірити_чи_предмети_назви_рівні(М, назва, створити_назву(М, "я")) {
      вернути предмет_дії.предмет_я;
    }
    змінна метод: адреса<ПредметДії> = пусто;
    якщо знайти_метод_в_структурі(М, предмет_дії.тип, назва, метод::адреса) {
      вернути метод як адреса<Предмет>;
    }
    вернути пусто;
  }

  місцева дія предмет_дії_змінити_властивість(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, назва: адреса<ПредметТексту>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути пусто;
  }

  місцева дія предмет_дії_видалити_властивість(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, назва: адреса<ПредметТексту>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути М.предмет_логічного_ні як адреса<Предмет>;
  }

  місцева дія предмет_дії_виконати_властивість(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, назва: адреса<ПредметТексту>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна предмет_властивості = предмет_дії_отримати_властивість(М, предмет_дії, назва, місцезнаходження);
    якщо М.стан_падіння == позитивне(так) {
      вернути предмет_властивості;
    }
    якщо предмет_властивості == пусто {
      змінна накопичувач_т8_помилки = зробити_накопичувач<п8>(М);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "Неможливо виконати пусту властивість предмета дії \"");
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, назва.значення);
      покласти_в_накопичувач_т8(М, накопичувач_т8_помилки::адреса, "\"");
      змінна предмет_помилки = створити_предмет_тексту(М, т8 { накопичувач_т8_помилки.розмір, накопичувач_т8_помилки.дані });
      звільнити_памʼять(М, накопичувач_т8_помилки.дані);
      вернути результат_стан_падіння(М, місцезнаходження, предмет_помилки як адреса<Предмет>);
    }
    вернути предмет_виконати(М, предмет_властивості, предмет_дії як адреса<Предмет>, кількість_аргументів, аргументи, іменовані_аргументи, місцезнаходження);
  }

  місцева дія предмет_дії_додати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_додати"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_відняти(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_відняти"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_помножити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_помножити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_поділити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_поділити"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_остача(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_остача"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_неповна_частка(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_неповна_частка"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_степінь(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_степінь"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_зсунути_вліво(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_вліво"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_зсунути_вправо(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_вправо"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_зсунути_вправо_2(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_вправо_2"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_двійкове_і(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_двійкове_і"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_двійкове_або(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_двійкове_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_двійкове_виключне_або(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_двійкове_виключне_або"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_двійкове_заперечення(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_двійкове_заперечення"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_менше(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_менше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_більше(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_більше"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_містить(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, аргумент: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_містить"), 1, аргумент::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_числова_негація(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_місусове"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_отримати_число(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_число"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_збільшити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_збільшити"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_зменшити(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_зменшити"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_зображення(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_зображення"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_текст(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_текст"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_отримати_байти(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_байти"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_отримати_елемент(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_отримати_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_змінити_елемент(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, ключ: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_змінити_елемент"), 2, ключ::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_видалити_елемент(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, ключ: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_видалити_елемент"), 1, ключ::адреса як памʼять<адреса<Предмет>>, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_отримати_перебір(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    вернути предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_перебір"), 0, пусто, пусто, місцезнаходження);
  }

  місцева дія предмет_дії_отримати_діапазон(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння<Предмет> {
    змінна аргументи = виділити_памʼять<адреса<Предмет>>(М, 2);
    якщо включно {
      аргументи[0] = М.предмет_логічного_так як адреса<Предмет>;
    } інакше {
      аргументи[0] = М.предмет_логічного_ні як адреса<Предмет>;
    }
    аргументи[1] = до;
    змінна результат = предмет_дії_виконати_властивість(М, предмет_дії, створити_назву(М, "чародія_діапазон"), 2, аргументи, пусто, місцезнаходження);
    звільнити_памʼять(М, аргументи);
    вернути результат;
  }

  місцева дія привласнити_дію(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>): адреса<ПредметДії> {
    змінна власна_дія = створити_предмет<ПредметДії>(М, М.предмет_структури_Дія);
    власна_дія.середовище_створення = предмет_дії.середовище_створення;
    власна_дія.предмет_я = предмет_я;
    власна_дія.назва = предмет_дії.назва;
    власна_дія.параметри = Послідовність<адреса<ПредметПараметра>> { предмет_дії.параметри.розмір, виділити_памʼять<адреса<ПредметПараметра>>(М, предмет_дії.параметри.розмір) };
    змінна п: позитивне = 0;
    поки п < предмет_дії.параметри.розмір {
      власна_дія.параметри.дані[п] = предмет_дії.параметри.дані[п];
      п += 1;
    }
    власна_дія.тип_результату = предмет_дії.тип_результату;
    власна_дія.код = предмет_дії.код;
    власна_дія.рідна = предмет_дії.рідна;
    якщо предмет_дії.зробити_копію_даних == пусто {
      власна_дія.дані = пусто;
    } інакше {
      власна_дія.дані = предмет_дії.зробити_копію_даних(М, предмет_дії);
    }
    власна_дія.зробити_копію_даних = предмет_дії.зробити_копію_даних;
    власна_дія.відклик_перед_звільненням = предмет_дії.відклик_перед_звільненням;
    вернути власна_дія;
  }
}