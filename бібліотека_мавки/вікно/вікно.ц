взяти визначення мавка;
взяти визначення бібліотека_мавки;
взяти біб Друк;
взяти біб КД;

зовнішня дія мавка_бібліотека_вікно_ініціалізувати(ширина: натуральне, висота: натуральне, заголовок: адреса<ю8>, опції: натуральне);
зовнішня дія мавка_бібліотека_вікно_має_закритись() -> логічне;
зовнішня дія мавка_бібліотека_вікно_закрити();
зовнішня дія мавка_бібліотека_вікно_почати_малювання();
зовнішня дія мавка_бібліотека_вікно_закінчити_малювання();
зовнішня дія мавка_бібліотека_вікно_очистити_фон(ч: н8, з: н8, с: н8, п: н8);
зовнішня дія мавка_бібліотека_вікно_встановити_бажану_ккс(значення: натуральне);
зовнішня дія мавка_бібліотека_вікно_написати(значення: адреса<ю8>, ікс: натуральне, ігр: натуральне, розмір: р64, відступ: р64, ч: н8, з: н8, с: н8, п: н8, шрифт: невідома_адреса);
зовнішня дія мавка_бібліотека_вікно_ікс_миші() -> натуральне;
зовнішня дія мавка_бібліотека_вікно_ігр_миші() -> натуральне;
зовнішня дія мавка_бібліотека_вікно_рух_колеса_миші() -> р64;
зовнішня дія мавка_бібліотека_вікно_натиснутий_символ_юнікоду() -> натуральне;
зовнішня дія мавка_бібліотека_вікно_натиснута_клавіша() -> натуральне;
зовнішня дія мавка_бібліотека_вікно_клавішу_затиснуто(клавіша: натуральне) -> логічне;

секція мавка {
  секція бібліотека {
    дія обробник_відклику_вікна(М: адреса<Машина>, аргумент: невідома_адреса, скасовано: логічне) {
      змінна притримані_предмети = аргумент як памʼять<адреса<ГлобальноПритриманийПредмет>>; 

      змінна предмет_відклику = отримати_глобально_притриманий_предмет(М, притримані_предмети[0]);
      змінна предмет_відмалювати = отримати_глобально_притриманий_предмет(М, притримані_предмети[1]);
      змінна предмет_після_закриття = отримати_глобально_притриманий_предмет(М, притримані_предмети[2]);
 
      якщо мавка_бібліотека_вікно_має_закритись() {
        мавка_бібліотека_вікно_закрити();
        відпустити_глобально(М, притримані_предмети[0]);
        відпустити_глобально(М, притримані_предмети[1]);
        відпустити_глобально(М, притримані_предмети[2]);
        звільнити_памʼять(М, притримані_предмети);
        предмет_виконати(М, предмет_після_закриття, пусто, 0, пусто, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
        вернути;
      }

      змінна притримувач = покласти_притримувач(М);
      притримати(М, притримувач, предмет_відклику);
      притримати(М, притримувач, предмет_відмалювати);

      предмет_виконати(М, предмет_відклику, пусто, 0, пусто, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        мавка_бібліотека_вікно_закрити();
        забрати_притримувач(М);
        відпустити_глобально(М, притримані_предмети[0]);
        відпустити_глобально(М, притримані_предмети[1]);
        відпустити_глобально(М, притримані_предмети[2]);
        звільнити_памʼять(М, притримані_предмети);
        вернути;
      }

      мавка_бібліотека_вікно_почати_малювання();
      предмет_виконати(М, предмет_відмалювати, пусто, 0, пусто, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      мавка_бібліотека_вікно_закінчити_малювання();
      якщо перевірити_чи_стан_падіння(М) {
        мавка_бібліотека_вікно_закрити();
        забрати_притримувач(М);
        відпустити_глобально(М, притримані_предмети[0]);
        відпустити_глобально(М, притримані_предмети[1]);
        відпустити_глобально(М, притримані_предмети[2]);
        звільнити_памʼять(М, притримані_предмети);
        вернути;
      }
    
      відкласти(
        М,
        обробник_відклику_вікна,
        аргумент,
        0
      );

      забрати_притримувач(М);
    }

    дія рідна_дія_модуля_вікно_ініціалізувати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна знайдено_аргумент_ширина = ні;
      змінна аргумент_ширина: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_висота = ні;
      змінна аргумент_висота: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_заголовок = ні;
      змінна аргумент_заголовок: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_налаштувати = ні;
      змінна аргумент_налаштувати: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_відклик = ні;
      змінна аргумент_відклик: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_відмалювати = ні;
      змінна аргумент_відмалювати: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_після_закриття = ні;
      змінна аргумент_після_закриття: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_опції = ні;
      змінна аргумент_опції: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_ширина = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "ширина"), аргумент_ширина::адреса);
        знайдено_аргумент_висота = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "висота"), аргумент_висота::адреса);
        знайдено_аргумент_заголовок = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "заголовок"), аргумент_заголовок::адреса);
        знайдено_аргумент_налаштувати = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "налаштувати"), аргумент_налаштувати::адреса);
        знайдено_аргумент_відклик = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "відклик"), аргумент_відклик::адреса);
        знайдено_аргумент_відмалювати = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "відмалювати"), аргумент_відмалювати::адреса);
        знайдено_аргумент_після_закриття = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "після_закриття"), аргумент_після_закриття::адреса);
        знайдено_аргумент_опції = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "опції"), аргумент_опції::адреса);
      }
      якщо аргументи != пусто {
        якщо не знайдено_аргумент_ширина {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_ширина = так;
            аргумент_ширина = аргументи[0];
          }
        }
        якщо не знайдено_аргумент_висота {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_висота = так;
            аргумент_висота = аргументи[1];
          }
        }
        якщо не знайдено_аргумент_заголовок {
          якщо кількість_аргументів > 2 {
            знайдено_аргумент_заголовок = так;
            аргумент_заголовок = аргументи[2];
          }
        }
        якщо не знайдено_аргумент_налаштувати {
          якщо кількість_аргументів > 3 {
            знайдено_аргумент_налаштувати = так;
            аргумент_налаштувати = аргументи[3];
          }
        }
        якщо не знайдено_аргумент_відклик {
          якщо кількість_аргументів > 4 {
            знайдено_аргумент_відклик = так;
            аргумент_відклик = аргументи[4];
          }
        }
        якщо не знайдено_аргумент_відмалювати {
          якщо кількість_аргументів > 5 {
            знайдено_аргумент_відмалювати = так;
            аргумент_відмалювати = аргументи[5];
          }
        }
        якщо не знайдено_аргумент_після_закриття {
          якщо кількість_аргументів > 6 {
            знайдено_аргумент_після_закриття = так;
            аргумент_після_закриття = аргументи[6];
          }
        }
        якщо не знайдено_аргумент_опції {
          якщо кількість_аргументів > 7 {
            знайдено_аргумент_опції = так;
            аргумент_опції = аргументи[7];
          }
        }
      }

      змінна ширина: натуральне = 800;
      якщо знайдено_аргумент_ширина {
        якщо не перевірити_чи_предмет_є_числом(М, аргумент_ширина) {
          вернути падіння(М, "ширина має бути числом");
        }
        ширина = натуральне(отримати_значення_числа(М, аргумент_ширина як адреса<ПредметЧисла>));
      }

      змінна висота: натуральне = 450;
      якщо знайдено_аргумент_висота {
        якщо не перевірити_чи_предмет_є_числом(М, аргумент_висота) {
          вернути падіння(М, "висота має бути числом");
        }
        висота = натуральне(отримати_значення_числа(М, аргумент_висота як адреса<ПредметЧисла>));
      }

      змінна опції: натуральне = 0;
      якщо знайдено_аргумент_опції {
        якщо не перевірити_чи_предмет_є_числом(М, аргумент_опції) {
          вернути падіння(М, "опції має бути числом");
        }
        опції = натуральне(отримати_значення_числа(М, аргумент_опції як адреса<ПредметЧисла>));
      }

      змінна заголовок = т8 { 0, пусто };
      якщо знайдено_аргумент_заголовок {
        якщо не перевірити_чи_предмет_є_текстом(М, аргумент_заголовок) {
          вернути падіння(М, "заголовок має бути текстом");
        }
        заголовок = отримати_значення_тексту(М, аргумент_заголовок як адреса<ПредметТексту>);
      }

      змінна заголовок_ю8 = ю8 { 0, пусто };
      
      мавка_бібліотека_вікно_ініціалізувати(ширина, висота, заголовок_ю8::адреса, опції);

      якщо аргумент_налаштувати != пусто {
        предмет_виконати(М, аргумент_налаштувати, пусто, 0, пусто, пусто, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
        якщо перевірити_чи_стан_падіння(М) {
          мавка_бібліотека_вікно_закрити();
          вернути пусто;
        }
      }

      змінна притримані_предмети = виділити_памʼять<адреса<ГлобальноПритриманийПредмет>>(М, 3);
      притримані_предмети[0] = притримати_глобально(М, аргумент_відклик);
      притримані_предмети[1] = притримати_глобально(М, аргумент_відмалювати);
      притримані_предмети[2] = притримати_глобально(М, аргумент_після_закриття);

      відкласти(
        М,
        обробник_відклику_вікна,
        притримані_предмети як невідома_адреса,
        0
      );

      вернути пусто;
    }

    дія створити_дію_модуля_вікно_ініціалізувати(М: адреса<Машина>) -> ПредметАбоСтанПадіння<ПредметДії> {
      змінна кількість_параметрів: натуральне = 0;
      змінна параметри: памʼять<адреса<ПредметПараметра>> = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "ініціалізувати"),
        кількість_параметрів,
        параметри,
        рідна_дія_модуля_вікно_ініціалізувати,
        пусто,
        пусто,
        пусто
      );
    }

    дія рідна_дія_модуля_вікно_очистити_фон(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна знайдено_аргумент_ч = ні;
      змінна аргумент_ч: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_з = ні;
      змінна аргумент_з: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_с = ні;
      змінна аргумент_с: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_п = ні;
      змінна аргумент_п: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_ч = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "ч"), аргумент_ч::адреса);
        знайдено_аргумент_з = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "з"), аргумент_з::адреса);
        знайдено_аргумент_с = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "с"), аргумент_с::адреса);
        знайдено_аргумент_п = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "п"), аргумент_п::адреса);
      }
      якщо аргументи != пусто {
        якщо не знайдено_аргумент_ч {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_ч = так;
            аргумент_ч = аргументи[0];
          }
        }
        якщо не знайдено_аргумент_з {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_з = так;
            аргумент_з = аргументи[1];
          }
        }
        якщо не знайдено_аргумент_с {
          якщо кількість_аргументів > 2 {
            знайдено_аргумент_с = так;
            аргумент_с = аргументи[2];
          }
        }
        якщо не знайдено_аргумент_п {
          якщо кількість_аргументів > 3 {
            знайдено_аргумент_п = так;
            аргумент_п = аргументи[3];
          }
        }
      }

      змінна ч: н8 = 0;
      якщо знайдено_аргумент_ч {
        якщо не перевірити_чи_предмет_є_числом(М, аргумент_ч) {
          вернути падіння(М, "ч має бути числом");
        }
        ч = н8(отримати_значення_числа(М, аргумент_ч як адреса<ПредметЧисла>));
      }

      змінна з: н8 = 0;
      якщо знайдено_аргумент_з {
        якщо не перевірити_чи_предмет_є_числом(М, аргумент_з) {
          вернути падіння(М, "з має бути числом");
        }
        з = н8(отримати_значення_числа(М, аргумент_з як адреса<ПредметЧисла>));
      }

      змінна с: н8 = 0;
      якщо знайдено_аргумент_с {
        якщо не перевірити_чи_предмет_є_числом(М, аргумент_с) {
          вернути падіння(М, "с має бути числом");
        }
        с = н8(отримати_значення_числа(М, аргумент_с як адреса<ПредметЧисла>));
      }

      змінна п: н8 = 0;
      якщо знайдено_аргумент_п {
        якщо не перевірити_чи_предмет_є_числом(М, аргумент_п) {
          вернути падіння(М, "п має бути числом");
        }
        п = н8(отримати_значення_числа(М, аргумент_п як адреса<ПредметЧисла>));
      }
      
      мавка_бібліотека_вікно_очистити_фон(ч, з, с, п);

      вернути пусто;
    }

    дія створити_дію_модуля_вікно_очистити_фон(М: адреса<Машина>) -> ПредметАбоСтанПадіння<ПредметДії> {
      змінна кількість_параметрів: натуральне = 0;
      змінна параметри: памʼять<адреса<ПредметПараметра>> = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "очистити_фон"),
        кількість_параметрів,
        параметри,
        рідна_дія_модуля_вікно_очистити_фон,
        пусто,
        пусто,
        пусто
      );
    }

    дія рідна_дія_модуля_вікно_встановити_бажану_ккс(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо не знайдено_аргумент_значення {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
      }

      змінна значення: натуральне = 0;
      якщо знайдено_аргумент_значення {
        якщо не перевірити_чи_предмет_є_числом(М, аргумент_значення) {
          вернути падіння(М, "значення має бути числом");
        }
        значення = натуральне(отримати_значення_числа(М, аргумент_значення як адреса<ПредметЧисла>));
      }

      мавка_бібліотека_вікно_встановити_бажану_ккс(значення);

      вернути пусто;
    }

    дія створити_дію_модуля_вікно_встановити_бажану_ккс(М: адреса<Машина>) -> ПредметАбоСтанПадіння<ПредметДії> {
      змінна кількість_параметрів: натуральне = 0;
      змінна параметри: памʼять<адреса<ПредметПараметра>> = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "встановити_бажану_ккс"),
        кількість_параметрів,
        параметри,
        рідна_дія_модуля_вікно_встановити_бажану_ккс,
        пусто,
        пусто,
        пусто
      );
    }

    дія рідна_дія_модуля_вікно_написати(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна знайдено_аргумент_значення = ні;
      змінна аргумент_значення: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_ікс = ні;
      змінна аргумент_ікс: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_ігр = ні;
      змінна аргумент_ігр: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_розмір = ні;
      змінна аргумент_розмір: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_відступ = ні;
      змінна аргумент_відступ: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_колір = ні;
      змінна аргумент_колір: адреса<Предмет> = пусто;
      змінна знайдено_аргумент_шрифт = ні;
      змінна аргумент_шрифт: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "значення"), аргумент_значення::адреса);
        знайдено_аргумент_ікс = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "ікс"), аргумент_ікс::адреса);
        знайдено_аргумент_ігр = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "ігр"), аргумент_ігр::адреса);
        знайдено_аргумент_розмір = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "розмір"), аргумент_розмір::адреса);
        знайдено_аргумент_відступ = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "відступ"), аргумент_відступ::адреса);
        знайдено_аргумент_колір = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "колір"), аргумент_колір::адреса);
        знайдено_аргумент_шрифт = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "шрифт"), аргумент_шрифт::адреса);
      }
      якщо аргументи != пусто {
        якщо не знайдено_аргумент_значення {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи[0];
          }
        }
        якщо не знайдено_аргумент_ікс {
          якщо кількість_аргументів > 1 {
            знайдено_аргумент_ікс = так;
            аргумент_ікс = аргументи[1];
          }
        }
        якщо не знайдено_аргумент_ігр {
          якщо кількість_аргументів > 2 {
            знайдено_аргумент_ігр = так;
            аргумент_ігр = аргументи[2];
          }
        }
        якщо не знайдено_аргумент_розмір {
          якщо кількість_аргументів > 3 {
            знайдено_аргумент_розмір = так;
            аргумент_розмір = аргументи[3];
          }
        }
        якщо не знайдено_аргумент_відступ {
          якщо кількість_аргументів > 4 {
            знайдено_аргумент_відступ = так;
            аргумент_відступ = аргументи[4];
          }
        }
        якщо не знайдено_аргумент_колір {
          якщо кількість_аргументів > 5 {
            знайдено_аргумент_колір = так;
            аргумент_колір = аргументи[5];
          }
        }
        якщо не знайдено_аргумент_шрифт {
          якщо кількість_аргументів > 6 {
            знайдено_аргумент_шрифт = так;
            аргумент_шрифт = аргументи[6];
          }
        }
      }

      змінна значення = т8 { 0, пусто };
      якщо знайдено_аргумент_значення {
        якщо не перевірити_чи_предмет_є_текстом(М, аргумент_значення) {
          вернути падіння(М, "значення має бути текстом");
        }
        значення = отримати_значення_тексту(М, аргумент_значення як адреса<ПредметТексту>);
      }

      змінна ікс: натуральне = 0;
      якщо знайдено_аргумент_ікс {
        якщо аргумент_ікс == пусто або не перевірити_чи_предмет_є_числом(М, аргумент_ікс) {
          вернути падіння(М, "ікс має бути числом");
        }
        ікс = натуральне(отримати_значення_числа(М, аргумент_ікс як адреса<ПредметЧисла>));
      }

      змінна ігр: натуральне = 0;
      якщо знайдено_аргумент_ігр {
        якщо аргумент_ігр == пусто або не перевірити_чи_предмет_є_числом(М, аргумент_ігр) {
          вернути падіння(М, "ігр має бути числом");
        }
        ігр = натуральне(отримати_значення_числа(М, аргумент_ігр як адреса<ПредметЧисла>));
      }

      змінна розмір: р64 = 0;
      якщо знайдено_аргумент_розмір {
        якщо не перевірити_чи_предмет_є_числом(М, аргумент_розмір) {
          вернути падіння(М, "розмір має бути числом");
        }
        розмір = отримати_значення_числа(М, аргумент_розмір як адреса<ПредметЧисла>);
      }

      змінна відступ: р64 = 0;
      якщо знайдено_аргумент_відступ {
        якщо не перевірити_чи_предмет_є_числом(М, аргумент_відступ) {
          вернути падіння(М, "відступ має бути числом");
        }
        відступ = отримати_значення_числа(М, аргумент_відступ як адреса<ПредметЧисла>);
      }

      змінна значення_ю8 = ю8 { 0, пусто };
      якщо не перекодувати_т8_в_ю8(М, ОпціїПерекодуванняТ8вЮ8 { з_кінцем = ні }, значення, значення_ю8::адреса, пусто, пусто) {
        увімкнути_стан_падіння(М, Місцезнаходження { пусто як адреса<ПредметБайтів>, 0 }, створити_предмет_тексту(М, "Не вдалось перекодувати значення в ю8") як адреса<Предмет>);
        вернути пусто;
      }
      
      мавка_бібліотека_вікно_написати(
        значення_ю8::адреса, 
        ікс,
        ігр,
        розмір,
        відступ,
        255,
        255,
        255,
        255,
        пусто
      );

      звільнити_памʼять(М, значення_ю8.дані);

      вернути пусто;
    }

    дія створити_дію_модуля_вікно_написати(М: адреса<Машина>) -> ПредметАбоСтанПадіння<ПредметДії> {
      змінна кількість_параметрів: натуральне = 0;
      змінна параметри: памʼять<адреса<ПредметПараметра>> = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "написати"),
        кількість_параметрів,
        параметри,
        рідна_дія_модуля_вікно_написати,
        пусто,
        пусто,
        пусто
      );
    }

    дія рідна_дія_модуля_вікно_ікс_миші(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      вернути створити_предмет_числа(М, р64(мавка_бібліотека_вікно_ікс_миші())) як адреса<Предмет>;
    }

    дія створити_дію_модуля_вікно_ікс_миші(М: адреса<Машина>) -> ПредметАбоСтанПадіння<ПредметДії> {
      змінна кількість_параметрів: натуральне = 0;
      змінна параметри: памʼять<адреса<ПредметПараметра>> = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "ікс_миші"),
        кількість_параметрів,
        параметри,
        рідна_дія_модуля_вікно_ікс_миші,
        пусто,
        пусто,
        пусто
      );
    }

    дія рідна_дія_модуля_вікно_ігр_миші(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      вернути створити_предмет_числа(М, р64(мавка_бібліотека_вікно_ігр_миші())) як адреса<Предмет>;
    }

    дія створити_дію_модуля_вікно_ігр_миші(М: адреса<Машина>) -> ПредметАбоСтанПадіння<ПредметДії> {
      змінна кількість_параметрів: натуральне = 0;
      змінна параметри: памʼять<адреса<ПредметПараметра>> = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "ігр_миші"),
        кількість_параметрів,
        параметри,
        рідна_дія_модуля_вікно_ігр_миші,
        пусто,
        пусто,
        пусто
      );
    }

    дія рідна_дія_модуля_вікно_рух_колеса_миші(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      вернути створити_предмет_числа(М, р64(мавка_бібліотека_вікно_рух_колеса_миші())) як адреса<Предмет>;
    }

    дія створити_дію_модуля_вікно_рух_колеса_миші(М: адреса<Машина>) -> ПредметАбоСтанПадіння<ПредметДії> {
      змінна кількість_параметрів: натуральне = 0;
      змінна параметри: памʼять<адреса<ПредметПараметра>> = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "рух_колеса_миші"),
        кількість_параметрів,
        параметри,
        рідна_дія_модуля_вікно_рух_колеса_миші,
        пусто,
        пусто,
        пусто
      );
    }

    дія рідна_дія_модуля_вікно_натиснутий_символ(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна символ_КД: н8 = 0;
      змінна кількість_байтів_КД: н8 = 0;
      КД::отримати_символ_т8_з_ю32(н32(мавка_бібліотека_вікно_натиснутий_символ_юнікоду()), символ_КД::адреса, пусто, пусто, пусто, кількість_байтів_КД::адреса);
      вернути створити_предмет_числа(М, р64(символ_КД)) як адреса<Предмет>;
    }

    дія створити_дію_модуля_вікно_натиснутий_символ(М: адреса<Машина>) -> ПредметАбоСтанПадіння<ПредметДії> {
      змінна кількість_параметрів: натуральне = 0;
      змінна параметри: памʼять<адреса<ПредметПараметра>> = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "натиснутий_символ"),
        кількість_параметрів,
        параметри,
        рідна_дія_модуля_вікно_натиснутий_символ,
        пусто,
        пусто,
        пусто
      );
    }

    дія рідна_дія_модуля_вікно_натиснута_клавіша(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      вернути створити_предмет_числа(М, р64(мавка_бібліотека_вікно_натиснута_клавіша())) як адреса<Предмет>;
    }

    дія створити_дію_модуля_вікно_натиснута_клавіша(М: адреса<Машина>) -> ПредметАбоСтанПадіння<ПредметДії> {
      змінна кількість_параметрів: натуральне = 0;
      змінна параметри: памʼять<адреса<ПредметПараметра>> = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "натиснута_клавіша"),
        кількість_параметрів,
        параметри,
        рідна_дія_модуля_вікно_натиснута_клавіша,
        пусто,
        пусто,
        пусто
      );
    }

    дія рідна_дія_модуля_вікно_клавішу_затиснуто(М: адреса<Машина>, предмет_дії: адреса<ПредметДії>, предмет_я: адреса<Предмет>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна знайдено_аргумент_клавіша = ні;
      змінна аргумент_клавіша: адреса<Предмет> = пусто;

      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_клавіша = знайти_іменований_аргумент(М, іменовані_аргументи, створити_назву(М, "клавіша"), аргумент_клавіша::адреса);
      }
      якщо аргументи != пусто {
        якщо не знайдено_аргумент_клавіша {
          якщо кількість_аргументів > 0 {
            знайдено_аргумент_клавіша = так;
            аргумент_клавіша = аргументи[0];
          }
        }
      }
      змінна клавіша: натуральне = 0;
      якщо знайдено_аргумент_клавіша {
        якщо аргумент_клавіша == пусто або не перевірити_чи_предмет_є_числом(М, аргумент_клавіша) {
          вернути падіння(М, "клавіша має бути числом");
        }
        клавіша = натуральне(отримати_значення_числа(М, аргумент_клавіша як адреса<ПредметЧисла>));
      }

      якщо мавка_бібліотека_вікно_клавішу_затиснуто(клавіша) {
        вернути М.предмет_логічного_так як адреса<Предмет>;
      }

      вернути М.предмет_логічного_ні як адреса<Предмет>;
    }

    дія створити_дію_модуля_вікно_клавішу_затиснуто(М: адреса<Машина>) -> ПредметАбоСтанПадіння<ПредметДії> {
      змінна кількість_параметрів: натуральне = 0;
      змінна параметри: памʼять<адреса<ПредметПараметра>> = пусто;

      вернути створити_предмет_рідної_дії(
        М,
        створити_назву(М, "клавішу_затиснуто"),
        кількість_параметрів,
        параметри,
        рідна_дія_модуля_вікно_клавішу_затиснуто,
        пусто,
        пусто,
        пусто
      );
    }

    дія створити_модуль_вікно(М: адреса<Машина>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна притримувач = покласти_притримувач(М);

      змінна предмет_модуля = створити_предмет_модуля(М, створити_назву(М, "вікно")) як адреса<Предмет>;
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_модуля);

      змінна предмет_дії_ініціалізувати = створити_дію_модуля_вікно_ініціалізувати(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_дії_ініціалізувати як адреса<Предмет>);
      предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "ініціалізувати"), предмет_дії_ініціалізувати як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }

      змінна предмет_дії_очистити_фон = створити_дію_модуля_вікно_очистити_фон(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_дії_очистити_фон як адреса<Предмет>);
      предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "очистити_фон"), предмет_дії_очистити_фон як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }

      змінна предмет_дії_встановити_бажану_ккс = створити_дію_модуля_вікно_встановити_бажану_ккс(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_дії_встановити_бажану_ккс як адреса<Предмет>);
      предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "встановити_бажану_ккс"), предмет_дії_встановити_бажану_ккс як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }

      змінна предмет_дії_написати = створити_дію_модуля_вікно_написати(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_дії_написати як адреса<Предмет>);
      предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "написати"), предмет_дії_написати як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }

      змінна предмет_дії_ікс_миші = створити_дію_модуля_вікно_ікс_миші(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_дії_ікс_миші як адреса<Предмет>);
      предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "ікс_миші"), предмет_дії_ікс_миші як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }

      змінна предмет_дії_ігр_миші = створити_дію_модуля_вікно_ігр_миші(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_дії_ігр_миші як адреса<Предмет>);
      предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "ігр_миші"), предмет_дії_ігр_миші як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }

      змінна предмет_дії_рух_колеса_миші = створити_дію_модуля_вікно_рух_колеса_миші(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_дії_рух_колеса_миші як адреса<Предмет>);
      предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "рух_колеса_миші"), предмет_дії_рух_колеса_миші як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }

      змінна предмет_дії_натиснутий_символ = створити_дію_модуля_вікно_натиснутий_символ(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_дії_натиснутий_символ як адреса<Предмет>);
      предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "натиснутий_символ"), предмет_дії_натиснутий_символ як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }

      змінна предмет_дії_натиснута_клавіша = створити_дію_модуля_вікно_натиснута_клавіша(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_дії_натиснута_клавіша як адреса<Предмет>);
      предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "натиснута_клавіша"), предмет_дії_натиснута_клавіша як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }

      змінна предмет_дії_клавішу_затиснуто = створити_дію_модуля_вікно_клавішу_затиснуто(М);
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }
      притримати(М, притримувач, предмет_дії_клавішу_затиснуто як адреса<Предмет>);
      предмет_змінити_властивість(М, предмет_модуля, створити_назву(М, "клавішу_затиснуто"), предмет_дії_клавішу_затиснуто як адреса<Предмет>, Місцезнаходження { пусто як адреса<ПредметТексту>, 0 });
      якщо перевірити_чи_стан_падіння(М) {
        забрати_притримувач(М);
        вернути пусто;
      }

      забрати_притримувач(М);

      зробити_предмет_модуля_готовим(М, предмет_модуля як адреса<ПредметМодуля>);
      
      вернути предмет_модуля;
    }

    місцева дія взяти_модуль_біб_вікно(М: адреса<Машина>) -> ПредметАбоСтанПадіння<Предмет> {
      змінна шлях_ю8 = ю8"мавка:бібліотека/вікно/вікно.ц";
      змінна шлях = створити_предмет_байтів(М, шлях_ю8.розмір, шлях_ю8.дані);
      якщо перевірити_чи_стан_падіння(М) {
        вернути пусто;
      }
      змінна взятий_предмет: адреса<Предмет> = пусто;
      якщо отримати_взятий_предмет(М, шлях, взятий_предмет::адреса) {
        вернути взятий_предмет як адреса<Предмет>;
      }
      змінна результат = створити_модуль_вікно(М);
      якщо перевірити_чи_стан_падіння(М) {
        вернути пусто;
      }
      покласти_взятий_предмет(М, шлях, результат як адреса<Предмет>);
      вернути результат;
    }
  }
}