////
// Визначення для створення розширень Мавки.
//
// Приклад:
//
// взяти визначення РМв1;
// зовнішня дія завантажити_РМв1(Р: адреса<РМв1::Розширення>): РМв1::Результат {
//   РМв1::надрукувати_ю8(Р, ю8"Вітання з розширення!");
//   вернути РМв1::успіх(Р, пусто);
// }
////

////
// Автор це Богданович Давид Когут Прихожденко та Організація М та Організація Організацій
////

// Не рекомендується напряму отримувати властивості предметів, а натомість використовувати публічні дії нижче.
секція РМв1 {
  // версія цього файлу визначень
  синонім МАЖОР = 1;
  синонім МІНОР = 0;
  синонім ПАТЧ = 0;

  структура Назва;
  структура Предмет;
  структура Розширення;
  структура ІменованіАргументи;

  структура МісцезнаходженняПадіння {
    шлях_до_файлу: ю8;
    рядок: позитивне;
  }

  структура ЕлементІсторіїПадіння {
    шлях_до_файлу: ю8;
    рядок: позитивне;
    назва_дії: адреса<Назва>;
  }

  структура Падіння {
    місцезнаходження: адреса<МісцезнаходженняПадіння>;
    розмір_історії: позитивне;
    історія: памʼять<ЕлементІсторіїПадіння>;
  }

  структура Результат {
    падіння: адреса<Падіння>;
    значення: адреса<Предмет>;
  }

  структура ЕлементСловника {
    ключ: адреса<Предмет>;
    значення: адреса<Предмет>;
  }

  синонім НативнаДія = (предмет_нативної_дії: адреса<Предмет>, Р: адреса<Розширення>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: невідома_адреса) -> Результат;
  синонім ВідкликПередЗвільненнямПредметаНативноїДії = (предмет_нативної_дії: адреса<Предмет>, Р: адреса<Розширення>, дані: невідома_адреса) -> ніщо;

  структура Розширення {
    мажор: позитивне;  // версія переданого розширення з мавки
    мінор: позитивне;
    патч: позитивне;
    дані: невідома_адреса; // власні дані розширення
    обчислювач: невідома_адреса; // обчислювач мавки
    виділити_падіння: (Р: адреса<Розширення>) -> адреса<Падіння>;
    звільнити_падіння: (Р: адреса<Розширення>, падіння: адреса<Падіння>) -> ніщо;
    предмет_логічного_так: адреса<Предмет>;
    предмет_логічного_ні: адреса<Предмет>;
    надрукувати_ю8: (Р: адреса<Розширення>, значення: ю8) -> ніщо;
    надрукувати_предмет: (Р: адреса<Розширення>, предмет: адреса<Предмет>, глибина: позитивне) -> ніщо;
    взяти_файл_ю8: (Р: адреса<Розширення>, назва_модуля: адреса<Назва>, шлях_до_файлу: ю8) -> Результат;
    притримати_предмет: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> ніщо;
    відпустити_предмет: (Р: адреса<Розширення>) -> ніщо;
    назва_з_ю8: (Р: адреса<Розширення>, значення: ю8) -> адреса<Назва>;
    створити_нативну_дію: (Р: адреса<Розширення>, назва: адреса<Назва>, значення: НативнаДія, дані: невідома_адреса, відклик_перед_звільненням: ВідкликПередЗвільненнямПредметаНативноїДії) -> адреса<Предмет>;
    створити_число: (Р: адреса<Розширення>, значення: д64) -> адреса<Предмет>;
    створити_текст_з_ю8: (Р: адреса<Розширення>, значення: ю8) -> адреса<Предмет>;
    створити_юнікод_з_ю8: (Р: адреса<Розширення>, значення: ю8) -> адреса<Предмет>;
    створити_модуль: (Р: адреса<Розширення>, назва: адреса<Назва>) -> адреса<Предмет>;
    створити_список: (Р: адреса<Розширення>) -> адреса<Предмет>;
    створити_словник: (Р: адреса<Розширення>) -> адреса<Предмет>;
    створити_предмет: (Р: адреса<Розширення>) -> адреса<Предмет>;
    предмет_виконати: (предмет: адреса<Предмет>, Р: адреса<Розширення>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> Результат;
    предмет_отримати_властивість: (предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>) -> Результат;
    предмет_змінити_властивість: (предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>, значення: адреса<Предмет>) -> Результат;
    предмет_видалити_властивість: (предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>) -> Результат;
    предмет_виконати_властивість: (предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>) -> Результат;
    предмет_отримати_елемент: (предмет: адреса<Предмет>, Р: адреса<Розширення>, ключ: адреса<Предмет>) -> Результат;
    предмет_змінити_елемент: (предмет: адреса<Предмет>, Р: адреса<Розширення>, ключ: адреса<Предмет>, значення: адреса<Предмет>) -> Результат;
    предмет_видалити_елемент: (предмет: адреса<Предмет>, Р: адреса<Розширення>, ключ: адреса<Предмет>) -> Результат;
    предмет_отримати_перебір: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> Результат;
    предмет_додати: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_відняти: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_помножити: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_поділити: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_остача: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_неповна_частка: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_степінь: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_вліво: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_вправо_зі_заповненням: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_двійкове_і: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_двійкове_або: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_двійкове_виключне_або: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_двійкове_не: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> Результат;
    предмет_більше: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_менше: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_рівно: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_містить: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_є: (предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>) -> Результат;
    предмет_відʼємне: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> Результат;
    предмет_числове: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> Результат;
    предмет_заперечити: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> Результат;
    предмет_збільшити: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> Результат;
    предмет_зменшити: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> Результат;
    отримати_значення_числа: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> д64;
    виділити: (Р: адреса<Розширення>, розмір: позитивне) -> памʼять<п8>;
    обробити_падіння: (Р: адреса<Розширення>, падіння: адреса<Падіння>, значення: адреса<Предмет>) -> ніщо;
    звільнити: (Р: адреса<Розширення>, значення: адреса) -> ніщо;
    перевірити_чи_предмет_є_дією: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    перевірити_чи_предмет_є_нативною_дією: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    перевірити_чи_предмет_є_числом: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    перевірити_чи_предмет_є_текстом: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    перевірити_чи_предмет_є_юнікодом: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    перевірити_чи_предмет_є_модулем: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    перевірити_чи_предмет_є_списком: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    перевірити_чи_предмет_є_словником: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    перевірити_чи_предмет_є_логічним: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    перевірити_чи_предмет_є_байтами: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    отримати_копію_даних_тексту_як_т8: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<т8>) -> логічне;
    отримати_дані_тексту: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<т8>) -> логічне;
    отримати_копію_даних_юнікоду: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: невідома_адреса) -> логічне;
    отримати_дані_юнікоду: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: невідома_адреса) -> логічне;
    отримати_копію_даних_юнікоду_як_ю8: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<ю8>) -> логічне;
    отримати_копію_даних_байтів: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>) -> позитивне;
    отримати_дані_байтів: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>) -> позитивне;
    створити_байти: (Р: адреса<Розширення>, розмір: позитивне) -> адреса<Предмет>;
    записати_в_байти: (предмет: адреса<Предмет>, Р: адреса<Розширення>, дані: памʼять<п8>, розмір: позитивне, зсув: позитивне) -> ніщо;
    отримати_копію_елементів_словника: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<ЕлементСловника>>) -> позитивне;
    перевиділити: (Р: адреса<Розширення>, значення: памʼять<п8>, новий_розмір: позитивне) -> памʼять<п8>;
    знайти_іменований_аргумент: (Р: адреса<Розширення>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Назва>, вихід: адреса<адреса<Предмет>>) -> логічне;
    записати_іменований_аргумент: (Р: адреса<Розширення>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Назва>, значення: адреса<Предмет>) -> ніщо;
    виділити_іменовані_аргументи: (Р: адреса<Розширення>) -> адреса<ІменованіАргументи>;
    звільнити_іменовані_аргументи: (Р: адреса<Розширення>, іменовані_аргументи: адреса<ІменованіАргументи>) -> ніщо;
    створити_адресу: (Р: адреса<Розширення>, значення: адреса) -> адреса<Предмет>;
    отримати_значення_адреси: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> адреса;
    перевірити_чи_предмет_є_адресою: (предмет: адреса<Предмет>, Р: адреса<Розширення>) -> логічне;
    отримати_копію_елементів_списку: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<адреса<Предмет>>>) -> позитивне;
    отримати_копію_даних_юнікоду_як_ю8сі: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>) -> позитивне;
    отримати_копію_даних_тексту_як_ю8сі: (предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>) -> позитивне;
    створити_юнікод_з_ю8сі: (Р: адреса<Розширення>, значення: памʼять<п8>) -> адреса<Предмет>;
    назва_з_т8: (Р: адреса<Розширення>, значення: т8) -> адреса<Назва>;
    створити_текст_з_т8: (Р: адреса<Розширення>, значення: т8) -> адреса<Предмет>;
  }
}

// Публічні дії для створення розширення.
секція РМв1 {
  дія виділити_падіння(Р: адреса<Розширення>): адреса<Падіння>;
  дія звільнити_падіння(Р: адреса<Розширення>, падіння: адреса<Падіння>);

  // створює успішний результат
  дія успіх(Р: адреса<Розширення>, значення: адреса<Предмет>): Результат;

  // створює результат падіння (місцезнаходження падіння визначається машиною автоматично)
  дія падіння(Р: адреса<Розширення>, значення: адреса<Предмет>): Результат;

  // дозволяє записати користувацькі дані в розширення
  дія записати_дані_розширення(Р: адреса<Розширення>, дані: адреса);

  // дозволяє отримати користувацькі дані з розширення
  дія отримати_дані_розширення(Р: адреса<Розширення>): адреса;

  // записує в стандартний вивід значення юнікоду (UTF-8)
  дія надрукувати_ю8(Р: адреса<Розширення>, значення: ю8);

  // записує в стандартний вивід предмет
  дія надрукувати_предмет(Р: адреса<Розширення>, предмет: адреса<Предмет>, глибина: позитивне);

  // дозволяє взяти файл модуля Мавки
  дія взяти_файл_ю8(Р: адреса<Розширення>, назва_модуля: адреса<Назва>, шлях_до_файлу: ю8): Результат;

  // ця дія використовується щоб забезпечити недоторканість предмета утилізатором
  дія притримати_предмет(Р: адреса<Розширення>, предмет: адреса<Предмет>);

  // видаляє останній збережий предмет дією вище
  дія відпустити_предмет(Р: адреса<Розширення>);

  // дозволяє отримати назву з юнікоду (UTF-8)
  дія назва_з_ю8(Р: адреса<Розширення>, значення: ю8): адреса<Назва>;

  // створює предмет нативної дії
  дія створити_нативну_дію(Р: адреса<Розширення>, назва: адреса<Назва>, значення: НативнаДія, дані: невідома_адреса, відклик_перед_звільненням: ВідкликПередЗвільненнямПредметаНативноїДії): адреса<Предмет>;

  // створює предмет числа
  дія створити_число(Р: адреса<Розширення>, значення: д64): адреса<Предмет>;

  // створює предмет тексту з юнікоду (UTF-8)
  дія створити_текст_з_ю8(Р: адреса<Розширення>, значення: ю8): адреса<Предмет>;

  // створює предмет юнікоду з юнікоду (UTF-8)
  дія створити_юнікод_з_ю8(Р: адреса<Розширення>, значення: ю8): адреса<Предмет>;

  // створює предмет модуля
  дія створити_модуль(Р: адреса<Розширення>, назва: адреса<Назва>): адреса<Предмет>;

  // створює предмет списку
  дія створити_список(Р: адреса<Розширення>): адреса<Предмет>;

  // створює предмет словника
  дія створити_словник(Р: адреса<Розширення>): адреса<Предмет>;

  // створює простий предмет
  дія створити_предмет(Р: адреса<Розширення>): адреса<Предмет>;

  // виконує предмет
  дія предмет_виконати(предмет: адреса<Предмет>, Р: адреса<Розширення>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>): Результат;

  // отримує властивість предмета
  дія предмет_отримати_властивість(предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>): Результат;

  // змінює властивість предмета
  дія предмет_змінити_властивість(предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>, значення: адреса<Предмет>): Результат;

  // видаляє властивість предмета
  дія предмет_видалити_властивість(предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>): Результат;

  // виконує властивість предмета
  дія предмет_виконати_властивість(предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>): Результат;

  // отримує елемент предмета
  дія предмет_отримати_елемент(предмет: адреса<Предмет>, Р: адреса<Розширення>, ключ: адреса<Предмет>): Результат;

  // змінює елемент предмета
  дія предмет_змінити_елемент(предмет: адреса<Предмет>, Р: адреса<Розширення>, ключ: адреса<Предмет>, значення: адреса<Предмет>): Результат;

  // видаляє елемент предмета
  дія предмет_видалити_елемент(предмет: адреса<Предмет>, Р: адреса<Розширення>, ключ: адреса<Предмет>): Результат;

  // отримує перебір предмета
  дія предмет_отримати_перебір(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат;

  // додає два предмета
  дія предмет_додати(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // віднімає два предмета
  дія предмет_відняти(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // множить два предмета
  дія предмет_помножити(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // ділить два предмета
  дія предмет_поділити(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // отримує остачу від ділення двох предметів
  дія предмет_остача(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // отримує неповну частку від ділення двох предметів
  дія предмет_неповна_частка(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // підносить предмет до степеня
  дія предмет_степінь(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // зсуває предмет вліво
  дія предмет_вліво(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // зсуває предмет вправо з заповненням
  дія предмет_вправо_зі_заповненням(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // виконує двійкове І
  дія предмет_двійкове_і(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // виконує двійкове АБО
  дія предмет_двійкове_або(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // виконує двійкове виключне АБО
  дія предмет_двійкове_виключне_або(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // виконує двійкове НЕ
  дія предмет_двійкове_не(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат;

  // перевіряє чи предмет більше іншого предмета
  дія предмет_більше(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // перевіряє чи предмет менше іншого предмета
  дія предмет_менше(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // перевіряє чи предмет рівний іншому предмету
  дія предмет_рівно(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // перевіряє чи предмет містить інший предмет
  дія предмет_містить(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // перевіряє чи предмет є певної структури
  дія предмет_є(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат;

  // негація
  дія предмет_відʼємне(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат;

  // перетворює предмет в число
  дія предмет_числове(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат;

  // заперечення
  дія предмет_заперечити(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат;

  // збільшує предмет
  дія предмет_збільшити(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат;

  // зменшує предмет
  дія предмет_зменшити(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат;

  // отримує значення числа з предмета
  // попередньо необхідно впевнитись, що предмет є числом
  дія отримати_значення_числа(предмет: адреса<Предмет>, Р: адреса<Розширення>): д64;

  // виділяє памʼять
  дія виділити<Т>(Р: адреса<Розширення>): адреса<Т>;

  // виділяє памʼять
  дія виділити<Т>(Р: адреса<Розширення>, кількість: позитивне): памʼять<Т>;

  // обробляє падіння, яке неможливо вернути
  дія обробити_падіння(Р: адреса<Розширення>, падіння: адреса<Падіння>, значення: адреса<Предмет>);

  // звільняє памʼять
  дія звільнити(Р: адреса<Розширення>, значення: адреса);

  // перевіряє чи предмет є дією
  дія перевірити_чи_предмет_є_дією(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // перевіряє чи предмет є нативною дією
  дія перевірити_чи_предмет_є_нативною_дією(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // перевіряє чи предмет є числом
  дія перевірити_чи_предмет_є_числом(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // перевіряє чи предмет є текстом
  дія перевірити_чи_предмет_є_текстом(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // перевіряє чи предмет є юнікодом
  дія перевірити_чи_предмет_є_юнікодом(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // перевіряє чи предмет є модулем
  дія перевірити_чи_предмет_є_модулем(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // перевіряє чи предмет є списком
  дія перевірити_чи_предмет_є_списком(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // перевіряє чи предмет є словником
  дія перевірити_чи_предмет_є_словником(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // перевіряє чи предмет є логічним
  дія перевірити_чи_предмет_є_логічним(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // перевіряє чи предмет є байтами
  дія перевірити_чи_предмет_є_байтами(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // перевіряє копію даних тексту
  дія отримати_копію_даних_тексту_як_т8(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<т8>): логічне;

  // отримує дані тексту
  дія отримати_дані_тексту(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<т8>): логічне;

  // отримує копію даних тексту як ю8
  дія отримати_копію_даних_юнікоду(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: невідома_адреса): логічне;

  // отримує дані юнікоду
  дія отримати_дані_юнікоду(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: невідома_адреса): логічне;

  // отримує копію даних юнікоду як ю8
  дія отримати_копію_даних_юнікоду_як_ю8(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<ю8>): логічне;

  // отримує копію даних байтів
  дія отримати_копію_даних_байтів(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>): позитивне;

  // отримує дані байтів
  дія отримати_дані_байтів(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>): позитивне;

  // створює предмет байтів
  дія створити_байти(Р: адреса<Розширення>, розмір: позитивне): адреса<Предмет>;

  // копіює дані в предмет байтів
  дія записати_в_байти(предмет: адреса<Предмет>, Р: адреса<Розширення>, дані: памʼять<п8>, розмір: позитивне, зсув: позитивне);

  // отримує копію елементів словника
  дія отримати_копію_елементів_словника(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<ЕлементСловника>>): позитивне;

  // перевиділяє памʼять
  дія перевиділити<Т>(Р: адреса<Розширення>, значення: памʼять<Т>, нова_кількість: позитивне): памʼять<Т>;

  // отримує іменований аргумент, вертає "ні" якщо аргументу немає
  дія знайти_іменований_аргумент(Р: адреса<Розширення>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Назва>, вихід: адреса<адреса<Предмет>>): логічне;

  // записує іменований аргумент
  дія записати_іменований_аргумент(Р: адреса<Розширення>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Назва>, значення: адреса<Предмет>);

  // виділяє іменовані аргументи
  дія виділити_іменовані_аргументи(Р: адреса<Розширення>): адреса<ІменованіАргументи>;

  // звільняє іменовані аргументи
  дія звільнити_іменовані_аргументи(Р: адреса<Розширення>, іменовані_аргументи: адреса<ІменованіАргументи>);

  // створює предмет адреси
  дія створити_адресу(Р: адреса<Розширення>, значення: адреса): адреса<Предмет>;

  // отримує адресу з предмета адреси
  дія отримати_значення_адреси(предмет: адреса<Предмет>, Р: адреса<Розширення>): адреса;

  // перевіряє чи предмет є адресою
  дія перевірити_чи_предмет_є_адресою(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне;

  // отримує копію елементів списку
  дія отримати_копію_елементів_списку(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<адреса<Предмет>>>): позитивне;

  // отримує копію даних тексту як ю8сі
  дія отримати_копію_даних_тексту_як_ю8сі(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>): позитивне;

  // отримує копію даних юнікоду як ю8сі
  дія отримати_копію_даних_юнікоду_як_ю8сі(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>): позитивне;

  // створює предмет юнікоду з ю8сі (UTF-8)
  дія створити_юнікод_з_ю8сі(Р: адреса<Розширення>, значення: памʼять<п8>): адреса<Предмет>;

  // дозволяє отримати назву з тексту
  дія назва_з_т8(Р: адреса<Розширення>, значення: т8): адреса<Назва>;

  // створює предмет тексту з тексту Цілі
  дія створити_текст_з_т8(Р: адреса<Розширення>, значення: т8): адреса<Предмет>;
}

секція РМв1 {
  дія виділити_падіння(Р: адреса<Розширення>): адреса<Падіння> {
    вернути Р.виділити_падіння(Р);
  }

  дія звільнити_падіння(Р: адреса<Розширення>, падіння: адреса<Падіння>) {
    Р.звільнити_падіння(Р, падіння);
  }

  дія успіх(Р: адреса<Розширення>, значення: адреса<Предмет>): Результат {
    вернути Результат {
      падіння = пусто,
      значення = значення
    };
  }

  дія падіння(Р: адреса<Розширення>, значення: адреса<Предмет>): Результат {
    вернути Результат {
      падіння = виділити_падіння(Р),
      значення = значення
    };
  }

  дія записати_дані_розширення(Р: адреса<Розширення>, дані: адреса) {
    Р.дані = дані;
  }

  дія отримати_дані_розширення(Р: адреса<Розширення>): невідома_адреса {
    вернути Р.дані;
  }

  дія надрукувати_ю8(Р: адреса<Розширення>, значення: ю8) {
    Р.надрукувати_ю8(Р, значення);
  }

  дія надрукувати_предмет(Р: адреса<Розширення>, предмет: адреса<Предмет>, глибина: позитивне) {
    Р.надрукувати_предмет(Р, предмет, глибина);
  }

  дія взяти_файл_ю8(Р: адреса<Розширення>, назва_модуля: адреса<Назва>, шлях_до_файлу: ю8): Результат {
    вернути Р.взяти_файл_ю8(Р, назва_модуля, шлях_до_файлу);
  }

  дія притримати_предмет(Р: адреса<Розширення>, предмет: адреса<Предмет>) {
    Р.притримати_предмет(Р, предмет);
  }

  дія відпустити_предмет(Р: адреса<Розширення>) {
    Р.відпустити_предмет(Р);
  }

  дія назва_з_ю8(Р: адреса<Розширення>, значення: ю8): адреса<Назва> {
    вернути Р.назва_з_ю8(Р, значення);
  }

  дія створити_нативну_дію(Р: адреса<Розширення>, назва: адреса<Назва>, значення: НативнаДія, дані: невідома_адреса, відклик_перед_звільненням: ВідкликПередЗвільненнямПредметаНативноїДії): адреса<Предмет> {
    вернути Р.створити_нативну_дію(Р, назва, значення, дані, відклик_перед_звільненням);
  }

  дія створити_число(Р: адреса<Розширення>, значення: д64): адреса<Предмет> {
    вернути Р.створити_число(Р, значення);
  }

  дія створити_текст_з_ю8(Р: адреса<Розширення>, значення: ю8): адреса<Предмет> {
    вернути Р.створити_текст_з_ю8(Р, значення);
  }

  дія створити_юнікод_з_ю8(Р: адреса<Розширення>, значення: ю8): адреса<Предмет> {
    вернути Р.створити_юнікод_з_ю8(Р, значення);
  }

  дія створити_модуль(Р: адреса<Розширення>, назва: адреса<Назва>): адреса<Предмет> {
    вернути Р.створити_модуль(Р, назва);
  }

  дія створити_список(Р: адреса<Розширення>): адреса<Предмет> {
    вернути Р.створити_список(Р);
  }

  дія створити_словник(Р: адреса<Розширення>): адреса<Предмет> {
    вернути Р.створити_словник(Р);
  }

  дія створити_предмет(Р: адреса<Розширення>): адреса<Предмет> {
    вернути Р.створити_предмет(Р);
  }

  дія предмет_виконати(предмет: адреса<Предмет>, Р: адреса<Розширення>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>): Результат {
    вернути Р.предмет_виконати(предмет, Р, предмет_я, кількість_аргументів, аргументи, іменовані_аргументи);
  }

  дія предмет_отримати_властивість(предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>): Результат {
    вернути Р.предмет_отримати_властивість(предмет, Р, назва);
  }

  дія предмет_змінити_властивість(предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>, значення: адреса<Предмет>): Результат {
    вернути Р.предмет_змінити_властивість(предмет, Р, назва, значення);
  }

  дія предмет_видалити_властивість(предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>): Результат {
    вернути Р.предмет_видалити_властивість(предмет, Р, назва);
  }

  дія предмет_виконати_властивість(предмет: адреса<Предмет>, Р: адреса<Розширення>, назва: адреса<Назва>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>): Результат {
    вернути Р.предмет_виконати_властивість(предмет, Р, назва, кількість_аргументів, аргументи, іменовані_аргументи);
  }

  дія предмет_отримати_елемент(предмет: адреса<Предмет>, Р: адреса<Розширення>, ключ: адреса<Предмет>): Результат {
    вернути Р.предмет_отримати_елемент(предмет, Р, ключ);
  }

  дія предмет_змінити_елемент(предмет: адреса<Предмет>, Р: адреса<Розширення>, ключ: адреса<Предмет>, значення: адреса<Предмет>): Результат {
    вернути Р.предмет_змінити_елемент(предмет, Р, ключ, значення);
  }

  дія предмет_видалити_елемент(предмет: адреса<Предмет>, Р: адреса<Розширення>, ключ: адреса<Предмет>): Результат {
    вернути Р.предмет_видалити_елемент(предмет, Р, ключ);
  }

  дія предмет_отримати_перебір(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат {
    вернути Р.предмет_отримати_перебір(предмет, Р);
  }

  дія предмет_додати(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_додати(предмет, Р, аргумент);
  }

  дія предмет_відняти(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_відняти(предмет, Р, аргумент);
  }

  дія предмет_помножити(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_помножити(предмет, Р, аргумент);
  }

  дія предмет_поділити(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_поділити(предмет, Р, аргумент);
  }

  дія предмет_остача(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_остача(предмет, Р, аргумент);
  }

  дія предмет_неповна_частка(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_неповна_частка(предмет, Р, аргумент);
  }

  дія предмет_степінь(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_степінь(предмет, Р, аргумент);
  }

  дія предмет_вліво(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_вліво(предмет, Р, аргумент);
  }

  дія предмет_вправо_зі_заповненням(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_вправо_зі_заповненням(предмет, Р, аргумент);
  }

  дія предмет_двійкове_і(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_двійкове_і(предмет, Р, аргумент);
  }

  дія предмет_двійкове_або(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_двійкове_або(предмет, Р, аргумент);
  }

  дія предмет_двійкове_виключне_або(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_двійкове_виключне_або(предмет, Р, аргумент);
  }

  дія предмет_двійкове_не(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат {
    вернути Р.предмет_двійкове_не(предмет, Р);
  }

  дія предмет_більше(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_більше(предмет, Р, аргумент);
  }

  дія предмет_менше(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_менше(предмет, Р, аргумент);
  }

  дія предмет_рівно(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_рівно(предмет, Р, аргумент);
  }

  дія предмет_містить(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_містить(предмет, Р, аргумент);
  }

  дія предмет_є(предмет: адреса<Предмет>, Р: адреса<Розширення>, аргумент: адреса<Предмет>): Результат {
    вернути Р.предмет_є(предмет, Р, аргумент);
  }

  дія предмет_відʼємне(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат {
    вернути Р.предмет_відʼємне(предмет, Р);
  }

  дія предмет_числове(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат {
    вернути Р.предмет_числове(предмет, Р);
  }

  дія предмет_заперечити(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат {
    вернути Р.предмет_заперечити(предмет, Р);
  }

  дія предмет_збільшити(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат {
    вернути Р.предмет_збільшити(предмет, Р);
  }

  дія предмет_зменшити(предмет: адреса<Предмет>, Р: адреса<Розширення>): Результат {
    вернути Р.предмет_зменшити(предмет, Р);
  }

  дія отримати_значення_числа(предмет: адреса<Предмет>, Р: адреса<Розширення>): д64 {
    вернути Р.отримати_значення_числа(предмет, Р);
  }

  дія виділити<Т>(Р: адреса<Розширення>): адреса<Т> {
    вернути Р.виділити(Р, Т.розмір) як адреса<Т>;
  }

  дія виділити<Т>(Р: адреса<Розширення>, кількість: позитивне): памʼять<Т> {
    вернути Р.виділити(Р, кількість * Т.розмір) як памʼять<Т>;
  }

  дія обробити_падіння(Р: адреса<Розширення>, падіння: адреса<Падіння>, значення: адреса<Предмет>) {
    Р.обробити_падіння(Р, падіння, значення);
  }

  дія звільнити(Р: адреса<Розширення>, значення: адреса) {
    Р.звільнити(Р, значення);
  }

  дія перевірити_чи_предмет_є_дією(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_дією(предмет, Р);
  }

  дія перевірити_чи_предмет_є_нативною_дією(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_нативною_дією(предмет, Р);
  }

  дія перевірити_чи_предмет_є_числом(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_числом(предмет, Р);
  }

  дія перевірити_чи_предмет_є_текстом(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_текстом(предмет, Р);
  }

  дія перевірити_чи_предмет_є_юнікодом(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_юнікодом(предмет, Р);
  }

  дія перевірити_чи_предмет_є_модулем(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_модулем(предмет, Р);
  }

  дія перевірити_чи_предмет_є_списком(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_списком(предмет, Р);
  }

  дія перевірити_чи_предмет_є_словником(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_словником(предмет, Р);
  }

  дія перевірити_чи_предмет_є_логічним(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_логічним(предмет, Р);
  }

  дія перевірити_чи_предмет_є_байтами(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_байтами(предмет, Р);
  }

  дія отримати_копію_даних_тексту_як_т8(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<т8>): логічне {
    вернути Р.отримати_копію_даних_тексту_як_т8(предмет, Р, вихід);
  }

  дія отримати_дані_тексту(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<т8>): логічне {
    вернути Р.отримати_дані_тексту(предмет, Р, вихід);
  }

  дія отримати_копію_даних_юнікоду(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: невідома_адреса): логічне {
    вернути Р.отримати_копію_даних_юнікоду(предмет, Р, вихід);
  }

  дія отримати_дані_юнікоду(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: невідома_адреса): логічне {
    вернути Р.отримати_дані_юнікоду(предмет, Р, вихід);
  }

  дія отримати_копію_даних_юнікоду_як_ю8(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<ю8>): логічне {
    вернути Р.отримати_копію_даних_юнікоду_як_ю8(предмет, Р, вихід);
  }

  дія отримати_копію_даних_байтів(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути Р.отримати_копію_даних_байтів(предмет, Р, вихід);
  }

  дія отримати_дані_байтів(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути Р.отримати_дані_байтів(предмет, Р, вихід);
  }

  дія створити_байти(Р: адреса<Розширення>, розмір: позитивне): адреса<Предмет> {
    вернути Р.створити_байти(Р, розмір);
  }

  дія записати_в_байти(предмет: адреса<Предмет>, Р: адреса<Розширення>, дані: памʼять<п8>, розмір: позитивне, зсув: позитивне) {
    Р.записати_в_байти(предмет, Р, дані, розмір, зсув);
  }

  дія отримати_копію_елементів_словника(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<ЕлементСловника>>): позитивне {
    вернути Р.отримати_копію_елементів_словника(предмет, Р, вихід);
  }

  дія перевиділити<Т>(Р: адреса<Розширення>, значення: памʼять<Т>, нова_кількість: позитивне): памʼять<Т> {
    вернути Р.перевиділити(Р, значення як памʼять<п8>, нова_кількість * Т.розмір) як памʼять<Т>;
  }

  дія знайти_іменований_аргумент(Р: адреса<Розширення>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Назва>, вихід: адреса<адреса<Предмет>>): логічне {
    вернути Р.знайти_іменований_аргумент(Р, іменовані_аргументи, назва, вихід);
  }

  дія записати_іменований_аргумент(Р: адреса<Розширення>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Назва>, значення: адреса<Предмет>) {
    Р.записати_іменований_аргумент(Р, іменовані_аргументи, назва, значення);
  }

  дія виділити_іменовані_аргументи(Р: адреса<Розширення>): адреса<ІменованіАргументи> {
    вернути Р.виділити_іменовані_аргументи(Р);
  }

  дія звільнити_іменовані_аргументи(Р: адреса<Розширення>, іменовані_аргументи: адреса<ІменованіАргументи>) {
    Р.звільнити_іменовані_аргументи(Р, іменовані_аргументи);
  }

  дія створити_адресу(Р: адреса<Розширення>, значення: адреса): адреса<Предмет> {
    вернути Р.створити_адресу(Р, значення);
  }

  дія отримати_значення_адреси(предмет: адреса<Предмет>, Р: адреса<Розширення>): невідома_адреса {
    вернути Р.отримати_значення_адреси(предмет, Р);
  }

  дія перевірити_чи_предмет_є_адресою(предмет: адреса<Предмет>, Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_предмет_є_адресою(предмет, Р);
  }

  дія отримати_копію_елементів_списку(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<адреса<Предмет>>>): позитивне {
    вернути Р.отримати_копію_елементів_списку(предмет, Р, вихід);
  }

  дія отримати_копію_даних_тексту_як_ю8сі(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути Р.отримати_копію_даних_тексту_як_ю8сі(предмет, Р, вихід);
  }

  дія отримати_копію_даних_юнікоду_як_ю8сі(предмет: адреса<Предмет>, Р: адреса<Розширення>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути Р.отримати_копію_даних_юнікоду_як_ю8сі(предмет, Р, вихід);
  }

  дія створити_юнікод_з_ю8сі(Р: адреса<Розширення>, значення: памʼять<п8>): адреса<Предмет> {
    вернути Р.створити_юнікод_з_ю8сі(Р, значення);
  }

  дія назва_з_т8(Р: адреса<Розширення>, значення: т8): адреса<Назва> {
    вернути Р.назва_з_т8(Р, значення);
  }

  дія створити_текст_з_т8(Р: адреса<Розширення>, значення: т8): адреса<Предмет> {
    вернути Р.створити_текст_з_т8(Р, значення);
  }
}