////
// Визначення для вбудовування Мавки 0.112.0 у свій проєкт.
////

////
// Автор це Богданович Давид Когут Прихожденко та Організація М та Організація Організацій
////

секція МаМа {
  структура Машина;
}

// Доступні публічні структури Мавки.
// Не отримуйте властивості їх предметів напряму, а натомість використовуйте публічні дії нижче.
секція мавка {
  синонім ВЕРСІЯ_З = 0;
  синонім ВЕРСІЯ_М = 113;
  синонім ВЕРСІЯ_В = 0;

  структура Система {
    виділити_сиру_памʼять: (розмір: позитивне) -> памʼять<п8>;
    перевиділити_сиру_памʼять: (значення: памʼять<п8>, новий_розмір: позитивне) -> памʼять<п8>;
    звільнити_сиру_памʼять: (значення: памʼять<п8>) -> ніщо;
    вивести_в_стандартний_вивід: (значення: памʼять<п8>, розмір: позитивне) -> ніщо;
    вивести_т8_в_стандартний_вивід: (значення: т8) -> ніщо;
    вивести_ю8_в_стандартний_вивід: (значення: ю8) -> ніщо;
    вийти_з_процесу: (код: ц32) -> ніщо;
    отримати_абсолютний_шлях: (шлях: ю8, вихід: адреса<ю8>) -> логічне;
    отримати_абсолютний_батьківський_шлях: (шлях: ю8, вихід: адреса<ю8>) -> логічне;
    прочитати_файл: (шлях: ю8, вихід: адреса<ю8>) -> логічне;
    прочитати_ю8_зі_стандартного_вводу: (префікс: ю8, вихід: адреса<ю8>) -> логічне;
    прочитати_т8_зі_стандартного_вводу: (префікс: т8, вихід: адреса<т8>) -> логічне;
    відкрити_поширену_бібліотеку: (шлях: памʼять<п8>, розмір_шляху: позитивне) -> невідома_адреса;
    закрити_поширену_бібліотеку: (поширена_бібліотека: невідома_адреса) -> ніщо;
    отримати_символ_поширеної_бібліотеки: (поширена_бібліотека: невідома_адреса, назва_символа: памʼять<п8>, розмір_назви_символа: позитивне) -> невідома_адреса;
  }

  структура Обчислювач {
    система: Система;
    М: адреса<МаМа::Машина>;
  }

  структура Предмет; // властивості приховано
  структура Назва; // властивості приховано
  структура ІменованіАргументи; // властивості приховано
  структура Система;
  структура МісцезнаходженняПадіння;
  структура ЕлементІсторіїПадіння;
  структура Падіння;
  структура Результат;

  структура МісцезнаходженняПадіння {
    шлях_до_файлу: ю8;
    рядок: позитивне;
  }

  структура ЕлементІсторіїПадіння {
    шлях_до_файлу: ю8;
    рядок: позитивне;
    назва_дії: адреса<Назва>;
  }

  структура Падіння {
    місцезнаходження: адреса<МісцезнаходженняПадіння>;
    розмір_історії: позитивне;
    історія: памʼять<ЕлементІсторіїПадіння>;
  }

  структура Результат {
    падіння: адреса<Падіння>;
    значення: адреса<Предмет>;
  }

  структура ЕлементСловника {
    ключ: адреса<Предмет>;
    значення: адреса<Предмет>;
  }
}

// Публічні дії, що можна вільно використовувати.
секція мавка {
  секція система {
    зовнішня дія виділити_сиру_памʼять(обчислювач: адреса<Обчислювач>, розмір: позитивне): памʼять<п8>;
    зовнішня дія перевиділити_сиру_памʼять(обчислювач: адреса<Обчислювач>, значення: памʼять<п8>, новий_розмір: позитивне): памʼять<п8>;
    зовнішня дія звільнити_сиру_памʼять(обчислювач: адреса<Обчислювач>, значення: памʼять<п8>): ніщо;
    зовнішня дія вивести_в_стандартний_вивід(обчислювач: адреса<Обчислювач>, значення: памʼять<п8>, розмір: позитивне): ніщо;
    зовнішня дія вивести_т8_в_стандартний_вивід(обчислювач: адреса<Обчислювач>, значення: т8): ніщо;
    зовнішня дія вивести_ю8_в_стандартний_вивід(обчислювач: адреса<Обчислювач>, значення: ю8): ніщо;
    зовнішня дія вийти_з_процесу(обчислювач: адреса<Обчислювач>, код: ц32): ніщо;
    зовнішня дія отримати_абсолютний_шлях(обчислювач: адреса<Обчислювач>, шлях: ю8, вихід: адреса<ю8>): логічне;
    зовнішня дія отримати_абсолютний_батьківський_шлях(обчислювач: адреса<Обчислювач>, шлях: ю8, вихід: адреса<ю8>): логічне;
    зовнішня дія прочитати_файл(обчислювач: адреса<Обчислювач>, шлях: ю8, вихід: адреса<ю8>): логічне;
    зовнішня дія прочитати_ю8_зі_стандартного_вводу(обчислювач: адреса<Обчислювач>, префікс: ю8, вихід: адреса<ю8>): логічне;
    зовнішня дія прочитати_т8_зі_стандартного_вводу(обчислювач: адреса<Обчислювач>, префікс: т8, вихід: адреса<т8>): логічне;
    зовнішня дія відкрити_поширену_бібліотеку(обчислювач: адреса<Обчислювач>, шлях: памʼять<п8>, розмір_шляху: позитивне): невідома_адреса;
    зовнішня дія закрити_поширену_бібліотеку(обчислювач: адреса<Обчислювач>, поширена_бібліотека: невідома_адреса);
    зовнішня дія отримати_символ_поширеної_бібліотеки(обчислювач: адреса<Обчислювач>, поширена_бібліотека: невідома_адреса, назва_символа: памʼять<п8>, розмір_назви_символа: позитивне): невідома_адреса;
  }
}

секція мавка {
  дія виділити<Т>(обчислювач: адреса<Обчислювач>): адреса<Т>;
  дія перевиділити<Т>(обчислювач: адреса<Обчислювач>, значення: адреса<Т>, кількість: позитивне): памʼять<Т>;
  дія звільнити(обчислювач: адреса<Обчислювач>, значення: невідома_адреса);
  дія виділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, кількість: позитивне): памʼять<Т>;
  дія перевиділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т>;
  дія звільнити_памʼять(обчислювач: адреса<Обчислювач>, значення: невідома_памʼять);

  дія виділити<Т>(обчислювач: адреса<Обчислювач>): адреса<Т> {
    вернути система::виділити_сиру_памʼять(обчислювач, Т.розмір) як адреса<Т>;
  }

  дія перевиділити<Т>(обчислювач: адреса<Обчислювач>, значення: адреса<Т>, кількість: позитивне): памʼять<Т> {
    вернути система::перевиділити_сиру_памʼять(обчислювач, значення як памʼять<п8>, кількість * Т.розмір) як памʼять<Т>;
  }

  дія звільнити(обчислювач: адреса<Обчислювач>, значення: невідома_адреса) {
    система::звільнити_сиру_памʼять(обчислювач, значення як памʼять<п8>);
  }

  дія виділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, кількість: позитивне): памʼять<Т> {
    вернути система::виділити_сиру_памʼять(обчислювач, кількість * Т.розмір) як памʼять<Т>;
  }

  дія перевиділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т> {
    вернути система::перевиділити_сиру_памʼять(обчислювач, значення як памʼять<п8>, кількість * Т.розмір) як памʼять<Т>;
  }

  дія звільнити_памʼять(обчислювач: адреса<Обчислювач>, значення: невідома_памʼять) {
    система::звільнити_сиру_памʼять(обчислювач, значення як памʼять<п8>);
  }

  синонім НативнаДія = (предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: невідома_адреса) -> Результат;
  синонім ВідкликПередЗвільненнямПредметаНативноїДії = (предмет_нативної_дії: адреса<Предмет>, обчислювач: адреса<Обчислювач>, дані: невідома_адреса) -> ніщо;

  зовнішня дія створити_обчислювач(система: Система): адреса<Обчислювач>;
  зовнішня дія знищити_обчислювач(обчислювач: адреса<Обчислювач>);
  зовнішня дія почати_діалог(обчислювач: адреса<Обчислювач>): Результат;
  зовнішня дія взяти_файл_ю8(обчислювач: адреса<Обчислювач>, назва_модуля: адреса<Назва>, шлях_до_файлу: ю8): Результат;
  зовнішня дія виконати_ю8(обчислювач: адреса<Обчислювач>, значення: ю8): Результат;
  зовнішня дія притримати_предмет(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>);
  зовнішня дія відпустити_предмет(обчислювач: адреса<Обчислювач>);
  зовнішня дія назва_з_ю8(обчислювач: адреса<Обчислювач>, значення: ю8): адреса<Назва>;
  зовнішня дія отримати_так(обчислювач: адреса<Обчислювач>): адреса<Предмет>;
  зовнішня дія отримати_ні(обчислювач: адреса<Обчислювач>): адреса<Предмет>;
  зовнішня дія визначити_глобальний_підмет(обчислювач: адреса<Обчислювач>, назва: адреса<Назва>, предмет: адреса<Предмет>);

  зовнішня дія створити_нативну_дію(обчислювач: адреса<Обчислювач>, назва: адреса<Назва>, значення: НативнаДія, дані: адреса, відклик_перед_звільненням: ВідкликПередЗвільненнямПредметаНативноїДії): адреса<Предмет>;
  зовнішня дія створити_число(обчислювач: адреса<Обчислювач>, значення: д64): адреса<Предмет>;
  зовнішня дія створити_текст_з_ю8(обчислювач: адреса<Обчислювач>, значення: ю8): адреса<Предмет>;
  зовнішня дія створити_юнікод_з_ю8(обчислювач: адреса<Обчислювач>, значення: ю8): адреса<Предмет>;
  зовнішня дія створити_модуль(обчислювач: адреса<Обчислювач>, назва: адреса<Назва>): адреса<Предмет>;
  зовнішня дія створити_список(обчислювач: адреса<Обчислювач>): адреса<Предмет>;
  зовнішня дія створити_словник(обчислювач: адреса<Обчислювач>): адреса<Предмет>;
  зовнішня дія створити_байти(обчислювач: адреса<Обчислювач>, розмір: позитивне): адреса<Предмет>;
  зовнішня дія створити_адресу(обчислювач: адреса<Обчислювач>, значення: невідома_адреса): адреса<Предмет>;
  зовнішня дія створити_предмет(обчислювач: адреса<Обчислювач>): адреса<Предмет>;

  зовнішня дія предмет_виконати(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>): Результат;
  зовнішня дія предмет_отримати_властивість(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, назва: адреса<Назва>): Результат;
  зовнішня дія предмет_змінити_властивість(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, назва: адреса<Назва>, значення: адреса<Предмет>): Результат;
  зовнішня дія предмет_видалити_властивість(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, назва: адреса<Назва>): Результат;
  зовнішня дія предмет_виконати_властивість(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, назва: адреса<Назва>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>): Результат;
  зовнішня дія предмет_отримати_елемент(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, ключ: адреса<Предмет>): Результат;
  зовнішня дія предмет_змінити_елемент(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, ключ: адреса<Предмет>, значення: адреса<Предмет>): Результат;
  зовнішня дія предмет_видалити_елемент(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, ключ: адреса<Предмет>): Результат;
  зовнішня дія предмет_отримати_перебір(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): Результат;
  зовнішня дія предмет_додати(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_відняти(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_помножити(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_поділити(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_остача(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_неповна_частка(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_степінь(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_вліво(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_вправо_зі_заповненням(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_двійкове_і(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_двійкове_або(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_двійкове_виключне_або(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_двійкове_не(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): Результат;
  зовнішня дія предмет_більше(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_менше(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_рівно(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_містить(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_є(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, аргумент: адреса<Предмет>): Результат;
  зовнішня дія предмет_відʼємне(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): Результат;
  зовнішня дія предмет_числове(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): Результат;
  зовнішня дія предмет_заперечити(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): Результат;
  зовнішня дія предмет_збільшити(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): Результат;
  зовнішня дія предмет_зменшити(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): Результат;

  зовнішня дія результат_успіх(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): Результат;
  зовнішня дія результат_падіння(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>): Результат;
  зовнішня дія виділити_падіння(обчислювач: адреса<Обчислювач>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>, розмір_історії: позитивне, історія: памʼять<ЕлементІсторіїПадіння>): адреса<Падіння>;
  зовнішня дія звільнити_падіння(обчислювач: адреса<Обчислювач>, падіння: адреса<Падіння>);
  зовнішня дія виділити_місцезнаходження_падіння(обчислювач: адреса<Обчислювач>, шлях_до_файлу: ю8, рядок: позитивне): адреса<МісцезнаходженняПадіння>;
  зовнішня дія звільнити_місцезнаходження_падіння(обчислювач: адреса<Обчислювач>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>);
  зовнішня дія отримати_шлях_до_файлу_з_місцезнаходження_падіння(обчислювач: адреса<Обчислювач>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>): ю8;
  зовнішня дія отримати_рядок_з_місцезнаходження_падіння(обчислювач: адреса<Обчислювач>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>): позитивне;
  зовнішня дія отримати_текстове_зображення_предмета_як_ю8(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, вихід: адреса<ю8>): позитивне;

  зовнішня дія перевірити_чи_предмет_виражається_логічним_так(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_дією(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_нативною_дією(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_числом(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_текстом(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_юнікодом(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_модулем(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_списком(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_словником(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_логічним(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_байтами(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія перевірити_чи_предмет_є_адресою(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): логічне;

  зовнішня дія записати_в_байти(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, дані: памʼять<п8>, розмір: позитивне, зсув: позитивне);

  зовнішня дія отримати_значення_числа(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): д64;
  зовнішня дія отримати_копію_даних_тексту_як_т8(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, вихід: адреса<т8>): логічне;
  зовнішня дія отримати_дані_тексту(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, вихід: адреса<т8>): логічне;
  зовнішня дія отримати_копію_даних_юнікоду(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, вихід: адреса<ю32>): логічне;
  зовнішня дія отримати_дані_юнікоду(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, вихід: адреса<ю32>): логічне;
  зовнішня дія отримати_копію_даних_юнікоду_як_ю8(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, вихід: адреса<ю8>): логічне;
  зовнішня дія отримати_копію_даних_байтів(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, вихід: адреса<памʼять<п8>>): позитивне;
  зовнішня дія отримати_дані_байтів(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, вихід: адреса<памʼять<п8>>): позитивне;
  зовнішня дія отримати_значення_адреси(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>): невідома_адреса;
  зовнішня дія отримати_копію_елементів_словника(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, вихід: адреса<памʼять<ЕлементСловника>>, вихід_розміру: адреса<позитивне>): логічне;
  зовнішня дія отримати_копію_елементів_списку(предмет: адреса<Предмет>, обчислювач: адреса<Обчислювач>, вихід: адреса<памʼять<адреса<Предмет>>>, вихід_розміру: адреса<позитивне>): логічне;

  зовнішня дія знайти_іменований_аргумент(обчислювач: адреса<Обчислювач>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Назва>, вихід: адреса<адреса<Предмет>>): логічне;
  зовнішня дія записати_іменований_аргумент(обчислювач: адреса<Обчислювач>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Назва>, значення: адреса<Предмет>);
  зовнішня дія виділити_іменовані_аргументи(обчислювач: адреса<Обчислювач>): адреса<ІменованіАргументи>;
  зовнішня дія звільнити_іменовані_аргументи(обчислювач: адреса<Обчислювач>, іменовані_аргументи: адреса<ІменованіАргументи>);

  зовнішня дія вивести_ю8(обчислювач: адреса<Обчислювач>, значення: ю8);
  зовнішня дія надрукувати_ю8(обчислювач: адреса<Обчислювач>, значення: ю8);
  зовнішня дія надрукувати_предмет(обчислювач: адреса<Обчислювач>, значення: адреса<Предмет>);
  зовнішня дія вивести_п64(обчислювач: адреса<Обчислювач>, значення: п64);

  зовнішня дія надрукувати_ю8_і_вийти_з_процесу(обчислювач: адреса<Обчислювач>, повідомлення: ю8);
}

секція мавка {
  секція допоміжне {
    зовнішня дія виділити_копію_т8(обчислювач: адреса<Обчислювач>, значення: т8, вихід: адреса<т8>): логічне;
    зовнішня дія виділити_копію_ю8(обчислювач: адреса<Обчислювач>, значення: ю8, вихід: адреса<ю8>): логічне;
    зовнішня дія виділити_копію_ю8_з_ю8сі(обчислювач: адреса<Обчислювач>, значення: памʼять<п8>, вихід: адреса<ю8>): логічне;
    зовнішня дія виділити_копію_ю8сі_з_ю8(обчислювач: адреса<Обчислювач>, значення: ю8, вихід: адреса<памʼять<п8>>): логічне;
    зовнішня дія виділити_копію_ю8сі_з_т8(обчислювач: адреса<Обчислювач>, значення: т8, вихід: адреса<памʼять<п8>>): логічне;
    зовнішня дія виділити_копію_ю8_з_т8(обчислювач: адреса<Обчислювач>, значення: т8, вихід: адреса<ю8>): логічне;
    зовнішня дія порахувати_розмір_ю8сі(значення: памʼять<п8>): позитивне;
    зовнішня дія перевірити_чи_ю8_рівні(а: ю8, б: ю8): логічне;
    зовнішня дія перевірити_чи_т8_рівні(а: т8, б: т8): логічне;
    зовнішня дія перетворити_ю8_в_п64(значення: ю8): п64;
    зовнішня дія перетворити_ю8_в_ц64(значення: ю8): ц64;
    зовнішня дія перетворити_ю8_в_д64(значення: ю8): д64;
    зовнішня дія перетворити_п64_в_ю8(значення: п64, вихід: адреса<ю8>): логічне;
    зовнішня дія перетворити_ц64_в_ю8(значення: ц64, вихід: адреса<ю8>): логічне;
    зовнішня дія перетворити_д64_в_ю8(значення: д64, вихід: адреса<ю8>): логічне;
  }
}

секція мавка {
  секція математика {
    зовнішня дія синус_д64(значення: д64): д64;
    зовнішня дія косинус_д64(значення: д64): д64;
    зовнішня дія тангенс_д64(значення: д64): д64;
    зовнішня дія арксинус_д64(значення: д64): д64;
    зовнішня дія арккосинус_д64(значення: д64): д64;
    зовнішня дія арктангенс_д64(значення: д64): д64;
    зовнішня дія арктангенс2_д64(а: д64, б: д64): д64;
    зовнішня дія абсолютне_д64(значення: д64): д64;
    зовнішня дія експонента_д64(значення: д64): д64;
    зовнішня дія корінь_д64(значення: д64): д64;
    зовнішня дія степінь_д64(а: д64, б: д64): д64;
    зовнішня дія стеля_д64(значення: д64): д64;
    зовнішня дія підлога_д64(значення: д64): д64;
    зовнішня дія округлити_д64(значення: д64): д64;
    зовнішня дія остача_від_ділення_д64(а: д64, б: д64): д64;
  }
}