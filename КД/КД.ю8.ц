/* КД 0.3.0 */

////
// Автор це Богданович Давид Когут Прихожденко та Організація Ц та Організація Організацій
////

взяти визначення ./КД;

секція КД {
  зовнішня дія отримати_символ_т8_з_ю32(символ_Ю32: п32, вихід_першого_байта: адреса<п8>, вихід_другого_байта: адреса<п8>, вихід_третього_байта: адреса<п8>, вихід_четвертого_байта: адреса<п8>, вихід_розміру: адреса<п8>): логічне {
    якщо символ_Ю32 == відповідні_символи_юнікоду::КІНЕЦЬ {
      вихід_першого_байта::вміст = символи::КІНЕЦЬ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПОЧАТОК {
      вихід_першого_байта::вміст = символи::ПОЧАТОК;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПЕРЕДВКАЗІВКА {
      вихід_першого_байта::вміст = символи::ПЕРЕДВКАЗІВКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МІЖРЯД {
      вихід_першого_байта::вміст = символи::МІЖРЯД;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВІДКРИТА_КВАДРАТНА_ДУГА {
      вихід_першого_байта::вміст = символи::ВІДКРИТА_КВАДРАТНА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВІДКРИТА_ФІГУРНА_ДУГА {
      вихід_першого_байта::вміст = символи::ВІДКРИТА_ФІГУРНА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВІДКРИТА_ДУГА {
      вихід_першого_байта::вміст = символи::ВІДКРИТА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МЕНШЕ {
      вихід_першого_байта::вміст = символи::МЕНШЕ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::СЕКЦІЯ {
      вихід_першого_байта::вміст = символи::СЕКЦІЯ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МІТКА {
      вихід_першого_байта::вміст = символи::МІТКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::АДРЕСА {
      вихід_першого_байта::вміст = символи::АДРЕСА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::НОМЕР {
      вихід_першого_байта::вміст = символи::НОМЕР;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ХРЕСТИК {
      вихід_першого_байта::вміст = символи::ХРЕСТИК;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ГРИВНЯ {
      вихід_першого_байта::вміст = символи::ГРИВНЯ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ДІЯ {
      вихід_першого_байта::вміст = символи::ДІЯ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЕНЕРГІЯ {
      вихід_першого_байта::вміст = символи::ЕНЕРГІЯ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::НУЛЬ {
      вихід_першого_байта::вміст = символи::НУЛЬ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ОДИН {
      вихід_першого_байта::вміст = символи::ОДИН;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ДВА {
      вихід_першого_байта::вміст = символи::ДВА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ТРИ {
      вихід_першого_байта::вміст = символи::ТРИ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЧОТИРИ {
      вихід_першого_байта::вміст = символи::ЧОТИРИ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПʼЯТЬ {
      вихід_першого_байта::вміст = символи::ПʼЯТЬ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ШІСТЬ {
      вихід_першого_байта::вміст = символи::ШІСТЬ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::СІМ {
      вихід_першого_байта::вміст = символи::СІМ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВІСІМ {
      вихід_першого_байта::вміст = символи::ВІСІМ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ДЕВʼЯТЬ {
      вихід_першого_байта::вміст = символи::ДЕВʼЯТЬ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЛАПКА {
      вихід_першого_байта::вміст = символи::ЛАПКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ДВОЛАПКА {
      вихід_першого_байта::вміст = символи::ДВОЛАПКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::КОСОЛАПКА {
      вихід_першого_байта::вміст = символи::КОСОЛАПКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПІДРИСКА {
      вихід_першого_байта::вміст = символи::ПІДРИСКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::РИСКА {
      вихід_першого_байта::вміст = символи::РИСКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::АПОСТРОФ {
      вихід_першого_байта::вміст = символи::АПОСТРОФ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_А {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_А;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Б {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Б;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_В {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_В;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Г {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Г;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Д {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Д;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Е {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Е;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Є {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Є;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ж {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Ж;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_З {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_З;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_И {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_И;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_І {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_І;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ї {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Ї;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Й {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Й;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_К {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_К;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Л {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Л;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_М {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_М;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Н {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Н;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_О {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_О;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_П {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_П;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Р {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Р;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_С {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_С;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Т {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Т;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_У {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_У;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ф {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Ф;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Х {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Х;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ц {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Ц;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ч {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Ч;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ш {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Ш;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Щ {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Щ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ь {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Ь;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ю {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Ю;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Я {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Я;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_а {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_а;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_б {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_б;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_в {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_в;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_г {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_г;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_д {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_д;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_е {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_е;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_є {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_є;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ж {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_ж;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_з {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_з;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_и {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_и;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_і {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_і;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ї {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_ї;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_й {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_й;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_к {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_к;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_л {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_л;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_м {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_м;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_н {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_н;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_о {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_о;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_п {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_п;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_р {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_р;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_с {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_с;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_т {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_т;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_у {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_у;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ф {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_ф;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_х {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_х;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ц {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_ц;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ч {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_ч;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ш {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_ш;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_щ {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_щ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ь {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_ь;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ю {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_ю;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_я {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_я;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ґ {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_БУКВА_Ґ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ё {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_СПЕЦ_БУКВА_Ё;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ъ {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_СПЕЦ_БУКВА_Ъ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ы {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_СПЕЦ_БУКВА_Ы;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Э {
      вихід_першого_байта::вміст = символи::ВЕЛИКА_СПЕЦ_БУКВА_Э;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ґ {
      вихід_першого_байта::вміст = символи::МАЛА_БУКВА_ґ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ё {
      вихід_першого_байта::вміст = символи::МАЛА_СПЕЦ_БУКВА_ё;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ъ {
      вихід_першого_байта::вміст = символи::МАЛА_СПЕЦ_БУКВА_ъ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ы {
      вихід_першого_байта::вміст = символи::МАЛА_СПЕЦ_БУКВА_ы;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_э {
      вихід_першого_байта::вміст = символи::МАЛА_СПЕЦ_БУКВА_э;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::КОМА {
      вихід_першого_байта::вміст = символи::КОМА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ДВОКРАПКА {
      вихід_першого_байта::вміст = символи::ДВОКРАПКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::КРАПКАКОМА {
      вихід_першого_байта::вміст = символи::КРАПКАКОМА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::КРАПКА {
      вихід_першого_байта::вміст = символи::КРАПКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПИТАННЯ {
      вихід_першого_байта::вміст = символи::ПИТАННЯ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ОКЛИК {
      вихід_першого_байта::вміст = символи::ОКЛИК;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ДОЛАР {
      вихід_першого_байта::вміст = символи::ДОЛАР;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВІДСОТОК {
      вихід_першого_байта::вміст = символи::ВІДСОТОК;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ГРАДУС {
      вихід_першого_байта::вміст = символи::ГРАДУС;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЗІРОЧКА {
      вихід_першого_байта::вміст = символи::ЗІРОЧКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::КОСА {
      вихід_першого_байта::вміст = символи::КОСА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПРЯМА {
      вихід_першого_байта::вміст = символи::ПРЯМА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА {
      вихід_першого_байта::вміст = символи::ОБЕРНЕНА_КОСА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::АМПЕРСАНД {
      вихід_першого_байта::вміст = символи::АМПЕРСАНД;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПІРАМІДКА {
      вихід_першого_байта::вміст = символи::ПІРАМІДКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ТИЛЬДА {
      вихід_першого_байта::вміст = символи::ТИЛЬДА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::РІВНО {
      вихід_першого_байта::вміст = символи::РІВНО;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::БІЛЬШЕ {
      вихід_першого_байта::вміст = символи::БІЛЬШЕ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЗАКРИТА_ДУГА {
      вихід_першого_байта::вміст = символи::ЗАКРИТА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЗАКРИТА_ФІГУРНА_ДУГА {
      вихід_першого_байта::вміст = символи::ЗАКРИТА_ФІГУРНА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЗАКРИТА_КВАДРАТНА_ДУГА {
      вихід_першого_байта::вміст = символи::ЗАКРИТА_КВАДРАТНА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПРОПУСК {
      вихід_першого_байта::вміст = символи::ПРОПУСК;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    вернути ні;
  }

  зовнішня дія перекодувати_ю8_в_т8(система: адреса<Система>, вхід: ю8, вихід: адреса<т8>, з_нульовим_байтом_в_кінці: логічне): логічне {
    змінна дані_виходу = виділити_памʼять<п8>(система, вхід.розмір * 4 + 1);
    змінна розмір_виходу: позитивне = 0;
    змінна п: позитивне = 0;
    поки п < вхід.розмір {
      ціль перший_байт = вхід.дані[п];
      ціль розмір_символа = дізнатись_розмір_символа_ю8(перший_байт);
      якщо розмір_символа == 1 {
        ціль символ_т8_0: п8 = 0;
        ціль символ_т8_1: п8 = 0;
        ціль символ_т8_2: п8 = 0;
        ціль символ_т8_3: п8 = 0;
        ціль символ_т8_розмір: п8 = 0;
        ціль успіх_отримання_т8_з_ю32 = отримати_символ_т8_з_ю32(п32(перший_байт), символ_т8_0::адреса, символ_т8_1::адреса, символ_т8_2::адреса, символ_т8_3::адреса, символ_т8_розмір::адреса);
        якщо успіх_отримання_т8_з_ю32 == ні {
          звільнити_памʼять(система, дані_виходу);
          вернути ні;
        }
        якщо символ_т8_розмір == 1 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
        } інакше якщо символ_т8_розмір == 2 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_1;
          розмір_виходу += 1;
        } інакше якщо символ_т8_розмір == 3 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_2;
          розмір_виходу += 1;
        } інакше якщо символ_т8_розмір == 4 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_3;
          розмір_виходу += 1;
        }
      } інакше якщо розмір_символа == 2 {
        п += 1;
        ціль другий_байт = вхід.дані[п];
        ціль символ_ю16 = п16((п16(перший_байт & 31) << 6) | п16(другий_байт & 63));
        ціль символ_т8_0: п8 = 0;
        ціль символ_т8_1: п8 = 0;
        ціль символ_т8_2: п8 = 0;
        ціль символ_т8_3: п8 = 0;
        ціль символ_т8_розмір: п8 = 0;
        ціль успіх_отримання_т8_з_ю32 = отримати_символ_т8_з_ю32(п32(символ_ю16), символ_т8_0::адреса, символ_т8_1::адреса, символ_т8_2::адреса, символ_т8_3::адреса, символ_т8_розмір::адреса);
        якщо успіх_отримання_т8_з_ю32 == ні {
          звільнити_памʼять(система, дані_виходу);
          вернути ні;
        }
        якщо символ_т8_розмір == 1 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
        } інакше якщо символ_т8_розмір == 2 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_1;
          розмір_виходу += 1;
        } інакше якщо символ_т8_розмір == 3 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_2;
          розмір_виходу += 1;
        } інакше якщо символ_т8_розмір == 4 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_3;
          розмір_виходу += 1;
        }
      } інакше якщо розмір_символа == 3 {
        п += 1;
        ціль другий_байт = вхід.дані[п];
        п += 1;
        ціль третій_байт = вхід.дані[п];
        ціль символ_ю32 = п32((п32(перший_байт & 15) << 12) | (п32(другий_байт & 63) << 6) | п32(третій_байт & 63));
        ціль символ_т8_0: п8 = 0;
        ціль символ_т8_1: п8 = 0;
        ціль символ_т8_2: п8 = 0;
        ціль символ_т8_3: п8 = 0;
        ціль символ_т8_розмір: п8 = 0;
        ціль успіх_отримання_т8_з_ю32 = отримати_символ_т8_з_ю32(символ_ю32, символ_т8_0::адреса, символ_т8_1::адреса, символ_т8_2::адреса, символ_т8_3::адреса, символ_т8_розмір::адреса);
        якщо успіх_отримання_т8_з_ю32 == ні {
          звільнити_памʼять(система, дані_виходу);
          вернути ні;
        }
        якщо символ_т8_розмір == 1 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
        } інакше якщо символ_т8_розмір == 2 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_1;
          розмір_виходу += 1;
        } інакше якщо символ_т8_розмір == 3 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_2;
          розмір_виходу += 1;
        } інакше якщо символ_т8_розмір == 4 {
          дані_виходу[розмір_виходу] = символ_т8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_т8_3;
          розмір_виходу += 1;
        }
      } інакше {
        звільнити_памʼять(система, дані_виходу);
        вернути ні;
      }
      п += 1;
    }
    якщо з_нульовим_байтом_в_кінці {
      дані_виходу[розмір_виходу] = 0;
    }
    вихід::вміст = т8 {
      розмір_виходу,
      дані_виходу
    };
    вернути так;
  }

  зовнішня дія перекодувати_ю8_в_ю32(система: адреса<Система>, вхід: ю8, вихід: адреса<ю32>, з_нульовим_байтом_в_кінці: логічне): логічне {
    змінна дані_виходу = виділити_памʼять<п32>(система, вхід.розмір + 1);
    змінна розмір_виходу: позитивне = 0;
    змінна п: позитивне = 0;
    поки п < вхід.розмір {
      ціль перший_байт = вхід.дані[п];
      ціль розмір_символа = дізнатись_розмір_символа_ю8(перший_байт);
      якщо розмір_символа == 1 {
        дані_виходу[розмір_виходу] = п32(перший_байт & 127);
        розмір_виходу += 1;
      }
      якщо розмір_символа == 2 {
        ціль другий_байт = вхід.дані[п + 1];
        дані_виходу[розмір_виходу] = (п32(перший_байт & 31) << 6) | п32(другий_байт & 63);
        розмір_виходу += 1;
        п += 1;
      }
      якщо розмір_символа == 3 {
        ціль другий_байт = вхід.дані[п + 1];
        ціль третій_байт = вхід.дані[п + 2];
        дані_виходу[розмір_виходу] = (п32(перший_байт & 15) << 12) | (п32(другий_байт & 63) << 6) | п32(третій_байт & 63);
        розмір_виходу += 1;
        п += 2;
      }
      якщо розмір_символа == 4 {
        ціль другий_байт = вхід.дані[п + 1];
        ціль третій_байт = вхід.дані[п + 2];
        ціль четвертий_байт = вхід.дані[п + 3];
        дані_виходу[розмір_виходу] = (п32(перший_байт & 15) << 18) | (п32(другий_байт & 63) << 12) | (п32(третій_байт & 63) << 6) | п32(четвертий_байт & 63);
        розмір_виходу += 1;
        п += 3;
      }
      п += 1;
    }
    якщо з_нульовим_байтом_в_кінці {
      дані_виходу[розмір_виходу] = 0;
    }
    вихід::вміст = ю32 {
      розмір_виходу,
      дані_виходу
    };
    вернути так;
  }

  зовнішня дія перекодувати_ю32_в_ю8(система: адреса<Система>, вхід: ю32, вихід: адреса<ю8>, з_нульовим_байтом_в_кінці: логічне): логічне {
    змінна дані_виходу = виділити_памʼять<п8>(система, вхід.розмір * 4 + 1);
    змінна розмір_виходу: позитивне = 0;
    змінна п: позитивне = 0;
    поки п < вхід.розмір {
      ціль с = вхід.дані[п];
      якщо с < 128 {
        дані_виходу[розмір_виходу] = п8(с);
        розмір_виходу += 1;
      } інакше якщо с < 2048 {
        дані_виходу[розмір_виходу] = п8(п32(192) | (с >> 6));
        розмір_виходу += 1;
        дані_виходу[розмір_виходу] = п8(п32(128) | (с & 63));
        розмір_виходу += 1;
      } інакше якщо с < 65536 {
        дані_виходу[розмір_виходу] = п8(п32(224) | (с >> 12));
        розмір_виходу += 1;
        дані_виходу[розмір_виходу] = п8(п32(128) | ((с >> 6) & 63));
        розмір_виходу += 1;
        дані_виходу[розмір_виходу] = п8(п32(128) | (с & 63));
        розмір_виходу += 1;
      } інакше {
        дані_виходу[розмір_виходу] = п8(п32(240) | (с >> 18));
        розмір_виходу += 1;
        дані_виходу[розмір_виходу] = п8(п32(128) | ((с >> 12) & 63));
        розмір_виходу += 1;
        дані_виходу[розмір_виходу] = п8(п32(128) | ((с >> 6) & 63));
        розмір_виходу += 1;
        дані_виходу[розмір_виходу] = п8(п32(128) | (с & 63));
        розмір_виходу += 1;
      }
      п += 1;
    }
    якщо з_нульовим_байтом_в_кінці {
      дані_виходу[розмір_виходу] = 0;
    }
    вихід::вміст = ю8 {
      розмір_виходу,
      дані_виходу
    };
    вернути так;
  }

  зовнішня дія отримати_символ_ю8_з_т32(символ_КД: п32, вихід_першого_байта: адреса<п8>, вихід_другого_байта: адреса<п8>, вихід_третього_байта: адреса<п8>, вихід_четвертого_байта: адреса<п8>, вихід_розміру: адреса<п8>): логічне {
    якщо символ_КД == символи::КІНЕЦЬ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::КІНЕЦЬ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ПОЧАТОК {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ПОЧАТОК;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ПЕРЕДВКАЗІВКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ПЕРЕДВКАЗІВКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::МІЖРЯД {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::МІЖРЯД;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ВІДКРИТА_КВАДРАТНА_ДУГА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ВІДКРИТА_КВАДРАТНА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ВІДКРИТА_ФІГУРНА_ДУГА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ВІДКРИТА_ФІГУРНА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ВІДКРИТА_ДУГА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ВІДКРИТА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::МЕНШЕ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::МЕНШЕ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::СЕКЦІЯ {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::СЕКЦІЯ) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::СЕКЦІЯ) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МІТКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::МІТКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::АДРЕСА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::АДРЕСА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::НОМЕР {
      вихід_першого_байта::вміст = п8(224п32 | (п32(відповідні_символи_юнікоду::НОМЕР) >> 12));
      вихід_другого_байта::вміст = п8(128п32 | ((п32(відповідні_символи_юнікоду::НОМЕР) >> 6) & 63));
      вихід_третього_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::НОМЕР) & 63));
      вихід_розміру::вміст = 3;
      вернути так;
    }
    якщо символ_КД == символи::ХРЕСТИК {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ХРЕСТИК;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ГРИВНЯ {
      вихід_першого_байта::вміст = п8(224п32 | (п32(відповідні_символи_юнікоду::ГРИВНЯ) >> 12));
      вихід_другого_байта::вміст = п8(128п32 | ((п32(відповідні_символи_юнікоду::ГРИВНЯ) >> 6) & 63));
      вихід_третього_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ГРИВНЯ) & 63));
      вихід_розміру::вміст = 3;
      вернути так;
    }
    якщо символ_КД == символи::ДІЯ {
      вихід_першого_байта::вміст = п8(224п32 | (п32(відповідні_символи_юнікоду::ГРИВНЯ) >> 12));
      вихід_другого_байта::вміст = п8(128п32 | ((п32(відповідні_символи_юнікоду::ГРИВНЯ) >> 6) & 63));
      вихід_третього_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ГРИВНЯ) & 63));
      вихід_розміру::вміст = 3;
      вернути так;
    }
    якщо символ_КД == символи::ЕНЕРГІЯ {
      вихід_першого_байта::вміст = п8(224п32 | (п32(відповідні_символи_юнікоду::ГРИВНЯ) >> 12));
      вихід_другого_байта::вміст = п8(128п32 | ((п32(відповідні_символи_юнікоду::ГРИВНЯ) >> 6) & 63));
      вихід_третього_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ГРИВНЯ) & 63));
      вихід_розміру::вміст = 3;
      вернути так;
    }
    якщо символ_КД == символи::НУЛЬ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::НУЛЬ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ОДИН {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ОДИН;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ДВА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ДВА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ТРИ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ТРИ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ЧОТИРИ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ЧОТИРИ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ПʼЯТЬ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ПʼЯТЬ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ШІСТЬ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ШІСТЬ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::СІМ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::СІМ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ВІСІМ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ВІСІМ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ДЕВʼЯТЬ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ДЕВʼЯТЬ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ЛАПКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ЛАПКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ДВОЛАПКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ДВОЛАПКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::КОСОЛАПКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::КОСОЛАПКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ПІДРИСКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ПІДРИСКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::РИСКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::РИСКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::АПОСТРОФ {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::АПОСТРОФ) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::АПОСТРОФ) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_А {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_А) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_А) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Б {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Б) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Б) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_В {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_В) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_В) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Г {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Г) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Г) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Д {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Д) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Д) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Е {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Е) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Е) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Є {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Є) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Є) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ж {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ж) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ж) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_З {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_З) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_З) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_И {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_И) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_И) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_І {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_І) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_І) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ї {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ї) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ї) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Й {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Й) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Й) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_К {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_К) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_К) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Л {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Л) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Л) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_М {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_М) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_М) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Н {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Н) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Н) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_О {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_О) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_О) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_П {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_П) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_П) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Р {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Р) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Р) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_С {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_С) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_С) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Т {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Т) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Т) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_У {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_У) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_У) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ф {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ф) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ф) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Х {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Х) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Х) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ц {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ц) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ц) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ч {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ч) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ч) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ш {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ш) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ш) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Щ {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Щ) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Щ) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ь {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ь) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ь) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ю {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ю) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ю) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Я {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Я) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Я) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_а {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_а) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_а) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_б {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_б) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_б) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_в {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_в) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_в) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_г {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_г) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_г) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_д {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_д) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_д) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_е {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_е) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_е) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_є {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_є) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_є) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ж {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ж) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ж) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_з {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_з) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_з) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_и {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_и) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_и) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_і {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_і) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_і) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ї {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ї) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ї) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_й {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_й) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_й) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_к {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_к) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_к) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_л {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_л) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_л) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_м {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_м) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_м) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_н {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_н) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_н) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_о {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_о) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_о) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_п {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_п) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_п) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_р {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_р) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_р) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_с {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_с) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_с) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_т {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_т) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_т) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_у {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_у) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_у) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ф {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ф) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ф) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_х {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_х) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_х) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ц {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ц) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ц) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ч {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ч) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ч) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ш {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ш) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ш) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_щ {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_щ) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_щ) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ь {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ь) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ь) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ю {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ю) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ю) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_я {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_я) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_я) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ґ {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ґ) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ґ) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_СПЕЦ_БУКВА_Ё {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ё) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ё) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_СПЕЦ_БУКВА_Ъ {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ъ) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ъ) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_СПЕЦ_БУКВА_Ы {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ы) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ы) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ВЕЛИКА_СПЕЦ_БУКВА_Э {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Э) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Э) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ґ {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ґ) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ґ) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_СПЕЦ_БУКВА_ё {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ё) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ё) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_СПЕЦ_БУКВА_ъ {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ъ) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ъ) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_СПЕЦ_БУКВА_ы {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ы) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ы) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::МАЛА_СПЕЦ_БУКВА_э {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_э) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_э) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::КОМА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::КОМА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ДВОКРАПКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ДВОКРАПКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::КРАПКАКОМА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::КРАПКАКОМА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::КРАПКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::КРАПКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ПИТАННЯ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ПИТАННЯ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ОКЛИК {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ОКЛИК;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ДОЛАР {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ДОЛАР;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ВІДСОТОК {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ВІДСОТОК;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ГРАДУС {
      вихід_першого_байта::вміст = п8(192п32 | (п32(відповідні_символи_юнікоду::ГРАДУС) >> 6));
      вихід_другого_байта::вміст = п8(128п32 | (п32(відповідні_символи_юнікоду::ГРАДУС) & 63));
      вихід_розміру::вміст = 2;
      вернути так;
    }
    якщо символ_КД == символи::ЗІРОЧКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ЗІРОЧКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::КОСА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::КОСА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ПРЯМА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ПРЯМА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ОБЕРНЕНА_КОСА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ОБЕРНЕНА_КОСА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::АМПЕРСАНД {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::АМПЕРСАНД;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ПІРАМІДКА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ПІРАМІДКА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ТИЛЬДА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ТИЛЬДА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::РІВНО {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::РІВНО;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::БІЛЬШЕ {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::БІЛЬШЕ;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ЗАКРИТА_ДУГА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ЗАКРИТА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ЗАКРИТА_ФІГУРНА_ДУГА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ЗАКРИТА_ФІГУРНА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ЗАКРИТА_КВАДРАТНА_ДУГА {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ЗАКРИТА_КВАДРАТНА_ДУГА;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    якщо символ_КД == символи::ПРОПУСК {
      вихід_першого_байта::вміст = відповідні_символи_юнікоду::ПРОПУСК;
      вихід_розміру::вміст = 1;
      вернути так;
    }
    вернути ні;
  }

  зовнішня дія порахувати_розмір_ю8сі(значення: памʼять<п8>): позитивне {
    змінна п: позитивне = 0;
    поки значення[п] != 0 {
      п += 1;
    }
    вернути п;
  }

  зовнішня дія порахувати_розмір_ю32сі(значення: памʼять<п32>): позитивне {
    змінна п: позитивне = 0;
    поки значення[п] != 0 {
      п += 1;
    }
    вернути п;
  }

  зовнішня дія порахувати_розмір_т8сі(значення: памʼять<п8>): позитивне {
    змінна п: позитивне = 0;
    поки значення[п] != 0 {
      п += 1;
    }
    вернути п;
  }

  зовнішня дія порахувати_розмір_т32сі(значення: памʼять<п32>): позитивне {
    змінна п: позитивне = 0;
    поки значення[п] != 0 {
      п += 1;
    }
    вернути п;
  }

  зовнішня дія перевірити_чи_ю8_рівні(а: ю8, б: ю8): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }
    змінна п: позитивне = 0;
    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }
      п += 1;
    }
    вернути так;
  }

  зовнішня дія перевірити_чи_ю32_рівні(а: ю32, б: ю32): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }
    змінна п: позитивне = 0;
    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }
      п += 1;
    }
    вернути так;
  }

  зовнішня дія перевірити_чи_т8_рівні(а: т8, б: т8): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }
    змінна п: позитивне = 0;
    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }
      п += 1;
    }
    вернути так;
  }

  зовнішня дія перевірити_чи_т32_рівні(а: т32, б: т32): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }
    змінна п: позитивне = 0;
    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }
      п += 1;
    }
    вернути так;
  }

  зовнішня дія перекодувати_т8_в_ю8(система: адреса<Система>, вхід: т8, вихід: адреса<ю8>, з_нульовим_байтом_в_кінці: логічне): логічне {
    змінна дані_виходу = виділити_памʼять<п8>(система, вхід.розмір * 4 + 1);
    змінна розмір_виходу: позитивне = 0;
    змінна п: позитивне = 0;
    поки п < вхід.розмір {
      ціль перший_байт = вхід.дані[п];
      ціль розмір_символа = дізнатись_розмір_символа_т8(перший_байт);
      якщо розмір_символа == 1 {
        ціль символ_ю8_0: п8 = 0;
        ціль символ_ю8_1: п8 = 0;
        ціль символ_ю8_2: п8 = 0;
        ціль символ_ю8_3: п8 = 0;
        ціль символ_ю8_розмір: п8 = 0;
        ціль успіх_отримання_ю8_з_т32 = отримати_символ_ю8_з_т32(п32(перший_байт), символ_ю8_0::адреса, символ_ю8_1::адреса, символ_ю8_2::адреса, символ_ю8_3::адреса, символ_ю8_розмір::адреса);
        якщо успіх_отримання_ю8_з_т32 == ні {
          вернути ні;
        }
        якщо символ_ю8_розмір == 1 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
        } інакше якщо символ_ю8_розмір == 2 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_1;
          розмір_виходу += 1;
        } інакше якщо символ_ю8_розмір == 3 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_2;
          розмір_виходу += 1;
        } інакше якщо символ_ю8_розмір == 4 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_3;
          розмір_виходу += 1;
        }
      } інакше якщо розмір_символа == 2 {
        п += 1;
        ціль другий_байт = вхід.дані[п];
        ціль символ_т16 = п16((п16(перший_байт & 31) << 6) | п16(другий_байт & 63));
        ціль символ_ю8_0: п8 = 0;
        ціль символ_ю8_1: п8 = 0;
        ціль символ_ю8_2: п8 = 0;
        ціль символ_ю8_3: п8 = 0;
        ціль символ_ю8_розмір: п8 = 0;
        ціль успіх_отримання_ю8_з_т32 = отримати_символ_ю8_з_т32(п32(символ_т16), символ_ю8_0::адреса, символ_ю8_1::адреса, символ_ю8_2::адреса, символ_ю8_3::адреса, символ_ю8_розмір::адреса);
        якщо успіх_отримання_ю8_з_т32 == ні {
          вернути ні;
        }
        якщо символ_ю8_розмір == 1 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
        } інакше якщо символ_ю8_розмір == 2 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_1;
          розмір_виходу += 1;
        } інакше якщо символ_ю8_розмір == 3 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_2;
          розмір_виходу += 1;
        } інакше якщо символ_ю8_розмір == 4 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_3;
          розмір_виходу += 1;
        }
      } інакше якщо розмір_символа == 3 {
        п += 1;
        ціль другий_байт = вхід.дані[п];
        п += 1;
        ціль третій_байт = вхід.дані[п];
        ціль символ_т32 = п32((п32(перший_байт & 15) << 12) | (п32(другий_байт & 63) << 6) | п32(третій_байт & 63));
        ціль символ_ю8_0: п8 = 0;
        ціль символ_ю8_1: п8 = 0;
        ціль символ_ю8_2: п8 = 0;
        ціль символ_ю8_3: п8 = 0;
        ціль символ_ю8_розмір: п8 = 0;
        ціль успіх_отримання_ю8_з_т32 = отримати_символ_ю8_з_т32(символ_т32, символ_ю8_0::адреса, символ_ю8_1::адреса, символ_ю8_2::адреса, символ_ю8_3::адреса, символ_ю8_розмір::адреса);
        якщо успіх_отримання_ю8_з_т32 == ні {
          вернути ні;
        }
        якщо символ_ю8_розмір == 1 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
        } інакше якщо символ_ю8_розмір == 2 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_1;
          розмір_виходу += 1;
        } інакше якщо символ_ю8_розмір == 3 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_2;
          розмір_виходу += 1;
        } інакше якщо символ_ю8_розмір == 4 {
          дані_виходу[розмір_виходу] = символ_ю8_0;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_1;
          розмір_виходу += 1;
          дані_виходу[розмір_виходу] = символ_ю8_3;
          розмір_виходу += 1;
        }
      } інакше {
        вернути ні;
      }
      п += 1;
    }
    якщо з_нульовим_байтом_в_кінці {
      дані_виходу[розмір_виходу] = 0;
    }
    вихід::вміст = ю8 {
      розмір_виходу,
      дані_виходу
    };
    вернути так;
  }

  зовнішня дія дізнатись_розмір_символа_т8(перший_байт: п8): п8 {
    якщо (перший_байт & 128) == 0 {
      вернути 1;
    }
    якщо (перший_байт & 224) == 192 {
      вернути 2;
    }
    якщо (перший_байт & 240) == 224 {
      вернути 3;
    }
    якщо (перший_байт & 248) == 240 {
      вернути 4;
    }
    вернути 0;
  }

  зовнішня дія дізнатись_розмір_символа_ю8(перший_байт: п8): п8 {
    якщо (перший_байт & 128) == 0 {
      вернути 1;
    }
    якщо (перший_байт & 224) == 192 {
      вернути 2;
    }
    якщо (перший_байт & 240) == 224 {
      вернути 3;
    }
    якщо (перший_байт & 248) == 240 {
      вернути 4;
    }
    вернути 0;
  }
}