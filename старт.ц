взяти визначення мавка/мавка_втілення;

зовнішня дія мавка_система_виділити_сиру_памʼять(розмір: позитивне): невідома_адреса;
зовнішня дія мавка_система_певиділити_сиру_памʼять(значення: невідома_адреса, новий_розмір: позитивне): невідома_адреса;
зовнішня дія мавка_система_звільнити_сиру_памʼять(значення: невідома_адреса);
зовнішня дія мавка_система_фс_отримати_назву_файла_без_розширення(шлях: памʼять<п8>, розмір_шляху: позитивне, вихід: адреса<памʼять<п8>>, вихід_розміру: адреса<позитивне>): логічне;
зовнішня дія мавка_система_фс_прочитати_файл(шлях: памʼять<п8>, розмір_шляху: позитивне, вихід: адреса<памʼять<п8>>, вихід_розміру: адреса<позитивне>): логічне;
зовнішня дія мавка_система_фс_виправити_шлях_та_зробити_абсолютним(шлях: памʼять<п8>, розмір_шляху: позитивне, вихід: адреса<памʼять<п8>>, вихід_розміру: адреса<позитивне>): логічне;
зовнішня дія мавка_система_вв_вивести_в_стандартний_вивід(значення: памʼять<п8>, розмір_значення: позитивне);
зовнішня дія мавка_система_процес_вийти(код: ц32);
зовнішня дія мавка_система_запустити_діалог(дані: невідома_адреса, обробник: (дані: невідома_адреса, значення: памʼять<п8>, розмір_значення: позитивне) -> ніщо);

дія нативна_дія_мавки_друк(предмет_нативної_дії: адреса<мавка::Предмет>, обчислювач: адреса<мавка::Обчислювач>, предмет_я: адреса<мавка::Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<мавка::Предмет>>, іменовані_аргументи: адреса<мавка::ІменованіАргументи>, дані: адреса): мавка::Результат {
  якщо аргументи != пусто {
    змінна ціль па: позитивне = 0;
    поки па < кількість_аргументів {
      ціль значення_ю8 = ю8 { пусто, 0 };
      мавка::отримати_текстове_зображення_предмета_як_Ю8(аргументи[па], обчислювач, значення_ю8::адреса);
      мавка::вивести_Ю8(обчислювач, значення_ю8);
      мавка::звільнити(обчислювач, значення_ю8.дані як адреса);
      якщо (па + 1) < кількість_аргументів {
        мавка::вивести_Ю8(обчислювач, ю8" ");
      }
      па += 1;
    }
    мавка::вивести_Ю8(обчислювач, ю8"\n");
  }
  вернути мавка::результат_успіх(обчислювач, пусто);
}

дія надрукувати_помилку(обчислювач: адреса<мавка::Обчислювач>, шлях: памʼять<п8>, рядок: позитивне, повідомлення: памʼять<п8>) {
  мавка::вивести_Ю8(обчислювач, ю8 { шлях, МаМа::порахувати_розмір_Ю8(шлях) });
  мавка::вивести_Ю8(обчислювач, ю8":");
  мавка::вивести_п64(обчислювач, п64(рядок));
  мавка::вивести_Ю8(обчислювач, ю8": ");
  мавка::надрукувати_Ю8(обчислювач, ю8 { повідомлення, МаМа::порахувати_розмір_Ю8(повідомлення) });
}

дія надрукувати_помилку(обчислювач: адреса<мавка::Обчислювач>, шлях: ю8, рядок: позитивне, повідомлення: памʼять<п8>) {
  мавка::вивести_Ю8(обчислювач, шлях);
  мавка::вивести_Ю8(обчислювач, ю8":");
  мавка::вивести_п64(обчислювач, п64(рядок));
  мавка::вивести_Ю8(обчислювач, ю8": ");
  мавка::надрукувати_Ю8(обчислювач, ю8 { повідомлення, МаМа::порахувати_розмір_Ю8(повідомлення) });
}

дія надрукувати_помилку(обчислювач: адреса<мавка::Обчислювач>, шлях: ю8, рядок: позитивне, повідомлення: ю8) {
  мавка::вивести_Ю8(обчислювач, шлях);
  мавка::вивести_Ю8(обчислювач, ю8":");
  мавка::вивести_п64(обчислювач, п64(рядок));
  мавка::вивести_Ю8(обчислювач, ю8": ");
  мавка::надрукувати_Ю8(обчислювач, повідомлення);
}

дія надрукувати_помилку(обчислювач: адреса<мавка::Обчислювач>, повідомлення: памʼять<п8>) {
  мавка::надрукувати_Ю8(обчислювач, ю8 { повідомлення, МаМа::порахувати_розмір_Ю8(повідомлення) });
}

дія надрукувати_помилку(обчислювач: адреса<мавка::Обчислювач>, повідомлення: ю8) {
  мавка::надрукувати_Ю8(обчислювач, повідомлення);
}

дія надрукувати_падіння(обчислювач: адреса<мавка::Обчислювач>, значення: адреса<мавка::Предмет>, падіння: адреса<мавка::Падіння>) {
  ціль значення_ю8 = ю8 { пусто, 0 };
  мавка::отримати_текстове_зображення_предмета_як_Ю8(значення, обчислювач, значення_ю8::адреса);
  якщо падіння.місцезнаходження != пусто {
    надрукувати_помилку(
      обчислювач,
      мавка::отримати_шлях_до_файлу_з_місцезнаходження_падіння(обчислювач, падіння.місцезнаходження),
      мавка::отримати_рядок_з_місцезнаходження_падіння(обчислювач, падіння.місцезнаходження),
      значення_ю8
    );
  } інакше {
    надрукувати_помилку(обчислювач, значення_ю8);
  }
  мавка::звільнити_памʼять(обчислювач, значення_ю8.дані);
}

дія виділити_памʼять(розмір: позитивне): памʼять<п8> {
  вернути мавка_система_виділити_сиру_памʼять(розмір) як памʼять<п8>;
}

дія обчислювач_виділити_памʼять(обчислювач: адреса<мавка::Обчислювач>, розмір: позитивне): памʼять<п8> {
  вернути мавка_система_виділити_сиру_памʼять(розмір) як памʼять<п8>;
}

дія обчислювач_перевиділити_памʼять(обчислювач: адреса<мавка::Обчислювач>, значення: памʼять<п8>, новий_розмір: позитивне): памʼять<п8> {
  вернути мавка_система_певиділити_сиру_памʼять(значення як невідома_адреса, новий_розмір) як памʼять<п8>;
}

дія обчислювач_звільнити_памʼять(обчислювач: адреса<мавка::Обчислювач>, значення: памʼять<п8>) {
  мавка_система_звільнити_сиру_памʼять(значення як невідома_адреса);
}

дія обчислювач_вивести(обчислювач: адреса<мавка::Обчислювач>, значення: текст) {
}

дія обчислювач_вивести_Ю8(обчислювач: адреса<мавка::Обчислювач>, значення: ю8) {
  мавка_система_вв_вивести_в_стандартний_вивід(значення.дані, значення.розмір);
}

дія обчислювач_померти(обчислювач: адреса<мавка::Обчислювач>, код: ц32) {
  мавка_система_процес_вийти(код);
}

дія обчислювач_прочитати_файл(обчислювач: адреса<мавка::Обчислювач>, шлях: ю8, вихід: адреса<ю8>): позитивне {
  ціль прочитаний_файл = ю8 { пусто, 0 };
  якщо мавка_система_фс_прочитати_файл(шлях.дані, шлях.розмір, прочитаний_файл.дані::адреса, прочитаний_файл.розмір::адреса) == ні {
    вернути 1;
  }
  вихід::вміст = прочитаний_файл;
  вернути 0;
}

дія обчислювач_виправити_шлях(обчислювач: адреса<мавка::Обчислювач>, шлях: ю8, вихід: адреса<ю8>): позитивне {
  ціль виправлений_шлях = ю8 { пусто, 0 };
  якщо мавка_система_фс_виправити_шлях_та_зробити_абсолютним(шлях.дані, шлях.розмір, виправлений_шлях.дані::адреса, виправлений_шлях.розмір::адреса) == ні {
    вернути 1;
  }
  вихід::вміст = виправлений_шлях;
  вернути 0;
}

структура ДаніДіалогуМавки {
  обчислювач: адреса<мавка::Обчислювач>;
  обробник: (дані: адреса, значення: памʼять<п8>, розмір_значення: позитивне) -> ніщо;
  дані: адреса;
}

дія обробник_діалогу_мавки(дані: невідома_адреса, значення: памʼять<п8>, розмір_значення: позитивне) {
  ціль дані_ділогу_мавки = дані як адреса<ДаніДіалогуМавки>;
  дані_ділогу_мавки.обробник(дані_ділогу_мавки.дані, значення, розмір_значення);
}

дія обчислювач_розпочати_діалог(обчислювач: адреса<мавка::Обчислювач>, дані: адреса, обробник: (дані: адреса, значення: памʼять<п8>, розмір_значення: позитивне) -> ніщо) {
  ціль дані_ділогу_мавки = мавка::виділити<ДаніДіалогуМавки>(обчислювач);
  дані_ділогу_мавки.обчислювач = обчислювач;
  дані_ділогу_мавки.обробник = обробник;
  дані_ділогу_мавки.дані = дані;
  мавка_система_запустити_діалог(дані_ділогу_мавки, обробник_діалогу_мавки);
  мавка::звільнити(обчислювач, дані_ділогу_мавки як адреса);
}

зовнішня дія стартувати_мавку(кількість_аргументів: ц32, аргументи: памʼять<памʼять<п8>>): ц32 {
  ціль обчислювач = мавка::виділити_обчислювач(виділити_памʼять);
  мавка::налаштувати_обчислювач(обчислювач, мавка::ВерсіяМавки { 0, 113, 0 }, мавка::Система {
    виділити_сиру_памʼять = обчислювач_виділити_памʼять,
    перевиділити_сиру_памʼять = обчислювач_перевиділити_памʼять,
    звільнити_сиру_памʼять = обчислювач_звільнити_памʼять,
    вивести = обчислювач_вивести,
    вивести_Ю8 = обчислювач_вивести_Ю8,
    померти = обчислювач_померти,
    виправити_шлях = обчислювач_виправити_шлях,
    прочитати_файл = обчислювач_прочитати_файл,
    розпочати_діалог = обчислювач_розпочати_діалог,
  });
  мавка::визначити_глобальний_підмет(обчислювач, мавка::назва_з_Ю8(обчислювач, ю8"друк"), мавка::створити_нативну_дію(обчислювач, мавка::назва_з_Ю8(обчислювач, ю8"друк"), нативна_дія_мавки_друк, пусто, пусто));

  якщо кількість_аргументів == 1 {
    ціль результат = мавка::почати_діалог(обчислювач);
    вернути 0;
  } інакше {
    якщо МаМа::перевірити_чи_ю8_рівні(ю8 { аргументи[1], МаМа::порахувати_розмір_Ю8(аргументи[1]) }, ю8"допомога") == так {

    } інакше {
      ціль шлях = ю8 { аргументи[1], МаМа::порахувати_розмір_Ю8(аргументи[1]) };
      ціль назва_файлу_без_розширення = ю8 { пусто, 0 };
      якщо мавка_система_фс_отримати_назву_файла_без_розширення(шлях.дані, шлях.розмір, назва_файлу_без_розширення.дані::адреса, назва_файлу_без_розширення.розмір::адреса) == ні {
        // потім: помилка
        вернути 1;
      }
      ціль результат_взяття_модуля = мавка::взяти_файл_Ю8(обчислювач, мавка::назва_з_Ю8(обчислювач, назва_файлу_без_розширення), шлях);
      якщо результат_взяття_модуля.падіння != пусто {
        надрукувати_падіння(обчислювач, результат_взяття_модуля.значення, результат_взяття_модуля.падіння);
        вернути 1;
      }
    }
  }

  вернути 0;
}