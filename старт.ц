взяти визначення мавка;
взяти визначення мавка/бібліотека;
взяти визначення біб/Реєстр;
взяти визначення біб/турбо;
взяти визначення біб/Друк;
взяти визначення біб/Виділяч;

зовнішня дія мавка_система_вийти(код: ц32);
зовнішня дія мавка_система_отримати_поточну_папку_процесу(вихід: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_система_прочитати_файл(шлях: адреса<мавка::Байти>, вихід: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_система_отримати_абсолютний_шлях(шлях: адреса<мавка::Байти>, вихід: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_система_отримати_абсолютний_зовнішній_шлях(шлях: адреса<мавка::Байти>, вихід: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_система_отримати_назву_файлу_без_розширення(шлях: адреса<мавка::Байти>, вихід: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_система_прочитати_ю8_зі_стандартного_вводу(префікс: адреса<ю8>, вихід: адреса<ю8>, додати_в_історію: логічне): логічне;
зовнішня дія мавка_система_перевірити_чи_шлях_існує_і_є_файлом(шлях: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_отримати_версію_мавки_як_ю8(вихід: адреса<ю8>);
зовнішня дія мавка_система_перетворити_ц64_на_ю8(значення: ц64, вихід: адреса<ю8>) -> логічне;
зовнішня дія мавка_система_перетворити_н64_на_ю8(значення: н64, вихід: адреса<ю8>) -> логічне;
зовнішня дія мавка_система_перетворити_д64_на_ю8(значення: д64, вихід: адреса<ю8>) -> логічне;
зовнішня дія мавка_система_перетворити_ю8_на_ц64(значення: адреса<ю8>, вихід: адреса<ц64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне;
зовнішня дія мавка_система_перетворити_ю8_на_н64(значення: адреса<ю8>, вихід: адреса<н64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне;
зовнішня дія мавка_система_перетворити_ю8_на_д64(значення: адреса<ю8>, вихід: адреса<д64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне;

дія відклик_після_події_турбіни(турбіна: адреса<турбо::Турбіна>, аргумент_відклику: невідома_адреса, вихід_помилки: адреса<турбо::ПомилкаВідкликуТурбіни>): логічне {
  змінна М = аргумент_відклику як адреса<мавка::Машина>;

  змінна результат_обробки = мавка::обробити_чергу_запланованих_виконань(М);
  якщо мавка::перевірити_чи_стан_падіння(М) {
    вихід_помилки::вміст = турбо::ПомилкаВідкликуТурбіни {
      тип = турбо::ТипПомилкиВідкликуТурбіниКористувацький,
      дані = результат_обробки
    };
    вернути ні;
  }

  вернути так;
}

структура ДаніМашини {
  шлях_до_папки_виконання: мавка::Байти;
}

дія машина_виділити_сиру_памʼять(М: адреса<мавка::Машина>, розмір: натуральне) -> невідома_адреса {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  вернути біб::виділити_памʼять<н8>(системний_виділяч, розмір) як невідома_адреса;
}

дія машина_перевиділити_сиру_памʼять(М: адреса<мавка::Машина>, значення: невідома_адреса, розмір: натуральне) -> невідома_адреса {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  вернути біб::перевиділити_памʼять<н8>(системний_виділяч, значення як памʼять<н8>, розмір) як невідома_адреса;
}

дія машина_звільнити_сиру_памʼять(М: адреса<мавка::Машина>, значення: невідома_адреса) {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  біб::звільнити_памʼять(системний_виділяч, значення як памʼять<н8>);
}

дія машина_вийти(М: адреса<мавка::Машина>, код: ц32) {
  мавка_система_вийти(код);
}

дія машина_прочитати_файл(М: адреса<мавка::Машина>, шлях: адреса<мавка::ПредметШляху>) -> мавка::ПредметАбоСтанПадіння<мавка::ПредметБайтів> {
  змінна значення_шляху = мавка::Байти { шлях.байти.розмір, шлях.байти.дані };
  змінна вихід = мавка::Байти { 0, пусто };
  мавка_система_прочитати_файл(значення_шляху::адреса, вихід::адреса);
  вернути мавка::створити_предмет_байтів_без_копіювання(М, вихід.розмір, вихід.дані);
}

дія машина_отримати_абсолютний_шлях(М: адреса<мавка::Машина>, шлях: адреса<мавка::ПредметШляху>) -> мавка::ПредметАбоСтанПадіння<мавка::ПредметШляху> {
  змінна значення_шляху = мавка::Байти { шлях.байти.розмір, шлях.байти.дані };
  змінна вихід = мавка::Байти { 0, пусто };
  мавка_система_отримати_абсолютний_шлях(значення_шляху::адреса, вихід::адреса);
  вернути мавка::створити_предмет_шляху(М, мавка::створити_предмет_байтів_без_копіювання(М, вихід.розмір, вихід.дані));
}

дія машина_отримати_абсолютний_зовнішній_шлях(М: адреса<мавка::Машина>, шлях: адреса<мавка::ПредметШляху>) -> мавка::ПредметАбоСтанПадіння<мавка::ПредметШляху> {
  змінна значення_шляху = мавка::Байти { шлях.байти.розмір, шлях.байти.дані };
  змінна вихід = мавка::Байти { 0, пусто };
  мавка_система_отримати_абсолютний_зовнішній_шлях(значення_шляху::адреса, вихід::адреса);
  вернути мавка::створити_предмет_шляху(М, мавка::створити_предмет_байтів_без_копіювання(М, вихід.розмір, вихід.дані));
}

дія машина_отримати_назву_файлу_без_розширення(М: адреса<мавка::Машина>, шлях: адреса<мавка::ПредметШляху>) -> мавка::ПредметАбоСтанПадіння<мавка::ПредметТексту> {
  змінна значення_шляху = мавка::Байти { шлях.байти.розмір, шлях.байти.дані };
  змінна вихід = мавка::Байти { 0, пусто };
  мавка_система_отримати_назву_файлу_без_розширення(значення_шляху::адреса, вихід::адреса);
  вернути мавка::створити_предмет_тексту_без_копіювання(М, т8 { вихід.розмір, вихід.дані });
}

дія машина_перевірити_чи_шлях_існує_і_є_файлом(М: адреса<мавка::Машина>, шлях: адреса<мавка::ПредметШляху>) -> логічне {
  змінна значення_шляху = мавка::Байти { шлях.байти.розмір, шлях.байти.дані };
  вернути мавка_система_перевірити_чи_шлях_існує_і_є_файлом(значення_шляху::адреса);
}

дія машина_вивести(М: адреса<мавка::Машина>, значення: т8) {
  біб::вивести(значення);
}

дія машина_вивести_ю8(М: адреса<мавка::Машина>, значення: ю8) {
  біб::вивести_ю8(значення);
}

дія машина_спустити_виведене(М: адреса<мавка::Машина>) {
  // ...
}

дія машина_перетворити_ц64_на_т8(М: адреса<мавка::Машина>, значення: ц64, вихід: адреса<т8>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  мавка_система_перетворити_ц64_на_ю8(значення, значення_ю8::адреса);
  змінна значення_т8 = т8 { 0, пусто };
  біб::перекодувати_ю8_в_т8(системний_виділяч, значення_ю8, ні, ні, значення_т8::адреса, пусто, пусто);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вихід::вміст = значення_т8;
  вернути так;
}

дія машина_перетворити_н64_на_т8(М: адреса<мавка::Машина>, значення: н64, вихід: адреса<т8>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  мавка_система_перетворити_н64_на_ю8(значення, значення_ю8::адреса);
  змінна значення_т8 = т8 { 0, пусто };
  біб::перекодувати_ю8_в_т8(системний_виділяч, значення_ю8, ні, ні, значення_т8::адреса, пусто, пусто);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вихід::вміст = значення_т8;
  вернути так;
}

дія машина_перетворити_д64_на_т8(М: адреса<мавка::Машина>, значення: д64, вихід: адреса<т8>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  мавка_система_перетворити_д64_на_ю8(значення, значення_ю8::адреса);
  змінна значення_т8 = т8 { 0, пусто };
  біб::перекодувати_ю8_в_т8(системний_виділяч, значення_ю8, ні, ні, значення_т8::адреса, пусто, пусто);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вихід::вміст = значення_т8;
  вернути так;
}

дія машина_перетворити_т8_на_ц64(М: адреса<мавка::Машина>, значення: т8, вихід: адреса<ц64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  біб::перекодувати_т8_в_ю8(системний_виділяч, значення, ні, значення_ю8::адреса, пусто, пусто);
  мавка_система_перетворити_ю8_на_ц64(значення_ю8::адреса, вихід, вихід_позиції_помилки);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вернути так;
}

дія машина_перетворити_т8_на_н64(М: адреса<мавка::Машина>, значення: т8, вихід: адреса<н64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  біб::перекодувати_т8_в_ю8(системний_виділяч, значення, ні, значення_ю8::адреса, пусто, пусто);
  мавка_система_перетворити_ю8_на_н64(значення_ю8::адреса, вихід, вихід_позиції_помилки);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вернути так;
}

дія машина_перетворити_т8_на_д64(М: адреса<мавка::Машина>, значення: т8, вихід: адреса<д64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  біб::перекодувати_т8_в_ю8(системний_виділяч, значення, ні, значення_ю8::адреса, пусто, пусто);
  мавка_система_перетворити_ю8_на_д64(значення_ю8::адреса, вихід, вихід_позиції_помилки);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вернути так;
}

дія отримати_шлях_взяття_до_модуля(М: адреса<мавка::Машина>, назва_паку: адреса<мавка::ПредметТексту>, кількість_назв_шляху: натуральне, назви_шляху: памʼять<адреса<мавка::ПредметТексту>>): адреса<мавка::ПредметШляху> {
  змінна дані_машини = М.дані як адреса<ДаніМашини>;
  змінна накопичувач_шляху = мавка::зробити_накопичувач<п8>(М);
  мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8 { дані_машини.шлях_до_папки_виконання.розмір, дані_машини.шлях_до_папки_виконання.дані });
  якщо назва_паку != пусто {
    мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8"/паки/");
    мавка::покласти_т8_в_накопичувач_ю8(М, накопичувач_шляху::адреса, назва_паку.значення);
  }
  змінна п: натуральне = 0;
  поки п < кількість_назв_шляху {
    мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8"/");
    мавка::покласти_т8_в_накопичувач_ю8(М, накопичувач_шляху::адреса, назви_шляху[п].значення);
    п += 1;
  }
  мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8".м");
  змінна предмет_шляху = мавка::створити_предмет_шляху(М, мавка::створити_предмет_байтів(М, накопичувач_шляху.розмір, накопичувач_шляху.дані));
  мавка::звільнити_накопичувач<п8>(М, накопичувач_шляху);
  вернути предмет_шляху;
}

дія машина_обробник_взяття(М: адреса<мавка::Машина>, назва_паку: адреса<мавка::ПредметТексту>, назва_репозиторія: адреса<мавка::ПредметТексту>, кількість_назв_шляху: натуральне, назви_шляху: памʼять<адреса<мавка::ПредметТексту>>): мавка::предмет_або_стан_падіння {
  якщо мавка::перевірити_чи_предмети_назви_рівні(М, назва_репозиторія, мавка::створити_назву(М, "модуль")) {
    змінна предмет_шляху = отримати_шлях_взяття_до_модуля(М, назва_паку, кількість_назв_шляху, назви_шляху);
    вернути мавка::машина_взяти_файл(М, назва_паку, назви_шляху[кількість_назв_шляху - 1], предмет_шляху);
  }
  якщо мавка::перевірити_чи_предмети_назви_рівні(М, назва_репозиторія, мавка::створити_назву(М, "пак")) {
    змінна предмет_шляху = отримати_шлях_взяття_до_модуля(М, назви_шляху[0], кількість_назв_шляху, назви_шляху);
    вернути мавка::машина_взяти_файл(М, назви_шляху[0], назви_шляху[кількість_назв_шляху - 1], предмет_шляху);
  }
  якщо мавка::перевірити_чи_предмети_назви_рівні(М, назва_репозиторія, мавка::створити_назву(М, "біб")) {
    змінна дані_машини = М.дані як адреса<ДаніМашини>;
    змінна результат = мавка::бібліотека::обробник_взяття_біб(М, кількість_назв_шляху, назви_шляху як памʼять<адреса<мавка::Предмет>>);
    вернути результат як адреса<мавка::Предмет>;
  }
  вернути мавка::результат_стан_падіння(М, мавка::Місцезнаходження { пусто як адреса<мавка::ПредметТексту>, 0 }, мавка::створити_предмет_тексту(М, "Неможливо взяти") як адреса<мавка::Предмет>);
}

дія створити_машину() -> адреса<мавка::Машина> {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  змінна М = біб::виділити<мавка::Машина>(системний_виділяч);

  мавка::налаштувати_машину(М, мавка::Система {
    виділити_сиру_памʼять = машина_виділити_сиру_памʼять,
    перевиділити_сиру_памʼять = машина_перевиділити_сиру_памʼять,
    звільнити_сиру_памʼять = машина_звільнити_сиру_памʼять,
    вийти = машина_вийти,
    прочитати_файл = машина_прочитати_файл,
    отримати_абсолютний_шлях = машина_отримати_абсолютний_шлях,
    отримати_абсолютний_зовнішній_шлях = машина_отримати_абсолютний_зовнішній_шлях,
    отримати_назву_файлу_без_розширення = машина_отримати_назву_файлу_без_розширення,
    перевірити_чи_шлях_існує_і_є_файлом = машина_перевірити_чи_шлях_існує_і_є_файлом,
    вивести = машина_вивести,
    вивести_ю8 = машина_вивести_ю8,
    спустити_виведене = машина_спустити_виведене,
    перетворити_ц64_на_т8 = машина_перетворити_ц64_на_т8,
    перетворити_н64_на_т8 = машина_перетворити_н64_на_т8,
    перетворити_д64_на_т8 = машина_перетворити_д64_на_т8,
    перетворити_т8_на_ц64 = машина_перетворити_т8_на_ц64,
    перетворити_т8_на_н64 = машина_перетворити_т8_на_н64,
    перетворити_т8_на_д64 = машина_перетворити_т8_на_д64,
    кодування_шляху = мавка::КодуванняЮ8
  });
  М.обробник_взяття = машина_обробник_взяття;

  змінна дані_машини = біб::виділити<ДаніМашини>(системний_виділяч);
  дані_машини.шлях_до_папки_виконання = мавка::Байти { 0, пусто };
  мавка_система_отримати_поточну_папку_процесу(дані_машини.шлях_до_папки_виконання::адреса);
  М.дані = дані_машини;

  вернути М;
}

дія знищити_машину(М: адреса<мавка::Машина>) {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  змінна дані_машини = М.дані як адреса<ДаніМашини>;
  біб::звільнити_памʼять(системний_виділяч, дані_машини.шлях_до_папки_виконання.дані);
  біб::звільнити(системний_виділяч, дані_машини);
  мавка::очистити(М);
  мавка::розлаштувати_машину(М);
  біб::звільнити(системний_виділяч, М);
}

зовнішня дія запустити_мавку(кількість_аргументів: ц32, аргументи: памʼять<мавка::Байти>): ц32 {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  змінна турбіна = турбо::створити_турбіну(системний_виділяч);

  турбо::змінити_глобальну_турбіну(турбіна);

  змінна М = створити_машину();

  змінна результат_визначення_глобальних = мавка::визначити_глобальні(М);
  якщо мавка::перевірити_чи_стан_падіння(М) {
    змінна інформація_падіння = мавка::отримати_інформацію_падіння(М);
    мавка::надрукувати_падіння(М, інформація_падіння, результат_визначення_глобальних);
    мавка::знищити_інформацію_падіння(М, інформація_падіння);
    знищити_машину(М);
    турбо::знищити_турбіну(турбіна);
    вернути 1;
  }

  якщо кількість_аргументів == 1 {
    мавка::вивести(М, "Діалог Мавки ");
    змінна версія_мавки = мавка::отримати_версію_мавки_як_т8(М);
    мавка::надрукувати(М, версія_мавки);
    мавка::звільнити_памʼять(М, версія_мавки.дані);
    мавка::почати_діалог(М);
  } інакше {
    змінна результат_взяття = мавка::взяти_файл_ю8(М, мавка::створити_предмет_шляху(М, мавка::створити_предмет_байтів(М, аргументи[1].розмір, аргументи[1].дані)));
    якщо мавка::перевірити_чи_стан_падіння(М) {
      змінна інформація_падіння = мавка::отримати_інформацію_падіння(М);
      мавка::надрукувати_падіння(М, інформація_падіння, результат_взяття);
      мавка::знищити_інформацію_падіння(М, інформація_падіння);
      знищити_машину(М);
      турбо::знищити_турбіну(турбіна);
      вернути 1;
    }

    змінна результат_обробки = мавка::обробити_чергу_запланованих_виконань(М);
    якщо мавка::перевірити_чи_стан_падіння(М) {
      змінна інформація_падіння = мавка::отримати_інформацію_падіння(М);
      мавка::надрукувати_падіння(М, інформація_падіння, результат_обробки);
      мавка::знищити_інформацію_падіння(М, інформація_падіння);
      знищити_машину(М);
      турбо::знищити_турбіну(турбіна);
      вернути 1;
    }
  }

  змінна помилка_турбіни = турбо::ПомилкаВідкликуТурбіни { ... };

  змінна результат_турбіни = турбо::запустити_турбіну(турбіна, пусто, відклик_після_події_турбіни, М, помилка_турбіни::адреса);
  якщо результат_турбіни == ні {
    якщо помилка_турбіни.тип == турбо::ТипПомилкиВідкликуТурбіниКористувацький {
      змінна інформація_падіння = мавка::отримати_інформацію_падіння(М);
      мавка::надрукувати_падіння(М, інформація_падіння, помилка_турбіни.дані як адреса<мавка::Предмет>);
      мавка::знищити_інформацію_падіння(М, інформація_падіння);
      знищити_машину(М);
      турбо::знищити_турбіну(турбіна);
      вернути 1;
    }
  }

  знищити_машину(М);

  турбо::знищити_турбіну(турбіна);

  вернути 0;
}