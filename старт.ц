взяти визначення мавка;
взяти визначення бібліотека_мавки;
взяти біб Реєстр;
взяти біб турбо;
взяти біб Друк;
взяти біб Виділяч;
взяти біб Кодування;
взяти визначення РМв1;

зовнішня дія мавка_система_вийти(код: ц32);
зовнішня дія мавка_система_отримати_поточну_папку_процесу(вихід: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_система_прочитати_файл(шлях: адреса<мавка::Байти>, вихід: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_система_отримати_абсолютний_шлях(шлях: адреса<мавка::Байти>, вихід: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_система_отримати_абсолютний_зовнішній_шлях(шлях: адреса<мавка::Байти>, вихід: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_система_отримати_назву_файлу_без_розширення(шлях: адреса<мавка::Байти>, вихід: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_система_прочитати_ю8_зі_стандартного_вводу(префікс: адреса<ю8>, вихід: адреса<ю8>, додати_в_історію: логічне): логічне;
зовнішня дія мавка_система_перевірити_чи_шлях_існує_і_є_файлом(шлях: адреса<мавка::Байти>): логічне;
зовнішня дія мавка_отримати_версію_мавки_як_ю8(вихід: адреса<ю8>);
зовнішня дія мавка_система_перетворити_ц64_на_ю8(значення: ц64, вихід: адреса<ю8>) -> логічне;
зовнішня дія мавка_система_перетворити_н64_на_ю8(значення: н64, вихід: адреса<ю8>) -> логічне;
зовнішня дія мавка_система_перетворити_д64_на_ю8(значення: д64, вихід: адреса<ю8>) -> логічне;
зовнішня дія мавка_система_перетворити_ю8_на_ц64(значення: адреса<ю8>, вихід: адреса<ц64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне;
зовнішня дія мавка_система_перетворити_ю8_на_н64(значення: адреса<ю8>, вихід: адреса<н64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне;
зовнішня дія мавка_система_перетворити_ю8_на_д64(значення: адреса<ю8>, вихід: адреса<д64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне;

дія відклик_після_події_турбіни(турбіна: адреса<турбо::Турбіна>, аргумент_відклику: невідома_адреса, вихід_помилки: адреса<турбо::ПомилкаВідкликуТурбіни>): логічне {
  змінна М = аргумент_відклику як адреса<мавка::Машина>;

  змінна результат_обробки = мавка::обробити_чергу_запланованих_виконань(М);
  якщо мавка::перевірити_чи_стан_падіння(М) {
    вихід_помилки::вміст = турбо::ПомилкаВідкликуТурбіни {
      тип = турбо::ТипПомилкиВідкликуТурбіниКористувацький,
      дані = М.предмет_падіння
    };
    вернути ні;
  }

  вернути так;
}

структура ДаніМашини {
  шлях_до_папки_виконання: мавка::Байти;
}

дія машина_виділити_сиру_памʼять(М: адреса<мавка::Машина>, розмір: натуральне) -> невідома_адреса {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  вернути біб::виділити_памʼять<н8>(системний_виділяч, розмір) як невідома_адреса;
}

дія машина_перевиділити_сиру_памʼять(М: адреса<мавка::Машина>, значення: невідома_адреса, розмір: натуральне) -> невідома_адреса {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  вернути біб::перевиділити_памʼять<н8>(системний_виділяч, значення як памʼять<н8>, розмір) як невідома_адреса;
}

дія машина_звільнити_сиру_памʼять(М: адреса<мавка::Машина>, значення: невідома_адреса) {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  біб::звільнити_памʼять(системний_виділяч, значення як памʼять<н8>);
}

дія машина_вийти(М: адреса<мавка::Машина>, код: ц32) {
  мавка_система_вийти(код);
}

дія машина_прочитати_файл(М: адреса<мавка::Машина>, шлях: адреса<мавка::ПредметБайтів>) -> мавка::ПредметАбоСтанПадіння<мавка::ПредметБайтів> {
  змінна значення_шляху = мавка::Байти { шлях.розмір, шлях.дані };
  змінна вихід = мавка::Байти { 0, пусто };
  мавка_система_прочитати_файл(значення_шляху::адреса, вихід::адреса);
  вернути мавка::створити_предмет_байтів_без_копіювання(М, вихід.розмір, вихід.дані);
}

дія машина_отримати_абсолютний_шлях(М: адреса<мавка::Машина>, шлях: адреса<мавка::ПредметБайтів>) -> мавка::ПредметАбоСтанПадіння<мавка::ПредметБайтів> {
  змінна значення_шляху = мавка::Байти { шлях.розмір, шлях.дані };
  змінна вихід = мавка::Байти { 0, пусто };
  мавка_система_отримати_абсолютний_шлях(значення_шляху::адреса, вихід::адреса);
  вернути мавка::створити_предмет_байтів_без_копіювання(М, вихід.розмір, вихід.дані);
}

дія машина_отримати_абсолютний_зовнішній_шлях(М: адреса<мавка::Машина>, шлях: адреса<мавка::ПредметБайтів>) -> мавка::ПредметАбоСтанПадіння<мавка::ПредметБайтів> {
  змінна значення_шляху = мавка::Байти { шлях.розмір, шлях.дані };
  змінна вихід = мавка::Байти { 0, пусто };
  мавка_система_отримати_абсолютний_зовнішній_шлях(значення_шляху::адреса, вихід::адреса);
  вернути мавка::створити_предмет_байтів_без_копіювання(М, вихід.розмір, вихід.дані);
}

дія машина_отримати_назву_файлу_без_розширення(М: адреса<мавка::Машина>, шлях: адреса<мавка::ПредметБайтів>) -> мавка::ПредметАбоСтанПадіння<мавка::ПредметТексту> {
  змінна значення_шляху = мавка::Байти { шлях.розмір, шлях.дані };
  змінна вихід = мавка::Байти { 0, пусто };
  мавка_система_отримати_назву_файлу_без_розширення(значення_шляху::адреса, вихід::адреса);
  вернути мавка::створити_предмет_тексту_без_копіювання(М, т8 { вихід.розмір, вихід.дані });
}

дія машина_перевірити_чи_шлях_існує_і_є_файлом(М: адреса<мавка::Машина>, шлях: адреса<мавка::ПредметБайтів>) -> логічне {
  змінна значення_шляху = мавка::Байти { шлях.розмір, шлях.дані };
  вернути мавка_система_перевірити_чи_шлях_існує_і_є_файлом(значення_шляху::адреса);
}

дія машина_вивести(М: адреса<мавка::Машина>, значення: т8) {
  біб::вивести(значення);
}

дія машина_вивести_ю8(М: адреса<мавка::Машина>, значення: ю8) {
  біб::вивести_ю8(значення);
}

дія машина_вивести_байти(М: адреса<мавка::Машина>, розмір: натуральне, дані: памʼять<н8>) {
  біб::вивести_байти(розмір, дані);
}

дія машина_спустити_виведене(М: адреса<мавка::Машина>) {
  // ...
}

дія машина_перетворити_ц64_на_т8(М: адреса<мавка::Машина>, значення: ц64, вихід: адреса<т8>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  мавка_система_перетворити_ц64_на_ю8(значення, значення_ю8::адреса);
  змінна значення_т8 = т8 { 0, пусто };
  біб::перекодувати_ю8_в_т8(системний_виділяч, значення_ю8, ні, ні, значення_т8::адреса, пусто, пусто);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вихід::вміст = значення_т8;
  вернути так;
}

дія машина_перетворити_н64_на_т8(М: адреса<мавка::Машина>, значення: н64, вихід: адреса<т8>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  мавка_система_перетворити_н64_на_ю8(значення, значення_ю8::адреса);
  змінна значення_т8 = т8 { 0, пусто };
  біб::перекодувати_ю8_в_т8(системний_виділяч, значення_ю8, ні, ні, значення_т8::адреса, пусто, пусто);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вихід::вміст = значення_т8;
  вернути так;
}

дія машина_перетворити_д64_на_т8(М: адреса<мавка::Машина>, значення: д64, вихід: адреса<т8>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  мавка_система_перетворити_д64_на_ю8(значення, значення_ю8::адреса);
  змінна значення_т8 = т8 { 0, пусто };
  біб::перекодувати_ю8_в_т8(системний_виділяч, значення_ю8, ні, ні, значення_т8::адреса, пусто, пусто);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вихід::вміст = значення_т8;
  вернути так;
}

дія машина_перетворити_т8_на_ц64(М: адреса<мавка::Машина>, значення: т8, вихід: адреса<ц64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  біб::перекодувати_т8_в_ю8(системний_виділяч, значення, ні, значення_ю8::адреса, пусто, пусто);
  мавка_система_перетворити_ю8_на_ц64(значення_ю8::адреса, вихід, вихід_позиції_помилки);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вернути так;
}

дія машина_перетворити_т8_на_н64(М: адреса<мавка::Машина>, значення: т8, вихід: адреса<н64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  біб::перекодувати_т8_в_ю8(системний_виділяч, значення, ні, значення_ю8::адреса, пусто, пусто);
  мавка_система_перетворити_ю8_на_н64(значення_ю8::адреса, вихід, вихід_позиції_помилки);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вернути так;
}

дія машина_перетворити_т8_на_д64(М: адреса<мавка::Машина>, значення: т8, вихід: адреса<д64>, вихід_позиції_помилки: адреса<натуральне>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();
  змінна значення_ю8 = ю8 { 0, пусто };
  біб::перекодувати_т8_в_ю8(системний_виділяч, значення, ні, значення_ю8::адреса, пусто, пусто);
  мавка_система_перетворити_ю8_на_д64(значення_ю8::адреса, вихід, вихід_позиції_помилки);
  біб::звільнити_памʼять(системний_виділяч, значення_ю8.дані);
  вернути так;
}

дія отримати_шлях_взяття_до_модуля(М: адреса<мавка::Машина>, назва_паку: адреса<мавка::ПредметТексту>, кількість_назв_шляху: натуральне, назви_шляху: памʼять<адреса<мавка::ПредметТексту>>): адреса<мавка::ПредметБайтів> {
  змінна дані_машини = М.дані як адреса<ДаніМашини>;
  змінна накопичувач_шляху = мавка::зробити_накопичувач<п8>(М);
  мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8 { дані_машини.шлях_до_папки_виконання.розмір, дані_машини.шлях_до_папки_виконання.дані });
  якщо назва_паку != пусто {
    мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8"/паки/");
    мавка::покласти_т8_в_накопичувач_ю8(М, накопичувач_шляху::адреса, назва_паку.значення);
  }
  змінна п: натуральне = 0;
  поки п < кількість_назв_шляху {
    мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8"/");
    мавка::покласти_т8_в_накопичувач_ю8(М, накопичувач_шляху::адреса, назви_шляху[п].значення);
    п += 1;
  }
  мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8".м");
  змінна шлях = мавка::створити_предмет_байтів(М, накопичувач_шляху.розмір, накопичувач_шляху.дані);
  мавка::звільнити_накопичувач<п8>(М, накопичувач_шляху);
  вернути шлях;
}

дія отримати_шлях_взяття_до_розширення(М: адреса<мавка::Машина>, назва_паку: адреса<мавка::ПредметТексту>, назва: адреса<мавка::ПредметТексту>): адреса<мавка::ПредметБайтів> {
  змінна дані_машини = М.дані як адреса<ДаніМашини>;
  змінна накопичувач_шляху = мавка::зробити_накопичувач<п8>(М);
  мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8 { дані_машини.шлях_до_папки_виконання.розмір, дані_машини.шлях_до_папки_виконання.дані });
  якщо назва_паку != пусто {
    мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8"/паки/");
    мавка::покласти_т8_в_накопичувач_ю8(М, накопичувач_шляху::адреса, назва_паку.значення);
  }
  мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8"/розширення/");
  мавка::покласти_т8_в_накопичувач_ю8(М, накопичувач_шляху::адреса, назва.значення);
  мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8"/розширення-мавки-");
  мавка::покласти_т8_в_накопичувач_ю8(М, накопичувач_шляху::адреса, назва.значення);
  мавка::покласти_в_накопичувач_ю8(М, накопичувач_шляху::адреса, ю8"-лінукс-гну-ікс86_64.ллвмшо");
  змінна шлях = мавка::створити_предмет_байтів(М, накопичувач_шляху.розмір, накопичувач_шляху.дані);
  мавка::звільнити_накопичувач<п8>(М, накопичувач_шляху);
  вернути шлях;
}

секція мавка {
  секція бібліотека {

    місцева дія обробник_взяття_біб(М: адреса<Машина>, розмір_шляху: позитивне, шлях: памʼять<адреса<Предмет>>) -> ПредметАбоСтанПадіння<Предмет>;
  }
}

дія машина_обробник_взяття(М: адреса<мавка::Машина>, назва_паку: адреса<мавка::ПредметТексту>, назва_репозиторія: адреса<мавка::ПредметТексту>, кількість_назв_шляху: натуральне, назви_шляху: памʼять<адреса<мавка::ПредметТексту>>): мавка::ПредметАбоСтанПадіння<мавка::Предмет> {
  якщо мавка::перевірити_чи_предмети_назви_рівні(М, назва_репозиторія, мавка::створити_назву(М, "модуль")) {
    змінна шлях = отримати_шлях_взяття_до_модуля(М, назва_паку, кількість_назв_шляху, назви_шляху);
    вернути мавка::взяти_модуль(М, назва_паку, назви_шляху[кількість_назв_шляху - 1], шлях);
  }

  якщо мавка::перевірити_чи_предмети_назви_рівні(М, назва_репозиторія, мавка::створити_назву(М, "пак")) {
    змінна шлях = отримати_шлях_взяття_до_модуля(М, назви_шляху[0], кількість_назв_шляху, назви_шляху);
    вернути мавка::взяти_модуль(М, назви_шляху[0], назви_шляху[кількість_назв_шляху - 1], шлях);
  }
  
  якщо мавка::перевірити_чи_предмети_назви_рівні(М, назва_репозиторія, мавка::створити_назву(М, "біб")) {
    змінна дані_машини = М.дані як адреса<ДаніМашини>;
    змінна результат = мавка::бібліотека::обробник_взяття_біб(М, кількість_назв_шляху, назви_шляху як памʼять<адреса<мавка::Предмет>>);
    вернути результат як адреса<мавка::Предмет>;
  }
  
  якщо мавка::перевірити_чи_предмети_назви_рівні(М, назва_репозиторія, мавка::створити_назву(М, "розширення")) {
    змінна шлях = отримати_шлях_взяття_до_розширення(М, назва_паку, назви_шляху[0]);
    вернути мавка::взяти_розширення(М, назва_паку, назви_шляху[0], шлях);
  }
  
  вернути мавка::результат_стан_падіння(М, мавка::Місцезнаходження { пусто як адреса<мавка::ПредметТексту>, 0 }, мавка::створити_предмет_тексту(М, "Неможливо взяти") як адреса<мавка::Предмет>);
}

зовнішня дія мавка_система_відкрити_поширену_бібліотеку(шлях: адреса<ю8>): невідома_адреса;
зовнішня дія мавка_система_закрити_поширену_бібліотеку(поширена_бібліотека: невідома_адреса);
зовнішня дія мавка_система_отримати_символ_поширеної_бібліотеки(поширена_бібліотека: невідома_адреса, назва: адреса<ю8>): невідома_адреса;

секція мавка {
  секція розширення {
    місцева дія виконати_завантаження_РМв1(М: адреса<мавка::Машина>, предмет_модуля: адреса<мавка::ПредметМодуля>, дія_завантаження_РМв1: (Р: адреса<РМв1::Розширення>) -> ніщо) -> ніщо;
  }
}

дія машина_завантажити_розширення(М: адреса<мавка::Машина>, предмет_модуля: адреса<мавка::ПредметМодуля>, шлях: адреса<мавка::ПредметБайтів>) {
  змінна шлях_до_файлу = ю8 { шлях.розмір, шлях.дані };
  змінна поширена_бібліотека = мавка_система_відкрити_поширену_бібліотеку(шлях_до_файлу::адреса);
  якщо поширена_бібліотека == пусто {
    мавка::увімкнути_стан_падіння(М, мавка::Місцезнаходження { пусто як адреса<мавка::ПредметТексту>, 0 }, мавка::створити_предмет_тексту(М, "Не вдалось відкрити поширену бібліотеку") як адреса<мавка::Предмет>);
    вернути;
  }
  змінна назва_символа = ю8"завантажити_РМв1";
  змінна символ_завантажити_РМв1 = мавка_система_отримати_символ_поширеної_бібліотеки(поширена_бібліотека, назва_символа::адреса);
  якщо символ_завантажити_РМв1 == пусто {
    мавка_система_закрити_поширену_бібліотеку(поширена_бібліотека);
    мавка::увімкнути_стан_падіння(М, мавка::Місцезнаходження { пусто як адреса<мавка::ПредметТексту>, 0 }, мавка::створити_предмет_тексту(М, "Не вдалось отримати символ поширеної бібліотеки") як адреса<мавка::Предмет>);
    вернути;
  }
  змінна дія_завантаження_РМв1 = символ_завантажити_РМв1 як (Р: адреса<РМв1::Розширення>) -> ніщо;
  мавка::розширення::виконати_завантаження_РМв1(М, предмет_модуля, дія_завантаження_РМв1);
}

дія машина_перекодувати_ю8_в_т8(М: адреса<мавка::Машина>, опції: мавка::ОпціїПерекодуванняЮ8вТ8, вхід: ю8, вихід: адреса<т8>, вихід_місцезнаходжень: адреса<мавка::МісцезнаходженняПерекодування>, вихід_позиції_помилки: адреса<натуральне>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  вернути біб::перекодувати_ю8_в_т8(
    системний_виділяч,
    вхід,
    опції.екранувати_невідомі,
    опції.з_кінцем,
    вихід,
    вихід_місцезнаходжень як адреса<біб::МісцезнаходженняПерекодованого>,
    вихід_позиції_помилки
  );
}

дія машина_перекодувати_т8_в_ю8(М: адреса<мавка::Машина>, опції: мавка::ОпціїПерекодуванняТ8вЮ8, вхід: т8, вихід: адреса<ю8>, вихід_місцезнаходжень: адреса<мавка::МісцезнаходженняПерекодування>, вихід_позиції_помилки: адреса<натуральне>) -> логічне {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  вернути біб::перекодувати_т8_в_ю8(
    системний_виділяч,
    вхід,
    опції.з_кінцем,
    вихід,
    вихід_місцезнаходжень як адреса<біб::МісцезнаходженняПерекодованого>,
    вихід_позиції_помилки
  );
}

секція мавка {
  місцева дія вивести_предмет(М: адреса<мавка::Машина>, предмет: адреса<мавка::Предмет>, глибина: позитивне);
}

дія вивести_місцезнаходження(М: адреса<мавка::Машина>, місцезнаходження: мавка::МісцезнаходженняПадіння) -> логічне {
  змінна шлях = місцезнаходження.шлях;
  змінна рядок = місцезнаходження.рядок;

  якщо шлях != пусто {
    якщо М.система.кодування_шляху == мавка::КодуванняТ8 {
      мавка::вивести(М, т8 { шлях.розмір, шлях.дані });
    } інакше {
      мавка::вивести_ю8(М, ю8 { шлях.розмір, шлях.дані });
    }
    мавка::вивести(М, ":");
    мавка::вивести_позитивне(М, рядок);

    вернути так;
  }

  вернути ні;
}

дія надрукувати_падіння(М: адреса<мавка::Машина>, інформація_падіння: адреса<мавка::ІнформаціяПадіння>, предмет_помилки: адреса<мавка::Предмет>) {
  якщо вивести_місцезнаходження(М, інформація_падіння.місцезнаходження) {
    мавка::вивести(М, " ");
  }
  мавка::вивести(М, "падіння: ");
  мавка::вивести_предмет(М, предмет_помилки, 0);
  мавка::вивести(М, "\р");
  змінна виведено_перший_елемент_історії = ні;
  змінна п: позитивне = 0;
  поки п < інформація_падіння.розмір_історії {
    змінна елемент_історії = інформація_падіння.історія[п];
    якщо виведено_перший_елемент_історії == ні {
      мавка::вивести(М, "\рІсторія виконання:\р");
      виведено_перший_елемент_історії = так;
    }
    мавка::вивести(М, "  ");
    мавка::вивести(М, елемент_історії.назва.значення);
    мавка::вивести(М, " в ");
    якщо не вивести_місцезнаходження(М, елемент_історії.місцезнаходження) {
      мавка::вивести(М, "<невідомо>");
    }
    мавка::вивести(М, "\р");
    п += 1;
  }
}

дія діалог_виконати(М: адреса<мавка::Машина>, середовище: адреса<мавка::ПредметСередовища>, значення: т8) {
  змінна діалог_ю8 = ю8"<діалог>";
  змінна стан = мавка::зберегти_стан_розмірів_машини(М);
  змінна результат = мавка::виконати_текст(
    М,
    середовище,
    мавка::створити_предмет_байтів(М, діалог_ю8.розмір, діалог_ю8.дані),
    значення
  );
  якщо мавка::перевірити_чи_стан_падіння(М) {
    змінна інформація_падіння = мавка::отримати_інформацію_падіння(М);
    надрукувати_падіння(М, інформація_падіння, М.предмет_падіння);
    мавка::знищити_інформацію_падіння(М, інформація_падіння);
    мавка::відновити_стан_розмірів_машини(М, стан);
    М.стан_падіння = позитивне(ні);
    М.предмет_падіння = пусто;
  } інакше {
    мавка::вивести_предмет(М, результат, 1);
    мавка::вивести(М, "\р");
  }
}

структура ДаніДіалогу {
  М: адреса<мавка::Машина>;
  глобально_притриманий_предмет_середовища: адреса<мавка::ГлобальноПритриманийПредмет>;
}

дія обробник_вводу_діалогу(турбіна: адреса<турбо::Турбіна>, аргумент: невідома_адреса, скасовано: логічне, розмір_префікса: позитивне, дані_префікса: памʼять<п8>, розмір: позитивне, дані: памʼять<п8>) {
  змінна дані_діалогу = аргумент як адреса<ДаніДіалогу>;
  змінна М = дані_діалогу.М;

  якщо скасовано {
    мавка::відпустити_глобально(М, дані_діалогу.глобально_притриманий_предмет_середовища);
    мавка::звільнити(М, дані_діалогу);
    мавка::звільнити_памʼять(М, дані_префікса);
  } інакше {
    змінна значення = ю8 { розмір, дані };

    якщо значення.розмір > 0 {
      змінна значення_т8 = т8 { 0, пусто };
      
      змінна позиція_помилки_перекодування: натуральне = 0;
      якщо не мавка::перекодувати_ю8_в_т8(М, мавка::ОпціїПерекодуванняЮ8вТ8 { з_кінцем = ні, екранувати_невідомі = так }, значення, значення_т8::адреса, пусто, позиція_помилки_перекодування::адреса) {
        біб::надрукувати("Не вдалось перекодувати в т8");
      } інакше {
        діалог_виконати(
          М, 
          мавка::отримати_глобально_притриманий_предмет(М, дані_діалогу.глобально_притриманий_предмет_середовища) як адреса<мавка::ПредметСередовища>, 
          значення_т8
        );

        мавка::звільнити_памʼять(М, значення_т8.дані);
      }
    }

    мавка::звільнити_памʼять(М, значення.дані);

    турбо::прочитати_ввід_ю8(турбіна, обробник_вводу_діалогу, дані_діалогу, ю8 { розмір_префікса, дані_префікса });
  }
}

дія почати_діалог(М: адреса<мавка::Машина>) {
  змінна предмет_середовища = мавка::створити_предмет_середовища(М, М.предмет_глобального_середовища, пусто, пусто);

  змінна дані_діалогу = мавка::виділити<ДаніДіалогу>(М);
  дані_діалогу.М = М;
  дані_діалогу.глобально_притриманий_предмет_середовища = мавка::притримати_глобально(М, предмет_середовища як адреса<мавка::Предмет>);

  змінна турбіна = турбо::отримати_глобальну_турбіну();

  змінна розмір_префікса: позитивне = 2;
  змінна дані_префікса = мавка::виділити_памʼять<п8>(М, розмір_префікса);
  дані_префікса[0] = 45; // "-"
  дані_префікса[1] = 32; // " "

  турбо::прочитати_ввід_ю8(турбіна, обробник_вводу_діалогу, дані_діалогу, ю8 { розмір_префікса, дані_префікса });
}

дія створити_машину() -> адреса<мавка::Машина> {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  змінна М = біб::виділити<мавка::Машина>(системний_виділяч);

  мавка::налаштувати_машину(М, мавка::Система {
    виділити_сиру_памʼять = машина_виділити_сиру_памʼять,
    перевиділити_сиру_памʼять = машина_перевиділити_сиру_памʼять,
    звільнити_сиру_памʼять = машина_звільнити_сиру_памʼять,
    вийти = машина_вийти,
    прочитати_файл = машина_прочитати_файл,
    отримати_абсолютний_шлях = машина_отримати_абсолютний_шлях,
    отримати_абсолютний_зовнішній_шлях = машина_отримати_абсолютний_зовнішній_шлях,
    отримати_назву_файлу_без_розширення = машина_отримати_назву_файлу_без_розширення,
    перевірити_чи_шлях_існує_і_є_файлом = машина_перевірити_чи_шлях_існує_і_є_файлом,
    вивести = машина_вивести,
    вивести_ю8 = машина_вивести_ю8,
    вивести_байти = машина_вивести_байти,
    спустити_виведене = машина_спустити_виведене,
    перетворити_ц64_на_т8 = машина_перетворити_ц64_на_т8,
    перетворити_н64_на_т8 = машина_перетворити_н64_на_т8,
    перетворити_д64_на_т8 = машина_перетворити_д64_на_т8,
    перетворити_т8_на_ц64 = машина_перетворити_т8_на_ц64,
    перетворити_т8_на_н64 = машина_перетворити_т8_на_н64,
    перетворити_т8_на_д64 = машина_перетворити_т8_на_д64,
    кодування_шляху = мавка::КодуванняЮ8,
    кодування_файлів = мавка::КодуванняЮ8,
    перекодувати_ю8_в_т8 = машина_перекодувати_ю8_в_т8,
    перекодувати_т8_в_ю8 = машина_перекодувати_т8_в_ю8,
    завантажити_розширення = машина_завантажити_розширення
  });
  М.обробник_взяття = машина_обробник_взяття;

  змінна дані_машини = біб::виділити<ДаніМашини>(системний_виділяч);
  дані_машини.шлях_до_папки_виконання = мавка::Байти { 0, пусто };
  мавка_система_отримати_поточну_папку_процесу(дані_машини.шлях_до_папки_виконання::адреса);
  М.дані = дані_машини;

  вернути М;
}

дія знищити_машину(М: адреса<мавка::Машина>) {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  змінна дані_машини = М.дані як адреса<ДаніМашини>;
  біб::звільнити_памʼять(системний_виділяч, дані_машини.шлях_до_папки_виконання.дані);
  біб::звільнити(системний_виділяч, дані_машини);
  мавка::очистити(М);
  мавка::розлаштувати_машину(М);
  біб::звільнити(системний_виділяч, М);
}

зовнішня дія запустити_мавку(кількість_аргументів: ц32, аргументи: памʼять<мавка::Байти>) -> ц32 {
  змінна системний_виділяч = біб::отримати_системний_виділяч();

  змінна турбіна = турбо::створити_турбіну(системний_виділяч);

  турбо::змінити_глобальну_турбіну(турбіна);

  змінна М = створити_машину();

  мавка::визначити_глобальні(М);
  якщо мавка::перевірити_чи_стан_падіння(М) {
    змінна інформація_падіння = мавка::отримати_інформацію_падіння(М);
    надрукувати_падіння(М, інформація_падіння, М.предмет_падіння);
    мавка::знищити_інформацію_падіння(М, інформація_падіння);
    знищити_машину(М);
    турбо::знищити_турбіну(турбіна);
    вернути 1;
  }

  якщо кількість_аргументів == 1 {
    мавка::вивести(М, "Діалог Мавки ");
    змінна версія_мавки = мавка::отримати_версію_мавки_як_т8(М);
    мавка::надрукувати(М, версія_мавки);
    мавка::звільнити_памʼять(М, версія_мавки.дані);
    почати_діалог(М);
  } інакше {
    змінна шлях_до_файлу = мавка::Байти { аргументи[1].розмір, аргументи[1].дані };
    якщо не мавка_система_отримати_абсолютний_шлях(шлях_до_файлу::адреса, шлях_до_файлу::адреса) {
      // потім: помилка
    }
    змінна назва_файлу_без_розширення: мавка::Байти;
    якщо не мавка_система_отримати_назву_файлу_без_розширення(шлях_до_файлу::адреса, назва_файлу_без_розширення::адреса) {
      // потім: помилка
    }
    змінна назва_модуля_т8 = т8 { 0, пусто };
    якщо не мавка::перекодувати_ю8_в_т8(М, мавка::ОпціїПерекодуванняЮ8вТ8 { з_кінцем = ні, екранувати_невідомі = ні }, ю8 { назва_файлу_без_розширення.розмір, назва_файлу_без_розширення.дані }, назва_модуля_т8::адреса, пусто, пусто) {
      // потім: помилка
    }
    
    мавка::взяти_модуль(
      М, 
      пусто, 
      мавка::створити_предмет_тексту_без_копіювання(М, назва_модуля_т8), 
      мавка::створити_предмет_байтів_без_копіювання(М, шлях_до_файлу.розмір, шлях_до_файлу.дані)
    );

    якщо мавка::перевірити_чи_стан_падіння(М) {
      змінна інформація_падіння = мавка::отримати_інформацію_падіння(М);
      надрукувати_падіння(М, інформація_падіння, М.предмет_падіння);
      мавка::знищити_інформацію_падіння(М, інформація_падіння);
      знищити_машину(М);
      турбо::знищити_турбіну(турбіна);
      вернути 1;
    }

    мавка::обробити_чергу_запланованих_виконань(М);
    якщо мавка::перевірити_чи_стан_падіння(М) {
      змінна інформація_падіння = мавка::отримати_інформацію_падіння(М);
      надрукувати_падіння(М, інформація_падіння, М.предмет_падіння);
      мавка::знищити_інформацію_падіння(М, інформація_падіння);
      знищити_машину(М);
      турбо::знищити_турбіну(турбіна);
      вернути 1;
    }
  }

  змінна помилка_турбіни = турбо::ПомилкаВідкликуТурбіни { ... };

  змінна результат_турбіни = турбо::запустити_турбіну(турбіна, пусто, відклик_після_події_турбіни, М, помилка_турбіни::адреса);
  якщо результат_турбіни == ні {
    якщо помилка_турбіни.тип == турбо::ТипПомилкиВідкликуТурбіниКористувацький {
      змінна інформація_падіння = мавка::отримати_інформацію_падіння(М);
      надрукувати_падіння(М, інформація_падіння, помилка_турбіни.дані як адреса<мавка::Предмет>);
      мавка::знищити_інформацію_падіння(М, інформація_падіння);
      знищити_машину(М);
      турбо::знищити_турбіну(турбіна);
      вернути 1;
    }
  }

  знищити_машину(М);

  турбо::знищити_турбіну(турбіна);

  вернути 0;
}