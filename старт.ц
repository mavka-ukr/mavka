взяти визначення визначення/мавка;
взяти визначення МаМа;

зовнішня дія мавка_система_виділити_сиру_памʼять(розмір: позитивне): памʼять<п8>;
зовнішня дія мавка_система_певиділити_сиру_памʼять(значення: памʼять<п8>, новий_розмір: позитивне): памʼять<п8>;
зовнішня дія мавка_система_звільнити_сиру_памʼять(значення: памʼять<п8>);
зовнішня дія мавка_система_фс_отримати_назву_файла_без_розширення(шлях: памʼять<п8>, розмір_шляху: позитивне, вихід: адреса<памʼять<п8>>, вихід_розміру: адреса<позитивне>): логічне;
зовнішня дія мавка_система_фс_прочитати_файл(шлях: памʼять<п8>, розмір_шляху: позитивне, вихід: адреса<памʼять<п8>>, вихід_розміру: адреса<позитивне>): логічне;
зовнішня дія мавка_система_фс_виправити_шлях_та_зробити_абсолютним(шлях: памʼять<п8>, розмір_шляху: позитивне, вихід: адреса<памʼять<п8>>, вихід_розміру: адреса<позитивне>): логічне;
зовнішня дія мавка_система_фс_виправити_шлях_та_отримати_батьківський(шлях: памʼять<п8>, розмір_шляху: позитивне, вихід: адреса<памʼять<п8>>, вихід_розміру: адреса<позитивне>): логічне;
зовнішня дія мавка_система_вв_вивести_в_стандартний_вивід(значення: памʼять<п8>, розмір_значення: позитивне);
зовнішня дія мавка_система_вв_вивести_ю8_в_стандартний_вивід(значення: памʼять<п8>, розмір_значення: позитивне);
зовнішня дія мавка_система_процес_вийти(код: ц32);
зовнішня дія мавка_система_прочитати_зі_стандартного_вводу(префікс: памʼять<п8>, розмір_префіксу: позитивне, вихід: адреса<памʼять<п8>>, вихід_розміру: адреса<позитивне>): логічне;
зовнішня дія мавка_система_відкрити_поширену_бібліотеку(шлях: памʼять<п8>, розмір_шляху: позитивне): невідома_адреса;
зовнішня дія мавка_система_закрити_поширену_бібліотеку(поширена_бібліотека: невідома_адреса);
зовнішня дія мавка_система_отримати_символ_поширеної_бібліотеки(поширена_бібліотека: невідома_адреса, назва_символа: памʼять<п8>, розмір_назви_символа: позитивне): невідома_адреса;

дія нативна_дія_мавки_друк(предмет_нативної_дії: адреса<мавка::Предмет>, обчислювач: адреса<мавка::Обчислювач>, предмет_я: адреса<мавка::Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<мавка::Предмет>>, іменовані_аргументи: адреса<мавка::ІменованіАргументи>, дані: адреса): мавка::Результат {
  якщо аргументи != пусто {
    змінна ціль па: позитивне = 0;
    поки па < кількість_аргументів {
      ціль значення_ю8 = ю8 { 0, пусто };
      мавка::отримати_текстове_зображення_предмета_як_ю8(аргументи[па], обчислювач, значення_ю8::адреса);
      мавка::вивести_ю8(обчислювач, значення_ю8);
      мавка::звільнити(обчислювач, значення_ю8.дані як адреса);
      якщо (па + 1) < кількість_аргументів {
        мавка::вивести_ю8(обчислювач, ю8" ");
      }
      па += 1;
    }
    мавка::вивести_ю8(обчислювач, ю8"\n");
  }
  вернути мавка::результат_успіх(обчислювач, пусто);
}

дія надрукувати_помилку(обчислювач: адреса<мавка::Обчислювач>, шлях: памʼять<п8>, рядок: позитивне, повідомлення: памʼять<п8>) {
  мавка::вивести_ю8(обчислювач, ю8 { мавка::допоміжне::порахувати_розмір_ю8сі(шлях), шлях });
  мавка::вивести_ю8(обчислювач, ю8":");
  мавка::вивести_п64(обчислювач, п64(рядок));
  мавка::вивести_ю8(обчислювач, ю8": ");
  мавка::надрукувати_ю8(обчислювач, ю8 { мавка::допоміжне::порахувати_розмір_ю8сі(повідомлення), повідомлення });
}

дія надрукувати_помилку(обчислювач: адреса<мавка::Обчислювач>, шлях: ю8, рядок: позитивне, повідомлення: памʼять<п8>) {
  мавка::вивести_ю8(обчислювач, шлях);
  мавка::вивести_ю8(обчислювач, ю8":");
  мавка::вивести_п64(обчислювач, п64(рядок));
  мавка::вивести_ю8(обчислювач, ю8": ");
  мавка::надрукувати_ю8(обчислювач, ю8 { мавка::допоміжне::порахувати_розмір_ю8сі(повідомлення), повідомлення });
}

дія надрукувати_помилку(обчислювач: адреса<мавка::Обчислювач>, шлях: ю8, рядок: позитивне, повідомлення: ю8) {
  мавка::вивести_ю8(обчислювач, шлях);
  мавка::вивести_ю8(обчислювач, ю8":");
  мавка::вивести_п64(обчислювач, п64(рядок));
  мавка::вивести_ю8(обчислювач, ю8": ");
  мавка::надрукувати_ю8(обчислювач, повідомлення);
}

дія надрукувати_помилку(обчислювач: адреса<мавка::Обчислювач>, повідомлення: памʼять<п8>) {
  мавка::надрукувати_ю8(обчислювач, ю8 { мавка::допоміжне::порахувати_розмір_ю8сі(повідомлення), повідомлення });
}

дія надрукувати_помилку(обчислювач: адреса<мавка::Обчислювач>, повідомлення: ю8) {
  мавка::надрукувати_ю8(обчислювач, повідомлення);
}

дія надрукувати_падіння(обчислювач: адреса<мавка::Обчислювач>, значення: адреса<мавка::Предмет>, падіння: адреса<мавка::Падіння>) {
  ціль значення_ю8 = ю8 { 0, пусто };
  мавка::отримати_текстове_зображення_предмета_як_ю8(значення, обчислювач, значення_ю8::адреса);
  якщо падіння.місцезнаходження != пусто {
    надрукувати_помилку(
      обчислювач,
      мавка::отримати_шлях_до_файлу_з_місцезнаходження_падіння(обчислювач, падіння.місцезнаходження),
      мавка::отримати_рядок_з_місцезнаходження_падіння(обчислювач, падіння.місцезнаходження),
      значення_ю8
    );
  } інакше {
    надрукувати_помилку(обчислювач, значення_ю8);
  }
  мавка::звільнити_памʼять(обчислювач, значення_ю8.дані);
}

дія обчислювач_виділити_сиру_памʼять(розмір: позитивне): памʼять<п8> {
  вернути мавка_система_виділити_сиру_памʼять(розмір);
}

дія обчислювач_перевиділити_сиру_памʼять(значення: памʼять<п8>, новий_розмір: позитивне): памʼять<п8> {
  вернути мавка_система_певиділити_сиру_памʼять(значення, новий_розмір);
}

дія обчислювач_звільнити_сиру_памʼять(значення: памʼять<п8>) {
  мавка_система_звільнити_сиру_памʼять(значення);
}

дія обчислювач_вивести_в_стандартний_вивід(значення: памʼять<п8>, розмір: позитивне) {
  мавка_система_вв_вивести_в_стандартний_вивід(значення, розмір);
}

дія обчислювач_вивести_т8_в_стандартний_вивід(значення: т8) {
  мавка_система_вв_вивести_ю8_в_стандартний_вивід(значення.дані, значення.розмір); // потім: перекодувати в ю8
}

дія обчислювач_вивести_ю8_в_стандартний_вивід(значення: ю8) {
  мавка_система_вв_вивести_ю8_в_стандартний_вивід(значення.дані, значення.розмір);
}

дія обчислювач_вийти_з_процесу(код: ц32) {
  мавка_система_процес_вийти(код);
}

дія обчислювач_прочитати_файл(шлях: ю8, вихід: адреса<ю8>): логічне {
  вернути мавка_система_фс_прочитати_файл(шлях.дані, шлях.розмір, вихід.дані::адреса, вихід.розмір::адреса);
}

дія обчислювач_отримати_абсолютний_шлях(шлях: ю8, вихід: адреса<ю8>): логічне {
  вернути мавка_система_фс_виправити_шлях_та_зробити_абсолютним(шлях.дані, шлях.розмір, вихід.дані::адреса, вихід.розмір::адреса);
}

дія обчислювач_отримати_абсолютний_батьківський_шлях(шлях: ю8, вихід: адреса<ю8>): логічне {
  вернути мавка_система_фс_виправити_шлях_та_отримати_батьківський(шлях.дані, шлях.розмір, вихід.дані::адреса, вихід.розмір::адреса);
}

дія обчислювач_прочитати_ю8_зі_стандартного_вводу(префікс: ю8, вихід: адреса<ю8>): логічне {
  вернути мавка_система_прочитати_зі_стандартного_вводу(префікс.дані, префікс.розмір, вихід.дані::адреса, вихід.розмір::адреса);
}

дія обчислювач_прочитати_т8_зі_стандартного_вводу(префікс: т8, вихід: адреса<т8>): логічне {
  вернути мавка_система_прочитати_зі_стандартного_вводу(префікс.дані, префікс.розмір, вихід.дані::адреса, вихід.розмір::адреса); // потім: перекодувати
}

дія обчислювач_відкрити_поширену_бібліотеку(шлях: памʼять<п8>, розмір_шляху: позитивне): невідома_адреса {
  вернути мавка_система_відкрити_поширену_бібліотеку(шлях, розмір_шляху);
}

дія обчислювач_закрити_поширену_бібліотеку(поширена_бібліотека: невідома_адреса) {
  мавка_система_закрити_поширену_бібліотеку(поширена_бібліотека);
}

дія обчислювач_отримати_символ_поширеної_бібліотеки(поширена_бібліотека: невідома_адреса, назва_символа: памʼять<п8>, розмір_назви_символа: позитивне): невідома_адреса {
  вернути мавка_система_отримати_символ_поширеної_бібліотеки(поширена_бібліотека, назва_символа, розмір_назви_символа);
}

зовнішня дія стартувати_мавку(кількість_аргументів: ц32, аргументи: памʼять<памʼять<п8>>): ц32 {
  ціль обчислювач = мавка::створити_обчислювач(мавка::Система {
    виділити_сиру_памʼять = обчислювач_виділити_сиру_памʼять,
    перевиділити_сиру_памʼять = обчислювач_перевиділити_сиру_памʼять,
    звільнити_сиру_памʼять = обчислювач_звільнити_сиру_памʼять,
    вивести_в_стандартний_вивід = обчислювач_вивести_в_стандартний_вивід,
    вивести_т8_в_стандартний_вивід = обчислювач_вивести_т8_в_стандартний_вивід,
    вивести_ю8_в_стандартний_вивід = обчислювач_вивести_ю8_в_стандартний_вивід,
    вийти_з_процесу = обчислювач_вийти_з_процесу,
    отримати_абсолютний_шлях = обчислювач_отримати_абсолютний_шлях,
    отримати_абсолютний_батьківський_шлях = обчислювач_отримати_абсолютний_батьківський_шлях,
    прочитати_файл = обчислювач_прочитати_файл,
    прочитати_ю8_зі_стандартного_вводу = обчислювач_прочитати_ю8_зі_стандартного_вводу,
    прочитати_т8_зі_стандартного_вводу = обчислювач_прочитати_т8_зі_стандартного_вводу,
    відкрити_поширену_бібліотеку = обчислювач_відкрити_поширену_бібліотеку,
    закрити_поширену_бібліотеку = обчислювач_закрити_поширену_бібліотеку,
    отримати_символ_поширеної_бібліотеки = обчислювач_отримати_символ_поширеної_бібліотеки,
  });
  мавка::визначити_глобальний_підмет(обчислювач, мавка::назва(обчислювач, т8"друк"), мавка::створити_нативну_дію(обчислювач, мавка::назва(обчислювач, т8"друк"), нативна_дія_мавки_друк, пусто, пусто));

  якщо кількість_аргументів == 1 {
    ціль результат = мавка::почати_діалог(обчислювач);
    вернути 0;
  } інакше {
    ціль перший_аргумент = ю8 { мавка::допоміжне::порахувати_розмір_ю8сі(аргументи[1]), аргументи[1] };
    якщо мавка::допоміжне::перевірити_чи_ю8_рівні(перший_аргумент, ю8"допомога") == так {

    } інакше {
      ціль назва_файлу_без_розширення = ю8 { 0, пусто };
      якщо мавка_система_фс_отримати_назву_файла_без_розширення(перший_аргумент.дані, перший_аргумент.розмір, назва_файлу_без_розширення.дані::адреса, назва_файлу_без_розширення.розмір::адреса) == ні {
        // потім: помилка
        вернути 1;
      }
      змінна ціль назва_файлу_без_розширення_т8 = т8 { 0, пусто };
      якщо МаМа::перекодувати_ю8_в_т8(обчислювач.М, назва_файлу_без_розширення, назва_файлу_без_розширення_т8::адреса, ні) == ні {
        // потім: помилка
        вернути 0;
      }
      ціль результат_взяття_модуля = мавка::взяти_файл_ю8(обчислювач, мавка::назва(обчислювач, назва_файлу_без_розширення_т8), перший_аргумент);
      якщо результат_взяття_модуля.падіння != пусто {
        надрукувати_падіння(обчислювач, результат_взяття_модуля.значення, результат_взяття_модуля.падіння);
        вернути 1;
      }
    }
  }

  вернути 0;
}