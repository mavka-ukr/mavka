зовнішня дія мавка_система_виділити_сиру_памʼять(розмір: позитивне): памʼять<п8>;
зовнішня дія мавка_система_перевиділити_сиру_памʼять(значення: памʼять<п8>, розмір: позитивне): памʼять<п8>;
зовнішня дія мавка_система_звільнити_сиру_памʼять(значення: памʼять<п8>);

секція МаМа {
  структура Машина;
  структура Предмет;
}

секція мавка {
  синонім Предмет = МаМа::Предмет;
  синонім Обчислювач = МаМа::Машина;

  структура Результат {
    стан_падіння: позитивне;
    значення: адреса<Предмет>;
  }

  структура Місцезнаходження {
    шлях: адреса<Предмет>;
    рядок: позитивне;
  }

  структура ЕлементІсторіїВиконання {
    місцезнаходження: Місцезнаходження;
    назва: т8;
  }

  структура ІнформаціяПадіння {
    місцезнаходження: Місцезнаходження;
    розмір_історії: позитивне;
    історія: памʼять<ЕлементІсторіїВиконання>;
  }

  структура ЕлементСловника {
    ключ: адреса<Предмет>;
    значення: адреса<Предмет>;
  }

  структура ЕлементМодуля {
    назва: адреса<Предмет>;
    значення: адреса<Предмет>;
  }

  структура ІменованіАргументи {
    кількість: позитивне;
    дані: невідома_памʼять;
  }

  дія виділити<Т>(обчислювач: адреса<Обчислювач>): адреса<Т>;
  дія перевиділити<Т>(обчислювач: адреса<Обчислювач>, значення: адреса<Т>, кількість: позитивне): памʼять<Т>;
  дія звільнити(обчислювач: адреса<Обчислювач>, значення: невідома_адреса);
  дія виділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, кількість: позитивне): памʼять<Т>;
  дія перевиділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т>;
  дія звільнити_памʼять(обчислювач: адреса<Обчислювач>, значення: невідома_памʼять);

  дія виділити<Т>(обчислювач: адреса<Обчислювач>): адреса<Т> {
    вернути мавка_система_виділити_сиру_памʼять(Т.розмір) як адреса<Т>;
  }

  дія перевиділити<Т>(обчислювач: адреса<Обчислювач>, значення: адреса<Т>, кількість: позитивне): памʼять<Т> {
    вернути мавка_система_перевиділити_сиру_памʼять(значення як памʼять<п8>, кількість * Т.розмір) як памʼять<Т>;
  }

  дія звільнити(обчислювач: адреса<Обчислювач>, значення: невідома_адреса) {
    мавка_система_звільнити_сиру_памʼять(значення як памʼять<п8>);
  }

  дія виділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, кількість: позитивне): памʼять<Т> {
    вернути мавка_система_виділити_сиру_памʼять(кількість * Т.розмір) як памʼять<Т>;
  }

  дія перевиділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т> {
    вернути мавка_система_перевиділити_сиру_памʼять(значення як памʼять<п8>, кількість * Т.розмір) як памʼять<Т>;
  }

  дія звільнити_памʼять(обчислювач: адреса<Обчислювач>, значення: невідома_памʼять) {
    мавка_система_звільнити_сиру_памʼять(значення як памʼять<п8>);
  }

  синонім РіднаДія = (обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження) -> Результат;
  синонім ЗробитиКопіюДанихПредметаДії = (обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>) -> невідома_адреса;
  синонім ВідкликПередЗвільненнямПредметаДії = (обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>) -> ніщо;

  зовнішня дія створити_обчислювач(): адреса<Обчислювач>;
  зовнішня дія знищити_обчислювач(обчислювач: адреса<Обчислювач>);
  зовнішня дія визначити_глобальні(обчислювач: адреса<Обчислювач>): Результат;
  зовнішня дія взяти_файл_шлях_ю8(обчислювач: адреса<Обчислювач>, шлях: ю8): Результат;
  зовнішня дія почати_діалог(обчислювач: адреса<Обчислювач>);

  зовнішня дія отримати_інформацію_падіння(обчислювач: адреса<Обчислювач>): адреса<ІнформаціяПадіння>;
  зовнішня дія знищити_інформацію_падіння(обчислювач: адреса<Обчислювач>, інформація_падіння: адреса<ІнформаціяПадіння>);
  зовнішня дія вивести_предмет(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, глибина: позитивне);
  зовнішня дія перевірити_стан_падіння(обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія увімкнути_стан_падіння(обчислювач: адреса<Обчислювач>, місцезнаходження: Місцезнаходження);
  зовнішня дія вимкнути_стан_падіння(обчислювач: адреса<Обчислювач>);
  зовнішня дія змінити_в_глобальному_середовищі(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, значення: адреса<Предмет>): Результат;
  зовнішня дія надрукувати_падіння(обчислювач: адреса<Обчислювач>, інформація_падіння: адреса<ІнформаціяПадіння>, предмет_помилки: адреса<Предмет>);

  зовнішня дія назва(обчислювач: адреса<Обчислювач>, значення: т8): адреса<Предмет>;
  зовнішня дія створити_структуру(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, предок: адреса<Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<Предмет>>): Результат;
  зовнішня дія створити_рідну_дію(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<Предмет>>, тип_результату: адреса<Предмет>, рідна_дія: РіднаДія): Результат;
  зовнішня дія створити_число(обчислювач: адреса<Обчислювач>, значення: д64): Результат;
  зовнішня дія створити_текст(обчислювач: адреса<Обчислювач>, значення: т8): Результат;
  зовнішня дія створити_юнікод(обчислювач: адреса<Обчислювач>, значення: ю32): Результат;
  зовнішня дія створити_юнікод_з_ю8(обчислювач: адреса<Обчислювач>, значення: ю8): Результат;
  зовнішня дія створити_список(обчислювач: адреса<Обчислювач>, кількість_елементів: позитивне, елементи: памʼять<адреса<Предмет>>): Результат;
  зовнішня дія створити_словник(обчислювач: адреса<Обчислювач>, кількість_елементів: позитивне, елементи: памʼять<ЕлементСловника>): Результат;
  зовнішня дія створити_байти(обчислювач: адреса<Обчислювач>, розмір: позитивне, дані: памʼять<п8>): Результат;
  зовнішня дія створити_модуль(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, кількість_елементів: позитивне, елементи: памʼять<ЕлементМодуля>): Результат;
  зовнішня дія створити_тип(обчислювач: адреса<Обчислювач>, може_бути_пусто: логічне, кількість_допустимих_структур: позитивне, допустимі_структури: памʼять<адреса<Предмет>>): Результат;
  зовнішня дія створити_параметр(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, тип: адреса<Предмет>, код: адреса<Предмет>): Результат;
  зовнішня дія створити_розширення(обчислювач: адреса<Обчислювач>, Р: невідома_адреса, значення: адреса<Предмет>, відклик_перед_знищенням: (обчислювач: адреса<Обчислювач>, предмет_розширення: адреса<Предмет>) -> ніщо): Результат;
  зовнішня дія отримати_Р_з_розширення(обчислювач: адреса<Обчислювач>, предмет_розширення: адреса<Предмет>): невідома_адреса;

  зовнішня дія змінити_властивість(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, назва: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): Результат;

  зовнішня дія перевірити_чи_предмети_рівні(обчислювач: адреса<Обчислювач>, а: адреса<Предмет>, б: адреса<Предмет>): логічне;

  зовнішня дія вивести_т8(обчислювач: адреса<Обчислювач>, значення: т8);
  зовнішня дія вивести_ю8(обчислювач: адреса<Обчислювач>, значення: ю8);
  зовнішня дія вивести_ю32(обчислювач: адреса<Обчислювач>, значення: ю32);
  зовнішня дія вивести_позитивне(обчислювач: адреса<Обчислювач>, значення: позитивне);
  зовнішня дія вивести_д64(обчислювач: адреса<Обчислювач>, значення: д64);
  зовнішня дія надрукувати_т8(обчислювач: адреса<Обчислювач>, значення: т8);
  зовнішня дія надрукувати_ю8(обчислювач: адреса<Обчислювач>, значення: ю8);
  зовнішня дія надрукувати_позитивне(обчислювач: адреса<Обчислювач>, значення: позитивне);
  зовнішня дія надрукувати_д64(обчислювач: адреса<Обчислювач>, значення: д64);

  синонім ОбробникВзяттяБіб = (обчислювач: адреса<Обчислювач>, розмір_шляху: позитивне, шлях: памʼять<адреса<Предмет>>) -> Результат;

  зовнішня дія встановити_обробник_взяття_біб(обчислювач: адреса<Обчислювач>, обробник_взяття_біб: ОбробникВзяттяБіб);

  дія успіх(обчислювач: адреса<Обчислювач>, значення: адреса<Предмет>): Результат {
    вернути Результат { позитивне(ні), значення };
  }

  дія падіння(обчислювач: адреса<Обчислювач>, значення: адреса<Предмет>): Результат {
    увімкнути_стан_падіння(обчислювач, Місцезнаходження { пусто, 0 });
    вернути Результат { позитивне(так), значення };
  }

  дія падіння(обчислювач: адреса<Обчислювач>, значення: т8): Результат {
    ціль результат = створити_текст(обчислювач, значення);
    якщо результат.стан_падіння == позитивне(так) {
      вернути результат;
    }
    увімкнути_стан_падіння(обчислювач, Місцезнаходження { пусто, 0 });
    вернути Результат { позитивне(так), результат.значення };
  }
}