зовнішня дія мавка_система_виділити_сиру_памʼять(розмір: позитивне): памʼять<п8>;
зовнішня дія мавка_система_перевиділити_сиру_памʼять(значення: памʼять<п8>, розмір: позитивне): памʼять<п8>;
зовнішня дія мавка_система_звільнити_сиру_памʼять(значення: памʼять<п8>);

секція мавка {
  дія отримати_версію_мавки_як_т8(): т8 {
    вернути "0.120.0";
  }
}

секція МаМа {
  структура Машина;
  структура Предмет;
}

секція мавка {
  синонім ЧИСЛО_Е = 2.71828182845904523536; // е
  синонім ЧИСЛО_ЛОГ2Е = 1.44269504088896340736; // лог2(е)
  синонім ЧИСЛО_ЛОГ10Е = 0.434294481903251827651; // лог10(е)
  синонім ЧИСЛО_ЛОГ2 = 0.693147180559945309417; // ln(2)
  синонім ЧИСЛО_ЛОГ10 = 2.30258509299404568402; // ln(10)
  синонім ЧИСЛО_ПІ = 3.14159265358979323846; // π
  синонім ЧИСЛО_КОРІНЬ2 = 1.41421356237309504880; // корінь(2)
  синонім ЧИСЛО_КОРІНЬ1_2 = 0.707106781186547524401; // корінь(1/2)
}

секція мавка {
  структура Спроба;
  структура ПритримувачПредметів;
  структура ГлобальноПритриманийПредмет;

  синонім Предмет = МаМа::Предмет;
  синонім Обчислювач = МаМа::Машина;

  синонім предмет_або_стан_падіння = адреса<Предмет>;

  структура Місцезнаходження {
    шлях: адреса<Предмет>;
    рядок: позитивне;
  }

  структура ЕлементІсторіїВиконання {
    місцезнаходження: Місцезнаходження;
    назва: т8;
  }

  структура ІнформаціяПадіння {
    місцезнаходження: Місцезнаходження;
    розмір_історії: позитивне;
    історія: памʼять<ЕлементІсторіїВиконання>;
  }

  структура ЕлементСловника {
    ключ: адреса<Предмет>;
    значення: адреса<Предмет>;
  }

  структура ЕлементМодуля {
    назва: адреса<Предмет>;
    значення: адреса<Предмет>;
  }

  структура ІменованіАргументи;

  структура Байти {
    розмір: позитивне;
    дані: памʼять<п8>;
  }

  структура ЕлементиСписку {
    розмір: позитивне;
    дані: памʼять<адреса<Предмет>>;
  }

  структура ЕлементиСловника {
    розмір: позитивне;
    дані: памʼять<ЕлементСловника>;
  }

  дія виділити<Т>(обчислювач: адреса<Обчислювач>): адреса<Т>;
  дія перевиділити<Т>(обчислювач: адреса<Обчислювач>, значення: адреса<Т>, кількість: позитивне): памʼять<Т>;
  дія звільнити(обчислювач: адреса<Обчислювач>, значення: невідома_адреса);
  дія виділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, кількість: позитивне): памʼять<Т>;
  дія перевиділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т>;
  дія звільнити_памʼять(обчислювач: адреса<Обчислювач>, значення: невідома_памʼять);

  дія виділити<Т>(обчислювач: адреса<Обчислювач>): адреса<Т> {
    вернути мавка_система_виділити_сиру_памʼять(Т.розмір) як адреса<Т>;
  }

  дія перевиділити<Т>(обчислювач: адреса<Обчислювач>, значення: адреса<Т>, кількість: позитивне): памʼять<Т> {
    вернути мавка_система_перевиділити_сиру_памʼять(значення як памʼять<п8>, кількість * Т.розмір) як памʼять<Т>;
  }

  дія звільнити(обчислювач: адреса<Обчислювач>, значення: невідома_адреса) {
    мавка_система_звільнити_сиру_памʼять(значення як памʼять<п8>);
  }

  дія виділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, кількість: позитивне): памʼять<Т> {
    вернути мавка_система_виділити_сиру_памʼять(кількість * Т.розмір) як памʼять<Т>;
  }

  дія перевиділити_памʼять<Т>(обчислювач: адреса<Обчислювач>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т> {
    вернути мавка_система_перевиділити_сиру_памʼять(значення як памʼять<п8>, кількість * Т.розмір) як памʼять<Т>;
  }

  дія звільнити_памʼять(обчислювач: адреса<Обчислювач>, значення: невідома_памʼять) {
    мавка_система_звільнити_сиру_памʼять(значення як памʼять<п8>);
  }

  синонім РіднаДія = (обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження) -> адреса<Предмет>;
  синонім ЗробитиКопіюДанихПредметаДії = (обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>) -> невідома_адреса;
  синонім ВідкликПередЗвільненнямПредметаДії = (обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>) -> ніщо;
  синонім ВідкликПередЗнищеннямРесурсу = (обчислювач: адреса<Обчислювач>, предмет_ресурсу: адреса<Предмет>) -> ніщо;

  синонім ОбробникЗаплановаогоВиконання = (обчислювач: адреса<Обчислювач>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>) -> предмет_або_стан_падіння;
  синонім ВідкликПередЗнищеннямЗапланованогоВиконання = (обчислювач: адреса<Обчислювач>, дані: невідома_адреса, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>) -> ніщо;

  зовнішня дія створити_обчислювач(): адреса<Обчислювач>;
  зовнішня дія знищити_обчислювач(обчислювач: адреса<Обчислювач>);
  зовнішня дія визначити_глобальні(обчислювач: адреса<Обчислювач>): предмет_або_стан_падіння;
  зовнішня дія взяти_файл_шлях_ю8(обчислювач: адреса<Обчислювач>, шлях: ю8): предмет_або_стан_падіння;
  зовнішня дія почати_діалог(обчислювач: адреса<Обчислювач>);
  зовнішня дія обробити_чергу_запланованих_виконань(обчислювач: адреса<Обчислювач>): адреса<Предмет>;
  зовнішня дія запланувати_виконання(обчислювач: адреса<Обчислювач>, обробник: ОбробникЗаплановаогоВиконання, дані: невідома_адреса, відклик_перед_знищенням: ВідкликПередЗнищеннямЗапланованогоВиконання, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>): логічне;
  зовнішня дія отримати_предмет_структури_предмет(обчислювач: адреса<Обчислювач>): адреса<Предмет>;

  зовнішня дія почати_спробу(обчислювач: адреса<Обчислювач>): адреса<Спроба>;
  зовнішня дія знищити_спробу(обчислювач: адреса<Обчислювач>, спроба: адреса<Спроба>);
  зовнішня дія перевірити_чи_стан_падіння(обчислювач: адреса<Обчислювач>): логічне;
  зовнішня дія отримати_інформацію_падіння(обчислювач: адреса<Обчислювач>): адреса<ІнформаціяПадіння>;
  зовнішня дія знищити_інформацію_падіння(обчислювач: адреса<Обчислювач>, інформація_падіння: адреса<ІнформаціяПадіння>);
  зовнішня дія вивести_предмет(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, глибина: позитивне);
  зовнішня дія увімкнути_стан_падіння(обчислювач: адреса<Обчислювач>, місцезнаходження: Місцезнаходження);
  зовнішня дія вимкнути_стан_падіння(обчислювач: адреса<Обчислювач>, спроба: адреса<Спроба>);
  зовнішня дія змінити_в_глобальному_середовищі(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, значення: адреса<Предмет>): предмет_або_стан_падіння;
  зовнішня дія надрукувати_падіння(обчислювач: адреса<Обчислювач>, інформація_падіння: адреса<ІнформаціяПадіння>, предмет_помилки: адреса<Предмет>);

  зовнішня дія знайти_іменований_аргумент(обчислювач: адреса<Обчислювач>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Предмет>, вихід: адреса<адреса<Предмет>>): логічне;

  зовнішня дія назва(обчислювач: адреса<Обчислювач>, значення: т8): адреса<Предмет>;
  зовнішня дія створити_структуру(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, предок: адреса<Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<Предмет>>): предмет_або_стан_падіння;
  зовнішня дія створити_рідну_дію_з_даними(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<Предмет>>, тип_результату: адреса<Предмет>, рідна_дія: РіднаДія, дані: невідома_адреса, зробити_копію_даних: ЗробитиКопіюДанихПредметаДії, відклик_перед_звільненням: ВідкликПередЗвільненнямПредметаДії): предмет_або_стан_падіння;
  зовнішня дія створити_рідну_дію(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<Предмет>>, тип_результату: адреса<Предмет>, рідна_дія: РіднаДія): предмет_або_стан_падіння;
  зовнішня дія створити_число(обчислювач: адреса<Обчислювач>, значення: д64): предмет_або_стан_падіння;
  зовнішня дія створити_текст(обчислювач: адреса<Обчислювач>, значення: т8): предмет_або_стан_падіння;
  зовнішня дія створити_текст_без_копіювання(обчислювач: адреса<Обчислювач>, значення: т8): предмет_або_стан_падіння;
  зовнішня дія створити_юнікод(обчислювач: адреса<Обчислювач>, значення: ю32): предмет_або_стан_падіння;
  зовнішня дія створити_юнікод_без_копіювання(обчислювач: адреса<Обчислювач>, значення: ю32): предмет_або_стан_падіння;
  зовнішня дія створити_юнікод_з_ю8(обчислювач: адреса<Обчислювач>, значення: ю8): предмет_або_стан_падіння;
  зовнішня дія створити_список(обчислювач: адреса<Обчислювач>, кількість_елементів: позитивне, елементи: памʼять<адреса<Предмет>>): предмет_або_стан_падіння;
  зовнішня дія створити_словник(обчислювач: адреса<Обчислювач>, кількість_елементів: позитивне, елементи: памʼять<ЕлементСловника>): предмет_або_стан_падіння;
  зовнішня дія створити_байти(обчислювач: адреса<Обчислювач>, розмір: позитивне, дані: памʼять<п8>): предмет_або_стан_падіння;
  зовнішня дія створити_байти_без_копіювання(обчислювач: адреса<Обчислювач>, розмір: позитивне, дані: памʼять<п8>): предмет_або_стан_падіння;
  зовнішня дія створити_буфер(обчислювач: адреса<Обчислювач>, розмір: позитивне, дані: памʼять<п8>): предмет_або_стан_падіння;
  зовнішня дія створити_буфер_без_копіювання(обчислювач: адреса<Обчислювач>, розмір: позитивне, дані: памʼять<п8>): предмет_або_стан_падіння;
  зовнішня дія створити_модуль(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, кількість_елементів: позитивне, елементи: памʼять<ЕлементМодуля>): предмет_або_стан_падіння;
  зовнішня дія створити_ресурс(обчислювач: адреса<Обчислювач>, значення: невідома_адреса, відклик_перед_знищенням: ВідкликПередЗнищеннямРесурсу): предмет_або_стан_падіння;
  зовнішня дія створити_тип(обчислювач: адреса<Обчислювач>, може_бути_пусто: логічне, кількість_допустимих_структур: позитивне, допустимі_структури: памʼять<адреса<Предмет>>): предмет_або_стан_падіння;
  зовнішня дія створити_параметр(обчислювач: адреса<Обчислювач>, назва: адреса<Предмет>, тип: адреса<Предмет>, код: адреса<Предмет>): предмет_або_стан_падіння;
  зовнішня дія створити_розширення(обчислювач: адреса<Обчислювач>, Р: невідома_адреса, значення: адреса<Предмет>, відклик_перед_знищенням: (обчислювач: адреса<Обчислювач>, предмет_розширення: адреса<Предмет>) -> ніщо, притримувач: адреса<ПритримувачПредметів>): предмет_або_стан_падіння;
  зовнішня дія отримати_Р_з_розширення(обчислювач: адреса<Обчислювач>, предмет_розширення: адреса<Предмет>): невідома_адреса;

  зовнішня дія предмет_виконати(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_виконати_властивість(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, назва: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_отримати_властивість(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, назва: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_змінити_властивість(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, назва: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_додати(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_відняти(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_помножити(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_поділити(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_остача(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_неповна_частка(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_степінь(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_зсунути_вліво(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_зсунути_вправо(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_зсунути_вправо_2(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_двійкове_і(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_двійкове_або(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_двійкове_виключне_або(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_двійкове_заперечення(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_менше(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_більше(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_містить(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_числова_негація(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_отримати_число(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_отримати_текст(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_отримати_юнікод(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_отримати_перебір(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_отримати_діапазон(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_записати_метод(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, назва: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;
  зовнішня дія предмет_записати_власну_дію(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, назва: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): предмет_або_стан_падіння;

  зовнішня дія перевірити_чи_предмет_є(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, предмет_структури: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_дією(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_числом(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_текстом(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_юнікодом(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_списком(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_словником(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_байтами(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_буфером(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_модулем(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_ресурсом(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_типом(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_є_параметром(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;
  зовнішня дія отримати_значення_числа(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): д64;
  зовнішня дія отримати_значення_тексту(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): т8;
  зовнішня дія отримати_копію_значення_тексту(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<т8>): логічне;
  зовнішня дія отримати_значення_юнікоду(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): ю32;
  зовнішня дія отримати_копію_значення_юнікоду(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<ю32>): логічне;
  зовнішня дія отримати_копію_значення_юнікоду_як_ю8(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<ю8>): логічне;
  зовнішня дія отримати_копію_елементів_списку(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<ЕлементиСписку>): логічне;
  зовнішня дія отримати_копію_елементів_словника(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<ЕлементиСловника>): логічне;
  зовнішня дія отримати_дані_ресурсу(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): невідома_адреса;
  зовнішня дія отримати_значення_байтів(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): Байти;
  зовнішня дія отримати_копію_значення_байтів(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<Байти>): логічне;
  зовнішня дія отримати_значення_буфера(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): Байти;
  зовнішня дія отримати_копію_значення_буфера(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, вихід: адреса<Байти>): логічне;

  зовнішня дія отримати_дані_дії(обчислювач: адреса<Обчислювач>, предмет_дії: адреса<Предмет>): невідома_адреса;

  зовнішня дія отримати_предмет_логічного_так(обчислювач: адреса<Обчислювач>): адреса<Предмет>;
  зовнішня дія отримати_предмет_логічного_ні(обчислювач: адреса<Обчислювач>): адреса<Предмет>;

  зовнішня дія перевірити_чи_предмети_рівні(обчислювач: адреса<Обчислювач>, а: адреса<Предмет>, б: адреса<Предмет>): логічне;
  зовнішня дія перевірити_чи_предмет_виражається_логічним_так(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): логічне;

  зовнішня дія вивести_т8(обчислювач: адреса<Обчислювач>, значення: т8);
  зовнішня дія вивести_ю8(обчислювач: адреса<Обчислювач>, значення: ю8);
  зовнішня дія вивести_ю32(обчислювач: адреса<Обчислювач>, значення: ю32);
  зовнішня дія вивести_позитивне(обчислювач: адреса<Обчислювач>, значення: позитивне);
  зовнішня дія вивести_д64(обчислювач: адреса<Обчислювач>, значення: д64);
  зовнішня дія надрукувати_т8(обчислювач: адреса<Обчислювач>, значення: т8);
  зовнішня дія надрукувати_ю8(обчислювач: адреса<Обчислювач>, значення: ю8);
  зовнішня дія надрукувати_позитивне(обчислювач: адреса<Обчислювач>, значення: позитивне);
  зовнішня дія надрукувати_д64(обчислювач: адреса<Обчислювач>, значення: д64);

  зовнішня дія перекодувати_т8_в_ю8(обчислювач: адреса<Обчислювач>, значення: т8, вихід: адреса<ю8>): логічне;
  зовнішня дія перекодувати_ю8_в_т8(обчислювач: адреса<Обчислювач>, значення: ю8, вихід: адреса<т8>): логічне;
  зовнішня дія перекодувати_ю32_в_ю8(обчислювач: адреса<Обчислювач>, значення: ю32, вихід: адреса<ю8>): логічне;

  зовнішня дія отримати_з_т8_т8_з_закодованими_недрукованими(обчислювач: адреса<Обчислювач>, значення: т8, вихід: адреса<т8>): логічне;
  зовнішня дія отримати_з_ю32_ю32_з_закодованими_недрукованими(обчислювач: адреса<Обчислювач>, значення: ю32, вихід: адреса<ю32>): логічне;

  синонім ОбробникВзяттяБіб = (обчислювач: адреса<Обчислювач>, розмір_шляху: позитивне, шлях: памʼять<адреса<Предмет>>) -> адреса<Предмет>;

  зовнішня дія встановити_обробник_взяття_біб(обчислювач: адреса<Обчислювач>, обробник_взяття_біб: ОбробникВзяттяБіб);

  зовнішня дія створити_притримувач(обчислювач: адреса<Обчислювач>): адреса<ПритримувачПредметів>;
  зовнішня дія знищити_притримувач(обчислювач: адреса<Обчислювач>, притримувач: адреса<ПритримувачПредметів>);
  зовнішня дія покласти_притримувач(обчислювач: адреса<Обчислювач>): адреса<ПритримувачПредметів>;
  зовнішня дія притримати(обчислювач: адреса<Обчислювач>, притримувач: адреса<ПритримувачПредметів>, предмет: адреса<Предмет>);
  зовнішня дія відпустити(обчислювач: адреса<Обчислювач>, притримувач: адреса<ПритримувачПредметів>);
  зовнішня дія забрати_притримувач(обчислювач: адреса<Обчислювач>);

  зовнішня дія притримати_глобально(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): адреса<ГлобальноПритриманийПредмет>;
  зовнішня дія відпустити_глобально(обчислювач: адреса<Обчислювач>, глобально_притриманий_предмет: адреса<ГлобальноПритриманийПредмет>);
  зовнішня дія отримати_глобально_притриманий_предмет(обчислювач: адреса<Обчислювач>, глобально_притриманий_предмет: адреса<ГлобальноПритриманийПредмет>): адреса<Предмет>;

  зовнішня дія предмет_отримати_користувацькі_дані(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>): невідома_адреса;
  зовнішня дія предмет_змінити_користувацькі_дані(обчислювач: адреса<Обчислювач>, предмет: адреса<Предмет>, користувацькі_дані: невідома_адреса);

  дія падіння(обчислювач: адреса<Обчислювач>, значення: адреса<Предмет>): адреса<Предмет> {
    увімкнути_стан_падіння(обчислювач, Місцезнаходження { пусто, 0 });
    вернути значення;
  }

  дія падіння(обчислювач: адреса<Обчислювач>, значення: т8): адреса<Предмет> {
    ціль результат = створити_текст(обчислювач, значення);
    якщо перевірити_чи_стан_падіння(обчислювач) {
      вернути результат;
    }
    увімкнути_стан_падіння(обчислювач, Місцезнаходження { пусто, 0 });
    вернути результат;
  }
}