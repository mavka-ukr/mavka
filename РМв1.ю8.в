секція РМв1 {
  структура Місцезнаходження;
  структура ІнформаціяПадіння;
  структура Предмет;
  структура Розширення;
  структура ІменованіАргументи;
  структура ЕлементСловника;
  структура Спроба;
  структура Байти;
  структура ЕлементиСписку;
  структура ЕлементиСловника;
  структура ПритримувачПредметів;

  синонім ПредметАбоСтанПадіння = адреса<Предмет>;

  структура Місцезнаходження {
    шлях: адреса<Предмет>;
    рядок: позитивне;
  }

  структура ЕлементІсторіїВиконання {
    місцезнаходження: Місцезнаходження;
    назва: т8;
  }

  структура ІнформаціяПадіння {
    місцезнаходження: Місцезнаходження;
    розмір_історії: позитивне;
    історія: памʼять<ЕлементІсторіїВиконання>;
  }

  структура ЕлементСловника {
    ключ: адреса<Предмет>;
    значення: адреса<Предмет>;
  }

  структура ЕлементМодуля {
    назва: адреса<Предмет>;
    значення: адреса<Предмет>;
  }

  структура Байти {
    розмір: позитивне;
    дані: памʼять<п8>;
  }

  структура ЕлементиСписку {
    розмір: позитивне;
    дані: памʼять<адреса<Предмет>>;
  }

  структура ЕлементиСловника {
    розмір: позитивне;
    дані: памʼять<ЕлементСловника>;
  }

  синонім РіднаДія = (Р: адреса<Розширення>, предмет_дії: адреса<Предмет>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
  синонім ЗробитиКопіюДанихДії = (Р: адреса<Розширення>, предмет_дії: адреса<Предмет>) -> невідома_адреса;
  синонім ВідкликПередЗнищеннямДії = (Р: адреса<Розширення>, предмет_дії: адреса<Предмет>) -> ніщо;

  структура Розширення {
    обчислювач: невідома_адреса;
    основний_притримувач: адреса<ПритримувачПредметів>;
    дані: невідома_адреса;
    відклик_перед_знищенням: (Р: адреса<Розширення>) -> ніщо;
    вивести_ю8: (Р: адреса<Розширення>, значення: ю8) -> ніщо;
    надрукувати_ю8: (Р: адреса<Розширення>, значення: ю8) -> ніщо;
    почати_спробу: (Р: адреса<Розширення>) -> адреса<Спроба>;
    знищити_спробу: (Р: адреса<Розширення>, спроба: адреса<Спроба>) -> ніщо;
    перевірити_чи_стан_падіння: (Р: адреса<Розширення>) -> логічне;
    увімкнути_стан_падіння: (Р: адреса<Розширення>, місцезнаходження: Місцезнаходження) -> ніщо;
    вимкнути_стан_падіння: (Р: адреса<Розширення>, спроба: адреса<Спроба>) -> ніщо;
    отримати_інформацію_падіння: (Р: адреса<Розширення>, вихід: адреса<адреса<ІнформаціяПадіння>>) -> логічне;
    знищити_інформацію_падіння: (Р: адреса<Розширення>, інформація_падіння: адреса<ІнформаціяПадіння>) -> ніщо;
    предмет_логічного_так: адреса<Предмет>;
    предмет_логічного_ні: адреса<Предмет>;
    створити_рідну_дію: (Р: адреса<Розширення>, назва: адреса<Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<Предмет>>, тип_результату: адреса<Предмет>, рідна_дія: РіднаДія) -> ПредметАбоСтанПадіння;
    отримати_дані_рідної_дії: (Р: адреса<Розширення>, предмет_дії: адреса<Предмет>) -> невідома_адреса;
    створити_число: (Р: адреса<Розширення>, значення: д64) -> ПредметАбоСтанПадіння;
    створити_текст: (Р: адреса<Розширення>, значення: т8) -> ПредметАбоСтанПадіння;
    створити_текст_без_копіювання: (Р: адреса<Розширення>, значення: т8) -> ПредметАбоСтанПадіння;
    створити_юнікод: (Р: адреса<Розширення>, значення: ю32) -> ПредметАбоСтанПадіння;
    створити_юнікод_без_копіювання: (Р: адреса<Розширення>, значення: ю32) -> ПредметАбоСтанПадіння;
    створити_юнікод_з_ю8: (Р: адреса<Розширення>, значення: ю8) -> ПредметАбоСтанПадіння;
    створити_список: (Р: адреса<Розширення>, кількість_елементів: позитивне, елементи: памʼять<адреса<Предмет>>) -> ПредметАбоСтанПадіння;
    створити_словник: (Р: адреса<Розширення>, кількість_елементів: позитивне, елементи: памʼять<ЕлементСловника>) -> ПредметАбоСтанПадіння;
    створити_байти: (Р: адреса<Розширення>, розмір: позитивне, дані: памʼять<п8>) -> ПредметАбоСтанПадіння;
    створити_байти_без_копіювання: (Р: адреса<Розширення>, розмір: позитивне, дані: памʼять<п8>) -> ПредметАбоСтанПадіння;
    створити_модуль: (Р: адреса<Розширення>, назва: адреса<Предмет>, кількість_елементів: позитивне, елементи: памʼять<ЕлементМодуля>) -> ПредметАбоСтанПадіння;
    створити_тип: (Р: адреса<Розширення>, може_бути_пусто: логічне, кількість_допустимих_структур: позитивне, допустимі_структури: памʼять<адреса<Предмет>>) -> ПредметАбоСтанПадіння;
    створити_параметр: (Р: адреса<Розширення>, назва: адреса<Предмет>, тип: адреса<Предмет>) -> ПредметАбоСтанПадіння;
    предмет_додати: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_відняти: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_помножити: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_поділити: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_остача: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_неповна_частка: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_степінь: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_зсунути_вліво: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_зсунути_вправо: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_зсунути_вправо_2: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_двійкове_і: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_двійкове_або: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_двійкове_виключне_або: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_двійкове_заперечення: (Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_менше: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_більше: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_містить: (Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_числова_негація: (Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_отримати_число: (Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_отримати_текст: (Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_отримати_юнікод: (Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_отримати_перебір: (Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    предмет_отримати_діапазон: (Р: адреса<Розширення>, предмет: адреса<Предмет>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження) -> ПредметАбоСтанПадіння;
    перевірити_чи_предмет_є_дією: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> логічне;
    перевірити_чи_предмет_є_числом: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> логічне;
    перевірити_чи_предмет_є_текстом: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> логічне;
    перевірити_чи_предмет_є_юнікодом: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> логічне;
    перевірити_чи_предмет_є_списком: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> логічне;
    перевірити_чи_предмет_є_словником: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> логічне;
    перевірити_чи_предмет_є_байтами: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> логічне;
    перевірити_чи_предмет_є_модулем: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> логічне;
    перевірити_чи_предмет_є_типом: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> логічне;
    перевірити_чи_предмет_є_параметром: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> логічне;
    отримати_значення_числа: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> д64;
    отримати_значення_тексту: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> т8;
    отримати_копію_значення_тексту: (Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<т8>) -> логічне;
    отримати_значення_юнікоду: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> ю32;
    отримати_копію_значення_юнікоду: (Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<ю32>) -> логічне;
    отримати_копію_значення_юнікоду_як_ю8: (Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<ю8>) -> логічне;
    отримати_копію_елементів_списку: (Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<ЕлементиСписку>) -> логічне;
    отримати_копію_елементів_словника: (Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<ЕлементиСловника>) -> логічне;
    отримати_значення_байтів: (Р: адреса<Розширення>, предмет: адреса<Предмет>) -> Байти;
    отримати_копію_значення_байтів: (Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<Байти>) -> логічне;
    покласти_притримувач: (Р: адреса<Розширення>) -> адреса<ПритримувачПредметів>;
    притримати: (Р: адреса<Розширення>, притримувач: адреса<ПритримувачПредметів>, предмет: адреса<Предмет>) -> ніщо;
    відпустити: (Р: адреса<Розширення>, притримувач: адреса<ПритримувачПредметів>) -> ніщо;
    забрати_притримувач: (Р: адреса<Розширення>) -> ніщо;
    назва: (Р: адреса<Розширення>, значення: т8) -> адреса<Предмет>;
  }
}

секція РМв1 {
  дія отримати_основний_притримувач(Р: адреса<Розширення>): адреса<ПритримувачПредметів> {
    вернути Р.основний_притримувач;
  }

  дія змінити_дані(Р: адреса<Розширення>, значення: невідома_адреса) {
    Р.дані = значення;
  }

  дія змінити_відклик_перед_знищенням(Р: адреса<Розширення>, відклик_перед_знищенням: (Р: адреса<Розширення>) -> ніщо) {
    Р.відклик_перед_знищенням = відклик_перед_знищенням;
  }

  дія вивести_ю8(Р: адреса<Розширення>, значення: ю8) {
    Р.вивести_ю8(Р, значення);
  }

  дія надрукувати_ю8(Р: адреса<Розширення>, значення: ю8) {
    Р.надрукувати_ю8(Р, значення);
  }

  дія почати_спробу(Р: адреса<Розширення>): адреса<Спроба> {
    вернути Р.почати_спробу(Р);
  }

  дія знищити_спробу(Р: адреса<Розширення>, спроба: адреса<Спроба>) {
    Р.знищити_спробу(Р, спроба);
  }

  дія перевірити_чи_стан_падіння(Р: адреса<Розширення>): логічне {
    вернути Р.перевірити_чи_стан_падіння(Р);
  }

  дія увімкнути_стан_падіння(Р: адреса<Розширення>, місцезнаходження: Місцезнаходження) {
    Р.увімкнути_стан_падіння(Р, місцезнаходження);
  }

  дія вимкнути_стан_падіння(Р: адреса<Розширення>, спроба: адреса<Спроба>) {
    Р.вимкнути_стан_падіння(Р, спроба);
  }

  дія падіння(Р: адреса<Розширення>, значення: адреса<Предмет>): ПредметАбоСтанПадіння {
    увімкнути_стан_падіння(Р, Місцезнаходження { пусто, 0 });
    вернути значення;
  }

  дія отримати_інформацію_падіння(Р: адреса<Розширення>, вихід: адреса<адреса<ІнформаціяПадіння>>): логічне {
    вернути Р.отримати_інформацію_падіння(Р, вихід);
  }

  дія знищити_інформацію_падіння(Р: адреса<Розширення>, інформація_падіння: адреса<ІнформаціяПадіння>) {
    Р.знищити_інформацію_падіння(Р, інформація_падіння);
  }

  дія отримати_предмет_логічного_так(Р: адреса<Розширення>): адреса<Предмет> {
    вернути Р.предмет_логічного_так;
  }

  дія отримати_предмет_логічного_ні(Р: адреса<Розширення>): адреса<Предмет> {
    вернути Р.предмет_логічного_ні;
  }

  дія створити_рідну_дію(Р: адреса<Розширення>, назва: адреса<Предмет>, кількість_параметрів: позитивне, параметри: памʼять<адреса<Предмет>>, тип_результату: адреса<Предмет>, рідна_дія: РіднаДія): ПредметАбоСтанПадіння {
    вернути Р.створити_рідну_дію(Р, назва, кількість_параметрів, параметри, тип_результату, рідна_дія);
  }

  дія отримати_дані_рідної_дії(Р: адреса<Розширення>, предмет_дії: адреса<Предмет>): невідома_адреса {
    вернути Р.отримати_дані_рідної_дії(Р, предмет_дії);
  }

  дія створити_число(Р: адреса<Розширення>, значення: д64): ПредметАбоСтанПадіння {
    вернути Р.створити_число(Р, значення);
  }

  дія створити_текст(Р: адреса<Розширення>, значення: т8): ПредметАбоСтанПадіння {
    вернути Р.створити_текст(Р, значення);
  }

  дія створити_текст_без_копіювання(Р: адреса<Розширення>, значення: т8): ПредметАбоСтанПадіння {
    вернути Р.створити_текст_без_копіювання(Р, значення);
  }

  дія створити_юнікод(Р: адреса<Розширення>, значення: ю32): ПредметАбоСтанПадіння {
    вернути Р.створити_юнікод(Р, значення);
  }

  дія створити_юнікод_без_копіювання(Р: адреса<Розширення>, значення: ю32): ПредметАбоСтанПадіння {
    вернути Р.створити_юнікод_без_копіювання(Р, значення);
  }

  дія створити_юнікод_з_ю8(Р: адреса<Розширення>, значення: ю8): ПредметАбоСтанПадіння {
    вернути Р.створити_юнікод_з_ю8(Р, значення);
  }

  дія створити_список(Р: адреса<Розширення>, кількість_елементів: позитивне, елементи: памʼять<адреса<Предмет>>): ПредметАбоСтанПадіння {
    вернути Р.створити_список(Р, кількість_елементів, елементи);
  }

  дія створити_словник(Р: адреса<Розширення>, кількість_елементів: позитивне, елементи: памʼять<ЕлементСловника>): ПредметАбоСтанПадіння {
    вернути Р.створити_словник(Р, кількість_елементів, елементи);
  }

  дія створити_байти(Р: адреса<Розширення>, розмір: позитивне, дані: памʼять<п8>): ПредметАбоСтанПадіння {
    вернути Р.створити_байти(Р, розмір, дані);
  }

  дія створити_байти_без_копіювання(Р: адреса<Розширення>, розмір: позитивне, дані: памʼять<п8>): ПредметАбоСтанПадіння {
    вернути Р.створити_байти_без_копіювання(Р, розмір, дані);
  }

  дія створити_модуль(Р: адреса<Розширення>, назва: адреса<Предмет>, кількість_елементів: позитивне, елементи: памʼять<ЕлементМодуля>): ПредметАбоСтанПадіння {
    вернути Р.створити_модуль(Р, назва, кількість_елементів, елементи);
  }

  дія створити_тип(Р: адреса<Розширення>, може_бути_пусто: логічне, кількість_допустимих_структур: позитивне, допустимі_структури: памʼять<адреса<Предмет>>): ПредметАбоСтанПадіння {
    вернути Р.створити_тип(Р, може_бути_пусто, кількість_допустимих_структур, допустимі_структури);
  }

  дія створити_параметр(Р: адреса<Розширення>, назва: адреса<Предмет>, тип: адреса<Предмет>): ПредметАбоСтанПадіння {
    вернути Р.створити_параметр(Р, назва, тип);
  }

  дія предмет_додати(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_додати(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_відняти(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_відняти(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_помножити(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_помножити(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_поділити(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_поділити(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_остача(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_остача(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_неповна_частка(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_неповна_частка(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_степінь(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_степінь(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_зсунути_вліво(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_зсунути_вліво(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_зсунути_вправо(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_зсунути_вправо(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_зсунути_вправо_2(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_зсунути_вправо_2(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_двійкове_і(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_зсунути_вправо_2(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_двійкове_або(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_двійкове_або(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_двійкове_виключне_або(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_двійкове_виключне_або(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_двійкове_заперечення(Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_двійкове_заперечення(Р, предмет, місцезнаходження);
  }

  дія предмет_менше(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_менше(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_більше(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_більше(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_містить(Р: адреса<Розширення>, предмет: адреса<Предмет>, значення: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_містить(Р, предмет, значення, місцезнаходження);
  }

  дія предмет_числова_негація(Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_числова_негація(Р, предмет, місцезнаходження);
  }

  дія предмет_отримати_число(Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_отримати_число(Р, предмет, місцезнаходження);
  }

  дія предмет_отримати_текст(Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_отримати_текст(Р, предмет, місцезнаходження);
  }

  дія предмет_отримати_юнікод(Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_отримати_юнікод(Р, предмет, місцезнаходження);
  }

  дія предмет_отримати_перебір(Р: адреса<Розширення>, предмет: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_отримати_перебір(Р, предмет, місцезнаходження);
  }

  дія предмет_отримати_діапазон(Р: адреса<Розширення>, предмет: адреса<Предмет>, включно: логічне, до: адреса<Предмет>, місцезнаходження: Місцезнаходження): ПредметАбоСтанПадіння {
    вернути Р.предмет_отримати_діапазон(Р, предмет, включно, до, місцезнаходження);
  }

  дія перевірити_чи_предмет_є_дією(Р: адреса<Розширення>, предмет: адреса<Предмет>): логічне {
    вернути Р.перевірити_чи_предмет_є_дією(Р, предмет);
  }

  дія перевірити_чи_предмет_є_числом(Р: адреса<Розширення>, предмет: адреса<Предмет>): логічне {
    вернути Р.перевірити_чи_предмет_є_числом(Р, предмет);
  }

  дія перевірити_чи_предмет_є_текстом(Р: адреса<Розширення>, предмет: адреса<Предмет>): логічне {
    вернути Р.перевірити_чи_предмет_є_текстом(Р, предмет);
  }

  дія перевірити_чи_предмет_є_юнікодом(Р: адреса<Розширення>, предмет: адреса<Предмет>): логічне {
    вернути Р.перевірити_чи_предмет_є_юнікодом(Р, предмет);
  }

  дія перевірити_чи_предмет_є_списком(Р: адреса<Розширення>, предмет: адреса<Предмет>): логічне {
    вернути Р.перевірити_чи_предмет_є_списком(Р, предмет);
  }

  дія перевірити_чи_предмет_є_словником(Р: адреса<Розширення>, предмет: адреса<Предмет>): логічне {
    вернути Р.перевірити_чи_предмет_є_словником(Р, предмет);
  }

  дія перевірити_чи_предмет_є_байтами(Р: адреса<Розширення>, предмет: адреса<Предмет>): логічне {
    вернути Р.перевірити_чи_предмет_є_байтами(Р, предмет);
  }

  дія перевірити_чи_предмет_є_модулем(Р: адреса<Розширення>, предмет: адреса<Предмет>): логічне {
    вернути Р.перевірити_чи_предмет_є_модулем(Р, предмет);
  }

  дія перевірити_чи_предмет_є_типом(Р: адреса<Розширення>, предмет: адреса<Предмет>): логічне {
    вернути Р.перевірити_чи_предмет_є_типом(Р, предмет);
  }

  дія перевірити_чи_предмет_є_параметром(Р: адреса<Розширення>, предмет: адреса<Предмет>): логічне {
    вернути Р.перевірити_чи_предмет_є_параметром(Р, предмет);
  }

  дія отримати_значення_числа(Р: адреса<Розширення>, предмет: адреса<Предмет>): д64 {
    вернути Р.отримати_значення_числа(Р, предмет);
  }

  дія отримати_значення_тексту(Р: адреса<Розширення>, предмет: адреса<Предмет>): т8 {
    вернути Р.отримати_значення_тексту(Р, предмет);
  }

  дія отримати_копію_значення_тексту(Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<т8>): логічне {
    вернути Р.отримати_копію_значення_тексту(Р, предмет, вихід);
  }

  дія отримати_значення_юнікоду(Р: адреса<Розширення>, предмет: адреса<Предмет>): ю32 {
    вернути Р.отримати_значення_юнікоду(Р, предмет);
  }

  дія отримати_копію_значення_юнікоду(Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<ю32>): логічне {
    вернути Р.отримати_копію_значення_юнікоду(Р, предмет, вихід);
  }

  дія отримати_копію_значення_юнікоду_як_ю8(Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<ю8>): логічне {
    вернути Р.отримати_копію_значення_юнікоду_як_ю8(Р, предмет, вихід);
  }

  дія отримати_копію_елементів_списку(Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<ЕлементиСписку>): логічне {
    вернути Р.отримати_копію_елементів_списку(Р, предмет, вихід);
  }

  дія отримати_копію_елементів_словника(Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<ЕлементиСловника>): логічне {
    вернути Р.отримати_копію_елементів_словника(Р, предмет, вихід);
  }

  дія отримати_значення_байтів(Р: адреса<Розширення>, предмет: адреса<Предмет>): Байти {
    вернути Р.отримати_значення_байтів(Р, предмет);
  }

  дія отримати_копію_значення_байтів(Р: адреса<Розширення>, предмет: адреса<Предмет>, вихід: адреса<Байти>): логічне {
    вернути Р.отримати_копію_значення_байтів(Р, предмет, вихід);
  }

  дія покласти_притримувач(Р: адреса<Розширення>): адреса<ПритримувачПредметів> {
    вернути Р.покласти_притримувач(Р);
  }

  дія притримати(Р: адреса<Розширення>, притримувач: адреса<ПритримувачПредметів>, предмет: адреса<Предмет>) {
    Р.притримати(Р, притримувач, предмет);
  }

  дія відпустити(Р: адреса<Розширення>, притримувач: адреса<ПритримувачПредметів>) {
    Р.відпустити(Р, притримувач);
  }

  дія забрати_притримувач(Р: адреса<Розширення>) {
    Р.забрати_притримувач(Р);
  }

  дія знайти_іменований_аргумент(Р: адреса<Розширення>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Предмет>, вихід: адреса<адреса<Предмет>>): логічне {
    вернути ні;
  }

  дія назва(Р: адреса<Розширення>, значення: т8): адреса<Предмет> {
    вернути Р.назва(Р, значення);
  }
}