взяти визначення ./Виділяч;
взяти визначення ./КД;

секція біб {
  синонім МісцезнаходженняПерекодованого = КД::Місцезнаходження;

  дія система_КД_виділити_сиру_памʼять(система: адреса<КД::Система>,
                                       розмір: позитивне): памʼять<п8> {
    змінна виділяч = система.дані як адреса<Виділяч>;
    вернути виділити_памʼять<п8>(виділяч, розмір);
  }

  дія система_КД_перевиділити_сиру_памʼять(система: адреса<КД::Система>,
                                           значення: памʼять<п8>,
                                           новий_розмір: позитивне): памʼять<п8> {
    змінна виділяч = система.дані як адреса<Виділяч>;
    перевиділити_памʼять<п8>(виділяч, значення, новий_розмір);
  }

  дія система_КД_звільнити_сиру_памʼять(система: адреса<КД::Система>,
                                        значення: невідома_памʼять) {
    змінна виділяч = система.дані як адреса<Виділяч>;
    звільнити_памʼять(виділяч, значення);
  }

  дія перекодувати_ю8_в_т8(виділяч: адреса<Виділяч>,
                           вхід: ю8,
                           екранувати_невідомі: логічне,
                           з_нульовим_байтом_в_кінці: логічне,
                           вихід: адреса<т8>,
                           вихід_місцезнаходжень: адреса<МісцезнаходженняПерекодованого>,
                           вихід_позиції_помилки: адреса<позитивне>): логічне {
    змінна система_КД = КД::Система {
      дані = виділяч,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять
    };

    якщо вихід_місцезнаходжень == пусто {
      вернути КД::перекодувати_ю8_в_т8(
        система_КД::адреса,
        вхід,
        екранувати_невідомі,
        з_нульовим_байтом_в_кінці,
        вихід,
        вихід_позиції_помилки
      );
    }

    вернути КД::перекодувати_ю8_в_т8_з_місцезнаходженнями(
      система_КД::адреса,
      вхід,
      екранувати_невідомі,
      з_нульовим_байтом_в_кінці,
      вихід,
      вихід_місцезнаходжень як адреса<КД::Місцезнаходження>,
      вихід_позиції_помилки
    );
  }

  дія перекодувати_т8_в_ю8(виділяч: адреса<Виділяч>,
                           вхід: т8,
                           з_нульовим_байтом_в_кінці: логічне,
                           вихід: адреса<ю8>,
                           вихід_місцезнаходжень: адреса<МісцезнаходженняПерекодованого>,
                           вихід_позиції_помилки: адреса<позитивне>): логічне {
    змінна система_КД = КД::Система {
      дані = виділяч,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять
    };

    якщо вихід_місцезнаходжень == пусто {
      вернути КД::перекодувати_т8_в_ю8(
        система_КД::адреса,
        вхід,
        з_нульовим_байтом_в_кінці,
        вихід,
        вихід_позиції_помилки
      );
    }

    вернути КД::перекодувати_т8_в_ю8_з_місцезнаходженнями(
      система_КД::адреса,
      вхід,
      з_нульовим_байтом_в_кінці,
      вихід,
      вихід_місцезнаходжень як адреса<КД::Місцезнаходження>,
      вихід_позиції_помилки
    );
  }

  дія обробити_екранізації_в_т8(виділяч: адреса<Виділяч>,
                                вхід: т8,
                                з_нульовим_байтом_в_кінці: логічне,
                                вихід: адреса<т8>,
                                вихід_місцезнаходжень: адреса<МісцезнаходженняПерекодованого>,
                                вихід_помилки: невідома_адреса): логічне {
    змінна система_КД = КД::Система {
      дані = виділяч,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять
    };

    вернути КД::обробити_екранізації_в_т8(
      система_КД::адреса,
      вхід,
      з_нульовим_байтом_в_кінці,
      вихід
    );
  }

  дія обробити_екранізації_в_ю8(виділяч: адреса<Виділяч>,
                                вхід: ю8,
                                з_нульовим_байтом_в_кінці: логічне,
                                вихід: адреса<ю8>,
                                вихід_місцезнаходжень: адреса<МісцезнаходженняПерекодованого>,
                                вихід_помилки: невідома_адреса): логічне {
    змінна система_КД = КД::Система {
      дані = виділяч,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять
    };

    вернути КД::обробити_екранізації_в_ю8(
      система_КД::адреса,
      вхід,
      з_нульовим_байтом_в_кінці,
      вихід
    );
  }

  дія перевірити_чи_т8_рівні(а: т8, б: т8): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }

      п += 1;
    }

    вернути так;
  }

  дія перевірити_чи_ю8_рівні(а: ю8, б: ю8): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }

      п += 1;
    }

    вернути так;
  }

  дія перевірити_чи_ю8_закінчується_на(значення: ю8, очікуване: ю8): логічне {
    якщо значення.розмір < очікуване.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < очікуване.розмір {
      якщо значення.дані[(значення.розмір - очікуване.розмір) + п] != очікуване.дані[п] {
        вернути ні;
      }

      п += 1;
    }

    вернути так;
  }

  дія обʼєднати_ю8(виділяч: адреса<Виділяч>, а: ю8, б: ю8): ю8 {
    змінна новий_розмір = а.розмір + б.розмір;
    змінна нові_дані = виділити_памʼять<п8>(виділяч, новий_розмір);

    змінна пп: позитивне = 0;
    змінна п: позитивне = 0;

    поки п < а.розмір {
      нові_дані[пп] = а.дані[п];

      п += 1;
      пп += 1;
    }

    п = 0;

    поки п < б.розмір {
      нові_дані[пп] = б.дані[п];

      п += 1;
      пп += 1;
    }

    вернути ю8 { новий_розмір, нові_дані };
  }
}